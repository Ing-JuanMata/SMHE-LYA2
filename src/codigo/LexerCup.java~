/* The following code was generated by JFlex 1.4.3 on 20/05/22 00:10 */

package codigo;

import java_cup.runtime.Symbol;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 20/05/22 00:10 from the specification file
 * <tt>B:/TEC/SEMESTRE_7/AUTOMATAS_1/SmartHealth_V4/SmartHealth_V3/SmartHealth/src/codigo/LexerCup.flex</tt>
 */
class LexerCup implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  3,  5,  0,  0,  3,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     3, 41,  6,  0,  0, 44, 39, 55, 45, 46, 38, 36, 52, 37, 54,  4, 
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 53, 51, 43, 35, 42,  0, 
     0,  7,  1, 32, 26, 12,  1,  1,  1,  1,  1,  1, 33,  1,  1,  1, 
     1,  1, 31, 25,  1,  1,  1,  1,  1,  1,  1, 49,  0, 50,  0,  1, 
     0, 10, 15, 19, 14, 16, 23, 17, 20, 18,  1,  1,  9, 29, 13, 22, 
    28,  1, 21, 11,  8, 24, 27,  1, 34, 30,  1, 47, 40, 48,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\23\1\1\6"+
    "\3\4\3\7\2\10\1\0\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\2\0\1\3\1\22"+
    "\1\0\1\1\1\23\10\1\1\24\20\1\1\10\1\25"+
    "\1\7\2\0\1\26\1\27\5\1\1\30\10\1\1\31"+
    "\15\1\1\0\1\32\1\1\1\33\11\1\1\34\1\1"+
    "\1\35\1\36\12\1\1\37\1\2\1\0\1\40\1\41"+
    "\1\42\1\43\5\1\1\44\5\1\1\45\1\46\4\1"+
    "\1\0\4\1\1\47\3\1\1\50\1\1\1\51\1\1"+
    "\1\52\1\1\1\26\10\1\1\53\2\1\1\54\1\55"+
    "\4\1\1\56\3\1\1\57\1\60\1\61\1\62\5\1"+
    "\1\63\1\64";

  private static int [] zzUnpackAction() {
    int [] result = new int[210];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\160\0\250\0\340\0\u0118\0\u0150\0\u0188"+
    "\0\u01c0\0\u01f8\0\u0230\0\u0268\0\u02a0\0\u02d8\0\u0310\0\u0348"+
    "\0\u0380\0\u03b8\0\u03f0\0\u0428\0\u0460\0\u0498\0\u04d0\0\u0508"+
    "\0\u0540\0\u0578\0\u05b0\0\u05e8\0\u0620\0\u0658\0\u0690\0\u0578"+
    "\0\u06c8\0\u0700\0\u0620\0\u0738\0\u0770\0\u0770\0\u0770\0\u0770"+
    "\0\u0770\0\u0770\0\u0770\0\u0770\0\u07a8\0\u07e0\0\u0818\0\u0770"+
    "\0\u0850\0\u0888\0\70\0\u08c0\0\u08f8\0\u0930\0\u0968\0\u09a0"+
    "\0\u09d8\0\u0a10\0\u0a48\0\u0a80\0\u0ab8\0\u0af0\0\u0b28\0\u0b60"+
    "\0\u0b98\0\u0bd0\0\u0c08\0\u0c40\0\u0c78\0\u0cb0\0\u0ce8\0\u0d20"+
    "\0\u0d58\0\u0d90\0\u0dc8\0\u0e00\0\u0770\0\u0770\0\u0770\0\u0e38"+
    "\0\u0e70\0\u07e0\0\u0850\0\u0ea8\0\u0ee0\0\u0f18\0\u0f50\0\u0f88"+
    "\0\70\0\u0fc0\0\u0ff8\0\u1030\0\u1068\0\u10a0\0\u10d8\0\u1110"+
    "\0\u1148\0\70\0\u1180\0\u11b8\0\u11f0\0\u1228\0\u1260\0\u1298"+
    "\0\u12d0\0\u1308\0\u1340\0\u1378\0\u13b0\0\u13e8\0\u1420\0\u1458"+
    "\0\u0770\0\u1490\0\70\0\u14c8\0\u1500\0\u1538\0\u1570\0\u15a8"+
    "\0\u15e0\0\u1618\0\u1650\0\u1688\0\70\0\u16c0\0\70\0\70"+
    "\0\u16f8\0\u1730\0\u1768\0\u17a0\0\u17d8\0\u1810\0\u1848\0\u1880"+
    "\0\u18b8\0\u18f0\0\70\0\u0770\0\u1928\0\70\0\70\0\70"+
    "\0\70\0\u1960\0\u1998\0\u19d0\0\u1a08\0\u1a40\0\70\0\u1a78"+
    "\0\u1ab0\0\u1ae8\0\u1b20\0\u1b58\0\70\0\70\0\u1b90\0\u1bc8"+
    "\0\u1c00\0\u1c38\0\u1c70\0\u1ca8\0\u1ce0\0\u1d18\0\u1d50\0\70"+
    "\0\u1d88\0\u1dc0\0\u1df8\0\70\0\u1e30\0\70\0\u1e68\0\70"+
    "\0\u1ea0\0\u0770\0\u1ed8\0\u1f10\0\u1f48\0\u1f80\0\u1fb8\0\u1ff0"+
    "\0\u2028\0\u2060\0\70\0\u2098\0\u20d0\0\70\0\70\0\u2108"+
    "\0\u2140\0\u2178\0\u21b0\0\70\0\u21e8\0\u2220\0\u2258\0\70"+
    "\0\70\0\70\0\70\0\u2290\0\u22c8\0\u2300\0\u2338\0\u2370"+
    "\0\70\0\70";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[210];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\2\1\3\1\4\1\5\1\4\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\2\1\15\1\16"+
    "\1\17\1\2\1\20\1\21\1\2\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\4\2\1\31\2\2\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\0\1\55\1\0\2\2\4\0\34\2"+
    "\27\0\1\3\63\0\1\56\4\0\1\4\1\0\1\4"+
    "\66\0\1\57\36\0\1\60\24\0\5\61\1\0\62\61"+
    "\1\0\2\2\4\0\1\2\1\62\2\2\1\63\27\2"+
    "\26\0\2\2\4\0\16\2\1\64\15\2\26\0\2\2"+
    "\4\0\17\2\1\65\14\2\26\0\2\2\4\0\7\2"+
    "\1\66\24\2\26\0\2\2\4\0\1\2\1\67\32\2"+
    "\26\0\2\2\4\0\6\2\1\70\25\2\26\0\2\2"+
    "\4\0\11\2\1\71\1\2\1\72\2\2\1\73\1\74"+
    "\14\2\26\0\2\2\4\0\11\2\1\75\22\2\26\0"+
    "\2\2\4\0\2\2\1\76\23\2\1\77\4\2\1\100"+
    "\26\0\2\2\4\0\6\2\1\101\25\2\26\0\2\2"+
    "\4\0\15\2\1\102\1\2\1\103\14\2\26\0\2\2"+
    "\4\0\11\2\1\104\22\2\26\0\2\2\4\0\25\2"+
    "\1\105\6\2\26\0\2\2\4\0\2\2\1\106\1\107"+
    "\30\2\26\0\2\2\4\0\6\2\1\110\25\2\26\0"+
    "\2\2\4\0\1\2\1\111\32\2\26\0\2\2\4\0"+
    "\11\2\1\112\22\2\26\0\2\2\4\0\11\2\1\113"+
    "\22\2\26\0\2\2\4\0\3\2\1\114\30\2\70\0"+
    "\1\115\67\0\1\60\1\116\66\0\1\60\1\0\1\116"+
    "\65\0\1\60\73\0\1\117\70\0\1\117\62\0\1\115"+
    "\6\0\1\115\60\0\1\115\7\0\1\115\61\0\1\120"+
    "\112\0\5\121\1\0\62\121\2\0\1\122\65\0\5\57"+
    "\1\0\62\57\5\61\1\0\1\123\61\61\1\0\2\2"+
    "\4\0\2\2\1\124\31\2\26\0\2\2\4\0\21\2"+
    "\1\125\12\2\26\0\2\2\4\0\12\2\1\126\21\2"+
    "\26\0\2\2\4\0\26\2\1\127\5\2\26\0\2\2"+
    "\4\0\3\2\1\130\30\2\26\0\2\2\4\0\7\2"+
    "\1\131\24\2\26\0\2\2\4\0\24\2\1\132\7\2"+
    "\26\0\2\2\4\0\4\2\1\133\27\2\26\0\2\2"+
    "\4\0\13\2\1\134\20\2\26\0\2\2\4\0\21\2"+
    "\1\135\12\2\26\0\2\2\4\0\12\2\1\136\21\2"+
    "\26\0\2\2\4\0\4\2\1\137\27\2\26\0\2\2"+
    "\4\0\25\2\1\140\6\2\26\0\2\2\4\0\13\2"+
    "\1\141\20\2\26\0\2\2\4\0\1\2\1\142\32\2"+
    "\26\0\2\2\4\0\3\2\1\143\30\2\26\0\2\2"+
    "\4\0\6\2\1\144\25\2\26\0\2\2\4\0\12\2"+
    "\1\145\21\2\26\0\2\2\4\0\1\2\1\146\7\2"+
    "\1\147\22\2\26\0\2\2\4\0\17\2\1\150\14\2"+
    "\26\0\2\2\4\0\2\2\1\151\31\2\26\0\2\2"+
    "\4\0\1\2\1\152\32\2\26\0\2\2\4\0\16\2"+
    "\1\153\15\2\26\0\2\2\4\0\14\2\1\154\7\2"+
    "\1\155\7\2\26\0\2\2\4\0\6\2\1\156\25\2"+
    "\26\0\2\2\4\0\4\2\1\157\27\2\27\0\1\160"+
    "\154\0\1\161\1\0\2\2\4\0\3\2\1\162\30\2"+
    "\26\0\2\2\4\0\11\2\1\163\22\2\26\0\2\2"+
    "\4\0\13\2\1\164\20\2\26\0\2\2\4\0\13\2"+
    "\1\165\20\2\26\0\2\2\4\0\16\2\1\166\15\2"+
    "\26\0\2\2\4\0\13\2\1\167\20\2\26\0\2\2"+
    "\4\0\1\2\1\170\23\2\1\171\6\2\26\0\2\2"+
    "\4\0\24\2\1\172\7\2\26\0\2\2\4\0\10\2"+
    "\1\173\23\2\26\0\2\2\4\0\13\2\1\174\20\2"+
    "\26\0\2\2\4\0\11\2\1\175\22\2\26\0\2\2"+
    "\4\0\1\2\1\176\32\2\26\0\2\2\4\0\1\2"+
    "\1\177\32\2\26\0\2\2\4\0\16\2\1\200\15\2"+
    "\26\0\2\2\4\0\7\2\1\201\24\2\26\0\2\2"+
    "\4\0\13\2\1\202\20\2\26\0\2\2\4\0\13\2"+
    "\1\203\20\2\26\0\2\2\4\0\6\2\1\204\25\2"+
    "\26\0\2\2\4\0\3\2\1\205\30\2\26\0\2\2"+
    "\4\0\4\2\1\125\27\2\26\0\2\2\4\0\13\2"+
    "\1\206\20\2\26\0\2\2\4\0\13\2\1\207\20\2"+
    "\26\0\2\2\4\0\2\2\1\210\31\2\26\0\2\2"+
    "\4\0\13\2\1\211\20\2\26\0\2\2\4\0\1\2"+
    "\1\212\32\2\26\0\2\2\4\0\11\2\1\213\22\2"+
    "\27\0\1\160\53\0\1\214\7\0\1\215\2\0\2\2"+
    "\4\0\4\2\1\216\27\2\26\0\2\2\4\0\14\2"+
    "\1\217\17\2\26\0\2\2\4\0\1\2\1\220\32\2"+
    "\26\0\2\2\4\0\1\2\1\221\32\2\26\0\2\2"+
    "\4\0\14\2\1\222\17\2\26\0\2\2\4\0\3\2"+
    "\1\223\30\2\26\0\2\2\4\0\11\2\1\224\22\2"+
    "\26\0\2\2\4\0\11\2\1\225\22\2\26\0\2\2"+
    "\4\0\2\2\1\226\31\2\26\0\2\2\4\0\6\2"+
    "\1\227\25\2\26\0\2\2\4\0\27\2\1\230\4\2"+
    "\26\0\2\2\4\0\13\2\1\231\20\2\26\0\2\2"+
    "\4\0\4\2\1\232\27\2\26\0\2\2\4\0\17\2"+
    "\1\233\14\2\26\0\2\2\4\0\23\2\1\234\10\2"+
    "\26\0\2\2\4\0\1\2\1\235\32\2\26\0\2\2"+
    "\4\0\2\2\1\236\31\2\26\0\2\2\4\0\6\2"+
    "\1\237\25\2\26\0\2\2\4\0\3\2\1\240\30\2"+
    "\26\0\2\2\4\0\14\2\1\241\17\2\26\0\2\2"+
    "\4\0\13\2\1\242\20\2\27\0\1\243\66\0\2\2"+
    "\4\0\11\2\1\244\22\2\26\0\2\2\4\0\6\2"+
    "\1\245\25\2\26\0\2\2\4\0\6\2\1\246\25\2"+
    "\26\0\2\2\4\0\16\2\1\247\15\2\26\0\2\2"+
    "\4\0\11\2\1\250\22\2\26\0\2\2\4\0\30\2"+
    "\1\251\3\2\26\0\2\2\4\0\1\2\1\252\32\2"+
    "\26\0\2\2\4\0\1\2\1\253\32\2\26\0\2\2"+
    "\4\0\6\2\1\254\25\2\26\0\2\2\4\0\17\2"+
    "\1\255\14\2\26\0\2\2\4\0\12\2\1\256\21\2"+
    "\26\0\2\2\4\0\16\2\1\257\15\2\26\0\2\2"+
    "\4\0\11\2\1\260\22\2\26\0\2\2\4\0\2\2"+
    "\1\261\31\2\27\0\1\243\53\0\1\262\12\0\2\2"+
    "\4\0\31\2\1\263\2\2\26\0\2\2\4\0\14\2"+
    "\1\264\17\2\26\0\2\2\4\0\4\2\1\265\27\2"+
    "\26\0\2\2\4\0\32\2\1\266\1\2\26\0\2\2"+
    "\4\0\17\2\1\267\14\2\26\0\2\2\4\0\13\2"+
    "\1\270\20\2\26\0\2\2\4\0\11\2\1\271\22\2"+
    "\26\0\2\2\4\0\17\2\1\272\14\2\26\0\2\2"+
    "\4\0\11\2\1\273\22\2\26\0\2\2\4\0\3\2"+
    "\1\274\30\2\26\0\2\2\4\0\17\2\1\275\14\2"+
    "\26\0\2\2\4\0\11\2\1\276\22\2\26\0\2\2"+
    "\4\0\11\2\1\277\22\2\26\0\2\2\4\0\13\2"+
    "\1\300\20\2\26\0\2\2\4\0\17\2\1\301\14\2"+
    "\26\0\2\2\4\0\17\2\1\302\14\2\26\0\2\2"+
    "\4\0\16\2\1\303\15\2\26\0\2\2\4\0\16\2"+
    "\1\304\15\2\26\0\2\2\4\0\1\2\1\305\32\2"+
    "\26\0\2\2\4\0\6\2\1\306\25\2\26\0\2\2"+
    "\4\0\12\2\1\307\21\2\26\0\2\2\4\0\26\2"+
    "\1\310\5\2\26\0\2\2\4\0\6\2\1\311\25\2"+
    "\26\0\2\2\4\0\1\312\33\2\26\0\2\2\4\0"+
    "\11\2\1\313\22\2\26\0\2\2\4\0\1\2\1\314"+
    "\32\2\26\0\2\2\4\0\15\2\1\315\16\2\26\0"+
    "\2\2\4\0\16\2\1\316\15\2\26\0\2\2\4\0"+
    "\1\2\1\317\32\2\26\0\2\2\4\0\17\2\1\320"+
    "\14\2\26\0\2\2\4\0\4\2\1\321\27\2\26\0"+
    "\2\2\4\0\2\2\1\322\31\2\25\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9128];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\41\1\1\0\1\1\10\11\2\0\1\1\1\11"+
    "\1\0\33\1\3\11\2\0\36\1\1\0\1\11\32\1"+
    "\1\11\1\0\25\1\1\0\16\1\1\11\40\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[210];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public Symbol token(int simbolo){
		return new Symbol(simbolo,yyline,yycolumn,yytext());
	}
	public Symbol token(int simbolo,String componenteLexico){
		return new Symbol(simbolo,yyline,yycolumn,yytext());
	}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexerCup(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  LexerCup(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 11: 
          { return new Symbol(sym.Llave_a, yychar, yyline, yytext());
          }
        case 53: break;
        case 41: 
          { return new Symbol(sym.Cadena, yychar, yyline, yytext());
          }
        case 54: break;
        case 25: 
          { return new Symbol(sym.Int, yychar, yyline, yytext());
          }
        case 55: break;
        case 18: 
          { return new Symbol(sym.Op_atribucion, yychar, yyline, yytext());
          }
        case 56: break;
        case 28: 
          { return new Symbol(sym.Else, yychar, yyline, yytext());
          }
        case 57: break;
        case 7: 
          { return new Symbol(sym.Op_logico, yychar, yyline, yytext());
          }
        case 58: break;
        case 49: 
          { return new Symbol(sym.RegisterA, yychar, yyline, yytext());
          }
        case 59: break;
        case 13: 
          { return new Symbol(sym.Corchete_a, yychar, yyline, yytext());
          }
        case 60: break;
        case 34: 
          { return new Symbol(sym.Admit, yychar, yyline, yytext());
          }
        case 61: break;
        case 35: 
          { return new Symbol(sym.Start, yychar, yyline, yytext());
          }
        case 62: break;
        case 20: 
          { return new Symbol(sym.Do, yychar, yyline, yytext());
          }
        case 63: break;
        case 30: 
          { return new Symbol(sym.Char, yychar, yyline, yytext());
          }
        case 64: break;
        case 36: 
          { return new Symbol(sym.Begin, yychar, yyline, yytext());
          }
        case 65: break;
        case 42: 
          { return new Symbol(sym.Device, yychar, yyline, yytext());
          }
        case 66: break;
        case 19: 
          { return new Symbol(sym.As, yychar, yyline, yytext());
          }
        case 67: break;
        case 45: 
          { return new Symbol(sym.Dispense, yychar, yyline, yytext());
          }
        case 68: break;
        case 5: 
          { return new Symbol(sym.Comillas, yychar, yyline, yytext());
          }
        case 69: break;
        case 9: 
          { return new Symbol(sym.Parentesis_a, yychar, yyline, yytext());
          }
        case 70: break;
        case 40: 
          { return new Symbol(sym.Option, yychar, yyline, yytext());
          }
        case 71: break;
        case 52: 
          { return new Symbol(sym.DeviceControl, yychar, yyline, yytext());
          }
        case 72: break;
        case 33: 
          { return new Symbol(sym.Logic, yychar, yyline, yytext());
          }
        case 73: break;
        case 12: 
          { return new Symbol(sym.Llave_c, yychar, yyline, yytext());
          }
        case 74: break;
        case 48: 
          { return new Symbol(sym.Condition, yychar, yyline, yytext());
          }
        case 75: break;
        case 50: 
          { return new Symbol(sym.Ventilate, yychar, yyline, yytext());
          }
        case 76: break;
        case 4: 
          { return new Symbol(sym.Aritmetico, yychar, yyline, yytext());
          }
        case 77: break;
        case 14: 
          { return new Symbol(sym.Corchete_c, yychar, yyline, yytext());
          }
        case 78: break;
        case 29: 
          { return new Symbol(sym.Exit, yychar, yyline, yytext());
          }
        case 79: break;
        case 21: 
          { return new Symbol(sym.Op_incremento, yychar, yyline, yytext());
          }
        case 80: break;
        case 43: 
          { return new Symbol(sym.Declare, yychar, yyline, yytext());
          }
        case 81: break;
        case 51: 
          { return new Symbol(sym.DriverLights, yychar, yyline, yytext());
          }
        case 82: break;
        case 31: 
          { return new Symbol(sym.Case, yychar, yyline, yytext());
          }
        case 83: break;
        case 17: 
          { return new Symbol(sym.Dos_puntos, yychar, yyline, yytext());
          }
        case 84: break;
        case 39: 
          { return new Symbol(sym.Double, yychar, yyline, yytext());
          }
        case 85: break;
        case 47: 
          { return new Symbol(sym.EmptyRoom, yychar, yyline, yytext());
          }
        case 86: break;
        case 10: 
          { return new Symbol(sym.Parentesis_c, yychar, yyline, yytext());
          }
        case 87: break;
        case 15: 
          { return new Symbol(sym.P_coma, yychar, yyline, yytext());
          }
        case 88: break;
        case 46: 
          { return new Symbol(sym.OpenDoor, yychar, yyline, yytext());
          }
        case 89: break;
        case 32: 
          { return new Symbol(sym.Atlas, yychar, yyline, yytext());
          }
        case 90: break;
        case 44: 
          { return new Symbol(sym.Distance, yychar, yyline, yytext());
          }
        case 91: break;
        case 26: 
          { return new Symbol(sym.Caracter, yychar, yyline, yytext());
          }
        case 92: break;
        case 38: 
          { return new Symbol(sym.Until, yychar, yyline, yytext());
          }
        case 93: break;
        case 3: 
          { /*Ignore*/
          }
        case 94: break;
        case 6: 
          { return new Symbol(sym.Igual, yychar, yyline, yytext());
          }
        case 95: break;
        case 16: 
          { return new Symbol(sym.Coma, yychar, yyline, yytext());
          }
        case 96: break;
        case 1: 
          { return new Symbol(sym.Identificador, yychar, yyline, yytext());
          }
        case 97: break;
        case 2: 
          { return new Symbol(sym.Numero, yychar, yyline, yytext());
          }
        case 98: break;
        case 24: 
          { return new Symbol(sym.End, yychar, yyline, yytext());
          }
        case 99: break;
        case 22: 
          { return new Symbol(sym.Numero_Dec, yychar, yyline, yytext());
          }
        case 100: break;
        case 8: 
          { return new Symbol(sym.Op_relacional, yychar, yyline, yytext());
          }
        case 101: break;
        case 37: 
          { return new Symbol(sym.Float, yychar, yyline, yytext());
          }
        case 102: break;
        case 23: 
          { return new Symbol(sym.Texto, yychar, yyline, yytext());
          }
        case 103: break;
        case 27: 
          { return new Symbol(sym.Op_booleano, yychar, yyline, yytext());
          }
        case 104: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
