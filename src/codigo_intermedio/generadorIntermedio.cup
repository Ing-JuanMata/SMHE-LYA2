package codigo_intermedio;

import java_cup.runtime.Symbol;
import codigo.FrmPrincipal;
import java.util.ArrayList;


parser code
{:
    public BloquePrograma programa;
    private BloqueTripletas bloqueActual, bloqueAux;
    private ArrayList<Tripleta> expresion;
    private ArrayList<Integer> anidamientos = new ArrayList<>();
    private Tripleta actual;
    private Object aux1, aux2, aux3, aux4, valorActual, expr1, expr2;
    private String ambito = "";
    private int anidamiento = 0;
    public TablaSimbolos tabla = new TablaSimbolos();
    private TablaFunciones tblF = new TablaFunciones(tabla);
    private boolean inicial = false;

    public generadorIntermedio(analisis.Lexer lexer){
        super(lexer);
    }

    private int agregarAnidamiento(){
        if(anidamiento == 0 && anidamientos.size() == 0){
            anidamientos.add(1);
            anidamientos.add(0);
            anidamiento++;
            return 1;
        }
        anidamientos.set(anidamiento, anidamientos.get(anidamiento) + 1);
        anidamientos.add(0);
        return anidamientos.get(anidamiento++);
    }
    private void quitarAnidamiento(){
        if(anidamiento == 0){
            ambito = ambito.split(":")[0];
            //anidamientos.clear();
            return;
        }
        if(anidamiento == 1){
            ambito = ambito.split(":")[0];
            anidamiento--;
            return;
        }
        anidamientos.remove(anidamiento--);
        anidamientos.remove(anidamiento--);
        String cadena = "";
        for(int i: anidamientos) cadena += ":" + i;
        ambito = ambito.split(":")[0] + cadena;
    }

    private void agregarTripletaBloque(Tripleta tripleta){
        bloqueActual.addTripleta(tripleta);
    }

    private void guardarBloque(){
        programa.addBloque(bloqueActual);
    }

    private void guardarBloqueCondicional(){
        if(bloqueActual instanceof BloqueSiNo){
            bloqueActual = ((BloqueSiNo) bloqueActual).bloquePadre;
            return;
        }
        if(bloqueActual instanceof BloqueMientras){
            BloqueCondicional bc = (BloqueMientras) bloqueActual;
            bc.bloquePadre.addBloqueInterno(bc);
            bloqueActual = bc.bloquePadre;
            bloqueAux = bc;
            return;
        }
        BloqueCondicional bc = (BloqueCondicion) bloqueActual;
        if(inicial){bc.bloquePadre.addBloqueInterno(bc);}
        bloqueActual = bc.bloquePadre;
        bloqueAux = bc;
    }

    private void agregarTripletaExpresion(Tripleta tripleta){
        expresion.add(tripleta);
    }
:};

terminal FIN, COMIENZO, ENTERO, LOGICO, CONDICION, SINO, VENTILAR,
        ADMITIR, DISPENSAR, SALIR, INICIO, DECLARAR, COMO, CADA, POR, SEG,
        MIN, HR, ABRIR, CERRAR, VENTANAS, PUERTAS, MANTENER, OBTENER, TEMPERATURA,
        PERSONAS, APAGAR, ENCENDER, SANITIZAR, LUCES, ESTADO, FUNCION, USAR, MIENTRAS;
terminal REL_MENOR, REL_MAYOR, REL_MENOR_IGUAL, REL_MAYOR_IGUAL, REL_DIFERENTE, 
        REL_IGUAL;
terminal AR_SUMA, AR_RESTA, AR_MULTIPLICACION, AR_DIVISION;
terminal NEGACION, LOGICO_AND, LOGICO_OR;
terminal INC, DEC, ASIGNACION;
terminal PARENTESIS_ABIERTO, PARENTESIS_CERRADO, LLAVE_ABIERTA, LLAVE_CERRADA;
terminal PUNTO_COMA, COMA;
terminal Integer NUMERO;
terminal Boolean OP_BOOLEANO;
terminal String IDENTIFICADOR;

non terminal inicio, inicio1, inicio2, gramaticas, ventilar, admitir, funcion,
            inicio_fin, parametros, expresion, parametros_llamar, usar, valores,
            op1, op2, op3, op4, op5, op6, op7, op8, tiempo_abrir_cerrar, 
            usar_funcion, mientras, cabecera_condicional, cuerpo_estructura,
            condicion, sino;
non terminal TripletaTiempoPor tiempo_por;
non terminal TripletaTiempoCada tiempo_cada;
non terminal String unidad_tiempo, estado, tipo_dato, declaracion_tipo_dato;
non terminal TripletaDeclaracion declaracion_inicio;
non terminal TripletaAsignacion declaracion_valor, asignacion;

start with inicio;

inicio ::= INICIO {:programa = new BloquePrograma();:} IDENTIFICADOR LLAVE_ABIERTA inicio1;
inicio1 ::= COMIENZO {:bloqueActual = new BloqueTripletas();:} PARENTESIS_ABIERTO tiempo_cada:t
        {:bloqueActual = new BloqueComienzo(t); ambito = "comienzo";guardarBloque();:}
        PARENTESIS_CERRADO inicio2;
inicio2 ::= LLAVE_ABIERTA gramaticas LLAVE_CERRADA inicio_fin;
inicio_fin ::= LLAVE_CERRADA FIN | FUNCION funcion inicio_fin;
funcion ::= IDENTIFICADOR:i {:bloqueActual = new BloqueFuncion(i); guardarBloque();:} 
        PARENTESIS_ABIERTO parametros PARENTESIS_CERRADO LLAVE_ABIERTA gramaticas 
        LLAVE_CERRADA {:tblF.setInicio(i, bloqueActual.getInicio());:};
parametros ::= declaracion_inicio COMA parametros | declaracion_inicio | /**/;
gramaticas ::= IDENTIFICADOR:i INC PUNTO_COMA 
            {:agregarTripletaBloque(new TripletaIncremento(tabla.getDireccion(i, ambito)));:} gramaticas
            | IDENTIFICADOR:i DEC PUNTO_COMA 
            {:agregarTripletaBloque(new TripletaDecremento(tabla.getDireccion(i, ambito)));:} gramaticas
            | INC IDENTIFICADOR:i PUNTO_COMA
            {:agregarTripletaBloque(new TripletaIncremento(tabla.getDireccion(i, ambito)));:} gramaticas
            | DEC IDENTIFICADOR:i PUNTO_COMA
            {:agregarTripletaBloque(new TripletaDecremento(tabla.getDireccion(i, ambito)));:} gramaticas
            | declaracion_inicio:di {:agregarTripletaBloque(di);:} PUNTO_COMA gramaticas
            | declaracion_inicio:di declaracion_valor:dv 
            {:di.setInicializacion(dv); agregarTripletaBloque(di);:} PUNTO_COMA gramaticas
            | asignacion:a {:agregarTripletaBloque(a);:} PUNTO_COMA gramaticas
            | CONDICION {:bloqueActual = new BloqueCondicion(bloqueActual); inicial = true;:} condicion gramaticas
            | MIENTRAS {:bloqueActual = new BloqueMientras(bloqueActual);:} mientras gramaticas
            | APAGAR LUCES PUNTO_COMA {:agregarTripletaBloque(new TripletaApagar());:} gramaticas
            | ENCENDER LUCES PUNTO_COMA {:agregarTripletaBloque(new TripletaEncender());:} gramaticas
            | ABRIR PUERTAS tiempo_abrir_cerrar:tac 
            {:agregarTripletaBloque(new TripletaAbrir("puertas", tac));:} PUNTO_COMA gramaticas
            | CERRAR PUERTAS tiempo_abrir_cerrar:tac
            {:agregarTripletaBloque(new TripletaCerrar("puertas", tac));:} PUNTO_COMA gramaticas
            | ABRIR VENTANAS tiempo_abrir_cerrar:tac
            {:agregarTripletaBloque(new TripletaAbrir("ventanas", tac));:} PUNTO_COMA gramaticas
            | CERRAR VENTANAS tiempo_abrir_cerrar:tac
            {:agregarTripletaBloque(new TripletaCerrar("ventanas", tac));:} PUNTO_COMA gramaticas 
            | SANITIZAR tiempo_por:t PUNTO_COMA {:agregarTripletaBloque(new TripletaSanitizar(t));:} gramaticas
            | DISPENSAR tiempo_por:t PUNTO_COMA {:agregarTripletaBloque(new TripletaDispensar(t));:} gramaticas
            | usar PUNTO_COMA gramaticas
            | SALIR PUNTO_COMA {:agregarTripletaBloque(new TripletaSalir());:}
            | /**/;
tiempo_abrir_cerrar ::= MANTENER {:RESULT = "mantener";:} | tiempo_por:t {:RESULT = t;:};
usar ::= USAR usar_funcion | USAR admitir | USAR ventilar;
usar_funcion ::= IDENTIFICADOR:i {:
                actual = new TripletaUsar(i, tblF);
                agregarTripletaBloque(actual);
                bloqueAux = bloqueActual; bloqueActual = new BloqueTripletas();
            :}
            PARENTESIS_ABIERTO parametros_llamar PARENTESIS_CERRADO;
parametros_llamar ::= expresion:e {:
                    ((TripletaUsar)actual).addParametro(e instanceof Tripleta ? bloqueActual : e);
                    bloqueActual = new BloqueTripletas();
                :} COMA parametros_llamar 
                | expresion:e {:
                    ((TripletaUsar)actual).addParametro(e instanceof Tripleta ? bloqueActual : e);
                    bloqueActual = bloqueAux;
                :} 
                | {:bloqueActual = bloqueAux;:};
tiempo_cada ::= CADA expresion:e unidad_tiempo:ut {:RESULT = new TripletaTiempoCada((e instanceof Tripleta) ? bloqueActual : e, ut);:};
tiempo_por ::= POR {:bloqueAux = bloqueActual; bloqueActual = new BloqueTripletas();:}
            expresion:e unidad_tiempo:ut 
            {:RESULT = new TripletaTiempoPor((e instanceof Tripleta) ? bloqueActual : e, ut); bloqueActual = bloqueAux;:};
unidad_tiempo ::= SEG {:RESULT="seg";:} | MIN {:RESULT="min";:} | HR {:RESULT="hr";:};
estado ::= LUCES {:RESULT="luces";:}| PUERTAS {:RESULT="puertas";:}| VENTANAS {:RESULT="ventanas";:};
asignacion ::= IDENTIFICADOR:i ASIGNACION expresion:e {:RESULT = new TripletaAsignacion(tabla.getDireccion(i, ambito), e);:};
declaracion_inicio ::= IDENTIFICADOR:i DECLARAR declaracion_tipo_dato:dtd
                    {:RESULT = new TripletaDeclaracion(dtd, tabla.getDireccion(i, ambito));:};
declaracion_valor ::= ASIGNACION expresion:e {:RESULT = new TripletaAsignacion(e);:};
declaracion_tipo_dato ::= COMO tipo_dato:td {:RESULT=td;:};
tipo_dato ::= ENTERO {:RESULT="entero";:}| LOGICO {:RESULT="logico";:};
expresion ::= op2:v {:valorActual = v;:} op1:r {:RESULT = r;:};
op1 ::= LOGICO_AND {:aux1 = valorActual;:} op2:v {:
        TripletaAnd t = new TripletaAnd(aux1, v);
        valorActual = t;
        agregarTripletaBloque(t);
    :} op1:r {:RESULT=r;:}
    | LOGICO_OR {:aux1 = valorActual;:} op2:v {:
        TripletaOr t = new TripletaOr(aux1, v);
        valorActual = t;
        agregarTripletaBloque(t);
    :} op1:r {:RESULT=r;:}
    | {:RESULT=valorActual;:};
op2 ::= op4:v {:valorActual = v;:} op3:r {:RESULT = r;:};
op3 ::= REL_MENOR {:aux2 = valorActual;:} op4:v {:
        TripletaMenor t = new TripletaMenor(aux2, v);
        valorActual = t;
        agregarTripletaBloque(t);
        RESULT = t;
    :}
    | REL_MAYOR {:aux2 = valorActual;:}  op4:v {:
        TripletaMayor t = new TripletaMayor(aux2, v);
        valorActual = t;
        agregarTripletaBloque(t);
        RESULT = t;
    :}
    | REL_MENOR_IGUAL {:aux2 = valorActual;:}  op4:v {:
        TripletaMenorIgual t = new TripletaMenorIgual(aux2, v);
        valorActual = t;
        agregarTripletaBloque(t);
        RESULT = t;
    :}
    | REL_MAYOR_IGUAL {:aux2 = valorActual;:}  op4:v {:
        TripletaMayorIgual t = new TripletaMayorIgual(aux2, v);
        valorActual = t;
        agregarTripletaBloque(t);
        RESULT = t;
    :}
    | REL_DIFERENTE {:aux2 = valorActual;:}  op4:v {:
        TripletaDiferente t = new TripletaDiferente(aux2, v);
        valorActual = t;
        agregarTripletaBloque(t);
        RESULT = t;
    :}
    | REL_IGUAL {:aux2 = valorActual;:}  op4:v {:
        TripletaIgual t = new TripletaIgual(aux2, v);
        valorActual = t;
        agregarTripletaBloque(t);
        RESULT = t;
    :}
    | {:RESULT=valorActual;:};
op4 ::= op6:v {:valorActual = v;:} op5:r {:RESULT = r;:};
op5 ::= AR_SUMA {:aux3 = valorActual;:} op6:v {:
        TripletaSuma t = new TripletaSuma(aux3, v);
        valorActual = t;
        agregarTripletaBloque(t);
    :} op5:r {:RESULT=r;:} 
    | AR_RESTA {:aux3 = valorActual;:} op6:v {:
        TripletaResta t = new TripletaResta(aux3, v);
        valorActual = t;
        agregarTripletaBloque(t);
    :} op5:r {:RESULT=r;:} 
    | {:RESULT=valorActual;:};
op6 ::= op8:v {:valorActual = v;:} op7:r {:RESULT = r;:};
op7 ::= AR_DIVISION {:aux4 = valorActual;:} op8:v {:
        TripletaDivision t = new TripletaDivision(aux4, v);
        valorActual = t;
        agregarTripletaBloque(t);
    :} op7:r {:RESULT=r;:} 
    | AR_MULTIPLICACION {:aux4 = valorActual;:} op8:v {:
        TripletaMultiplicacion t = new TripletaMultiplicacion(aux4, v);
        valorActual = t;
        agregarTripletaBloque(t);
    :} op7:r {:RESULT=r;:} 
    | {:RESULT=valorActual;:};
op8 ::= valores:v {:RESULT = v;:} 
    | AR_RESTA valores:v {:
        TripletaResta t = new TripletaResta(v);
        RESULT = t;
        agregarTripletaBloque(t);
    :}
    | NEGACION valores:v {:
        TripletaNegacion t = new TripletaNegacion(v);
        RESULT = t;
        agregarTripletaBloque(t);
    :};
valores ::= NUMERO:n {:RESULT = n;:} 
            | IDENTIFICADOR:i {:RESULT = tabla.getDireccion(i, ambito);:} 
            | OBTENER TEMPERATURA {:
                TripletaObtener t = new TripletaObtener("temperatura");
                RESULT = t;
                agregarTripletaBloque(t);
            :} 
            | OBTENER PERSONAS {:
                TripletaObtener t = new TripletaObtener("personas");
                RESULT = t;
                agregarTripletaBloque(t);
            :}
            | OP_BOOLEANO:o {:RESULT = o ? "verdadero" : "falso";:} 
            | ESTADO estado:e {:
                TripletaEstado t = new TripletaEstado(e);
                RESULT = t;
                agregarTripletaBloque(t);
            :}
            | PARENTESIS_ABIERTO expresion:e PARENTESIS_CERRADO {:RESULT = e;:};
condicion ::=  cabecera_condicional cuerpo_estructura
            | cabecera_condicional cuerpo_estructura sino;
sino ::= SINO {:
            inicial = false;
            BloqueSiNo bsn = new BloqueSiNo(bloqueActual);
            BloqueCondicion bc = new BloqueCondicion(bloqueActual);
            bsn.setCondicion(bc);
            ((BloqueCondicion) bloqueAux).setSiNo(bsn);
            bloqueActual = bc;
        :} CONDICION condicion 
        | SINO {:
            inicial = false;
            bloqueActual = new BloqueSiNo(bloqueActual);
            ((BloqueCondicion) bloqueAux).setSiNo((BloqueSiNo) bloqueActual);
        :} cuerpo_estructura;
ventilar ::= VENTILAR PARENTESIS_ABIERTO tiempo_por:t COMA 
        {:bloqueAux = bloqueActual; bloqueActual = new BloqueTripletas();:} 
        expresion:e1 COMA {:expr1 = (e1 instanceof Tripleta) ? bloqueActual : e1; bloqueActual = new BloqueTripletas();:}
        expresion:e2 PARENTESIS_CERRADO
        {:
            expr2 = (e2 instanceof Tripleta) ? bloqueActual : e2; bloqueActual = bloqueAux;
            TripletaVentilar tv = new TripletaVentilar(new TripletaUsar(), t, expr1, expr2, tabla);
            agregarTripletaBloque(tv);
        :};
admitir ::= ADMITIR PARENTESIS_ABIERTO {:bloqueAux = bloqueActual; bloqueActual = new BloqueTripletas();:}
        expresion:e {:expr1 = (e instanceof Tripleta) ? bloqueActual : e; bloqueActual = bloqueAux;:} COMA tiempo_por:t PARENTESIS_CERRADO 
        {:agregarTripletaBloque(new TripletaAdmitir(new TripletaUsar(), t, expr1, tabla));:};
mientras ::= cabecera_condicional cuerpo_estructura;
cabecera_condicional ::= PARENTESIS_ABIERTO {:bloqueAux = bloqueActual; bloqueActual = new BloqueTripletas();:}
    expresion:e PARENTESIS_CERRADO 
    {:((BloqueCondicional) bloqueAux).setCondicion(new TripletaCondicion(e instanceof Tripleta ? bloqueActual : e));bloqueActual=bloqueAux;:};
cuerpo_estructura ::= {:ambito+=":"+(agregarAnidamiento());:} LLAVE_ABIERTA gramaticas {:quitarAnidamiento();guardarBloqueCondicional();:} LLAVE_CERRADA;