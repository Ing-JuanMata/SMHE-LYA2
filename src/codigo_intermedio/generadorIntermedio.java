
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package codigo_intermedio;

import java_cup.runtime.Symbol;
import codigo.FrmPrincipal;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class generadorIntermedio extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public generadorIntermedio() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public generadorIntermedio(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public generadorIntermedio(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\134\000\002\002\004\000\002\002\006\000\002\003" +
    "\007\000\002\004\006\000\002\016\004\000\002\016\005" +
    "\000\002\015\011\000\002\017\005\000\002\017\003\000" +
    "\002\017\002\000\002\005\006\000\002\005\006\000\002" +
    "\005\006\000\002\005\006\000\002\005\005\000\002\005" +
    "\006\000\002\005\005\000\002\005\005\000\002\005\005" +
    "\000\002\005\006\000\002\005\006\000\002\005\007\000" +
    "\002\005\007\000\002\005\007\000\002\005\007\000\002" +
    "\005\006\000\002\005\006\000\002\005\005\000\002\005" +
    "\004\000\002\005\002\000\002\035\003\000\002\035\003" +
    "\000\002\023\004\000\002\023\004\000\002\023\004\000" +
    "\002\036\006\000\002\022\005\000\002\022\003\000\002" +
    "\022\002\000\002\006\005\000\002\007\005\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\020\005\000" +
    "\002\044\005\000\002\011\004\000\002\042\004\000\002" +
    "\043\003\000\002\043\003\000\002\021\004\000\002\025" +
    "\005\000\002\025\005\000\002\025\002\000\002\026\004" +
    "\000\002\027\004\000\002\027\004\000\002\027\004\000" +
    "\002\027\004\000\002\027\004\000\002\027\004\000\002" +
    "\027\002\000\002\030\004\000\002\031\005\000\002\031" +
    "\005\000\002\031\002\000\002\032\004\000\002\033\005" +
    "\000\002\033\005\000\002\033\002\000\002\034\003\000" +
    "\002\034\004\000\002\034\004\000\002\024\003\000\002" +
    "\024\003\000\002\024\004\000\002\024\004\000\002\024" +
    "\003\000\002\024\004\000\002\024\005\000\002\045\004" +
    "\000\002\045\005\000\002\046\005\000\002\046\006\000" +
    "\002\012\012\000\002\013\010\000\002\037\004\000\002" +
    "\040\005\000\002\041\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\335\000\004\016\004\001\002\000\004\076\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\070\010\001\002\000\004\005\012\001\002\000" +
    "\004\002\000\001\002\000\004\066\013\001\002\000\004" +
    "\021\014\001\002\000\022\033\050\042\061\055\055\060" +
    "\063\066\057\074\053\075\052\076\064\001\002\000\004" +
    "\067\016\001\002\000\004\070\017\001\002\000\036\010" +
    "\040\014\025\015\026\026\041\027\031\036\022\037\027" +
    "\040\021\044\032\045\034\063\035\064\036\071\uffe4\076" +
    "\037\001\002\000\004\002\uffff\001\002\000\004\022\046" +
    "\001\002\000\004\041\330\001\002\000\006\065\322\072" +
    "\323\001\002\000\004\071\277\001\002\000\004\022\046" +
    "\001\002\000\004\072\273\001\002\000\004\041\270\001" +
    "\002\000\004\072\266\001\002\000\006\030\256\031\257" +
    "\001\002\000\010\012\230\013\233\076\231\001\002\000" +
    "\004\072\224\001\002\000\004\066\155\001\002\000\004" +
    "\076\215\001\002\000\004\076\212\001\002\000\012\017" +
    "\176\063\175\064\177\065\174\001\002\000\004\066\155" +
    "\001\002\000\006\030\042\031\043\001\002\000\006\022" +
    "\046\032\047\001\002\000\006\022\046\032\047\001\002" +
    "\000\004\072\146\001\002\000\004\072\uffe2\001\002\000" +
    "\022\033\050\042\061\055\055\060\063\066\057\074\053" +
    "\075\052\076\064\001\002\000\004\072\uffe3\001\002\000" +
    "\006\034\144\035\145\001\002\000\046\023\uffb8\024\uffb8" +
    "\025\uffb8\046\uffb8\047\uffb8\050\uffb8\051\uffb8\052\uffb8\053" +
    "\uffb8\054\uffb8\055\uffb8\056\uffb8\057\uffb8\061\uffb8\062\uffb8" +
    "\067\uffb8\072\uffb8\073\uffb8\001\002\000\046\023\uffb1\024" +
    "\uffb1\025\uffb1\046\uffb1\047\uffb1\050\uffb1\051\uffb1\052\uffb1" +
    "\053\uffb1\054\uffb1\055\uffb1\056\uffb1\057\uffb1\061\uffb1\062" +
    "\uffb1\067\uffb1\072\uffb1\073\uffb1\001\002\000\046\023\uffb5" +
    "\024\uffb5\025\uffb5\046\uffb5\047\uffb5\050\uffb5\051\uffb5\052" +
    "\uffb5\053\uffb5\054\uffb5\055\uffb5\056\uffb5\057\uffb5\061\uffb5" +
    "\062\uffb5\067\uffb5\072\uffb5\073\uffb5\001\002\000\010\023" +
    "\143\024\140\025\141\001\002\000\016\033\050\042\061" +
    "\066\057\074\053\075\052\076\064\001\002\000\046\023" +
    "\uffb9\024\uffb9\025\uffb9\046\uffb9\047\uffb9\050\uffb9\051\uffb9" +
    "\052\uffb9\053\uffb9\054\uffb9\055\uffb9\056\131\057\130\061" +
    "\uffb9\062\uffb9\067\uffb9\072\uffb9\073\uffb9\001\002\000\022" +
    "\033\050\042\061\055\055\060\063\066\057\074\053\075" +
    "\052\076\064\001\002\000\042\023\uffbd\024\uffbd\025\uffbd" +
    "\046\uffbd\047\uffbd\050\uffbd\051\uffbd\052\uffbd\053\uffbd\054" +
    "\121\055\120\061\uffbd\062\uffbd\067\uffbd\072\uffbd\073\uffbd" +
    "\001\002\000\010\030\113\031\116\041\114\001\002\000" +
    "\036\023\uffc1\024\uffc1\025\uffc1\046\100\047\101\050\077" +
    "\051\076\052\103\053\104\061\uffc1\062\uffc1\067\uffc1\072" +
    "\uffc1\073\uffc1\001\002\000\016\033\050\042\061\066\057" +
    "\074\053\075\052\076\064\001\002\000\046\023\uffb4\024" +
    "\uffb4\025\uffb4\046\uffb4\047\uffb4\050\uffb4\051\uffb4\052\uffb4" +
    "\053\uffb4\054\uffb4\055\uffb4\056\uffb4\057\uffb4\061\uffb4\062" +
    "\uffb4\067\uffb4\072\uffb4\073\uffb4\001\002\000\022\023\uffc9" +
    "\024\uffc9\025\uffc9\061\070\062\067\067\uffc9\072\uffc9\073" +
    "\uffc9\001\002\000\016\023\uffcc\024\uffcc\025\uffcc\067\uffcc" +
    "\072\uffcc\073\uffcc\001\002\000\022\033\050\042\061\055" +
    "\055\060\063\066\057\074\053\075\052\076\064\001\002" +
    "\000\022\033\050\042\061\055\055\060\063\066\057\074" +
    "\053\075\052\076\064\001\002\000\022\023\uffc9\024\uffc9" +
    "\025\uffc9\061\070\062\067\067\uffc9\072\uffc9\073\uffc9\001" +
    "\002\000\016\023\uffcb\024\uffcb\025\uffcb\067\uffcb\072\uffcb" +
    "\073\uffcb\001\002\000\022\023\uffc9\024\uffc9\025\uffc9\061" +
    "\070\062\067\067\uffc9\072\uffc9\073\uffc9\001\002\000\016" +
    "\023\uffca\024\uffca\025\uffca\067\uffca\072\uffca\073\uffca\001" +
    "\002\000\046\023\uffb6\024\uffb6\025\uffb6\046\uffb6\047\uffb6" +
    "\050\uffb6\051\uffb6\052\uffb6\053\uffb6\054\uffb6\055\uffb6\056" +
    "\uffb6\057\uffb6\061\uffb6\062\uffb6\067\uffb6\072\uffb6\073\uffb6" +
    "\001\002\000\022\033\050\042\061\055\055\060\063\066" +
    "\057\074\053\075\052\076\064\001\002\000\022\033\050" +
    "\042\061\055\055\060\063\066\057\074\053\075\052\076" +
    "\064\001\002\000\022\033\050\042\061\055\055\060\063" +
    "\066\057\074\053\075\052\076\064\001\002\000\022\033" +
    "\050\042\061\055\055\060\063\066\057\074\053\075\052" +
    "\076\064\001\002\000\022\023\uffc8\024\uffc8\025\uffc8\061" +
    "\uffc8\062\uffc8\067\uffc8\072\uffc8\073\uffc8\001\002\000\022" +
    "\033\050\042\061\055\055\060\063\066\057\074\053\075" +
    "\052\076\064\001\002\000\022\033\050\042\061\055\055" +
    "\060\063\066\057\074\053\075\052\076\064\001\002\000" +
    "\022\023\uffc2\024\uffc2\025\uffc2\061\uffc2\062\uffc2\067\uffc2" +
    "\072\uffc2\073\uffc2\001\002\000\022\023\uffc3\024\uffc3\025" +
    "\uffc3\061\uffc3\062\uffc3\067\uffc3\072\uffc3\073\uffc3\001\002" +
    "\000\022\023\uffc6\024\uffc6\025\uffc6\061\uffc6\062\uffc6\067" +
    "\uffc6\072\uffc6\073\uffc6\001\002\000\022\023\uffc7\024\uffc7" +
    "\025\uffc7\061\uffc7\062\uffc7\067\uffc7\072\uffc7\073\uffc7\001" +
    "\002\000\022\023\uffc5\024\uffc5\025\uffc5\061\uffc5\062\uffc5" +
    "\067\uffc5\072\uffc5\073\uffc5\001\002\000\022\023\uffc4\024" +
    "\uffc4\025\uffc4\061\uffc4\062\uffc4\067\uffc4\072\uffc4\073\uffc4" +
    "\001\002\000\046\023\uffd3\024\uffd3\025\uffd3\046\uffd3\047" +
    "\uffd3\050\uffd3\051\uffd3\052\uffd3\053\uffd3\054\uffd3\055\uffd3" +
    "\056\uffd3\057\uffd3\061\uffd3\062\uffd3\067\uffd3\072\uffd3\073" +
    "\uffd3\001\002\000\046\023\uffd5\024\uffd5\025\uffd5\046\uffd5" +
    "\047\uffd5\050\uffd5\051\uffd5\052\uffd5\053\uffd5\054\uffd5\055" +
    "\uffd5\056\uffd5\057\uffd5\061\uffd5\062\uffd5\067\uffd5\072\uffd5" +
    "\073\uffd5\001\002\000\046\023\uffb0\024\uffb0\025\uffb0\046" +
    "\uffb0\047\uffb0\050\uffb0\051\uffb0\052\uffb0\053\uffb0\054\uffb0" +
    "\055\uffb0\056\uffb0\057\uffb0\061\uffb0\062\uffb0\067\uffb0\072" +
    "\uffb0\073\uffb0\001\002\000\046\023\uffd4\024\uffd4\025\uffd4" +
    "\046\uffd4\047\uffd4\050\uffd4\051\uffd4\052\uffd4\053\uffd4\054" +
    "\uffd4\055\uffd4\056\uffd4\057\uffd4\061\uffd4\062\uffd4\067\uffd4" +
    "\072\uffd4\073\uffd4\001\002\000\036\023\uffc0\024\uffc0\025" +
    "\uffc0\046\uffc0\047\uffc0\050\uffc0\051\uffc0\052\uffc0\053\uffc0" +
    "\061\uffc0\062\uffc0\067\uffc0\072\uffc0\073\uffc0\001\002\000" +
    "\022\033\050\042\061\055\055\060\063\066\057\074\053" +
    "\075\052\076\064\001\002\000\022\033\050\042\061\055" +
    "\055\060\063\066\057\074\053\075\052\076\064\001\002" +
    "\000\042\023\uffbd\024\uffbd\025\uffbd\046\uffbd\047\uffbd\050" +
    "\uffbd\051\uffbd\052\uffbd\053\uffbd\054\121\055\120\061\uffbd" +
    "\062\uffbd\067\uffbd\072\uffbd\073\uffbd\001\002\000\036\023" +
    "\uffbf\024\uffbf\025\uffbf\046\uffbf\047\uffbf\050\uffbf\051\uffbf" +
    "\052\uffbf\053\uffbf\061\uffbf\062\uffbf\067\uffbf\072\uffbf\073" +
    "\uffbf\001\002\000\042\023\uffbd\024\uffbd\025\uffbd\046\uffbd" +
    "\047\uffbd\050\uffbd\051\uffbd\052\uffbd\053\uffbd\054\121\055" +
    "\120\061\uffbd\062\uffbd\067\uffbd\072\uffbd\073\uffbd\001\002" +
    "\000\036\023\uffbe\024\uffbe\025\uffbe\046\uffbe\047\uffbe\050" +
    "\uffbe\051\uffbe\052\uffbe\053\uffbe\061\uffbe\062\uffbe\067\uffbe" +
    "\072\uffbe\073\uffbe\001\002\000\004\067\127\001\002\000" +
    "\046\023\uffaf\024\uffaf\025\uffaf\046\uffaf\047\uffaf\050\uffaf" +
    "\051\uffaf\052\uffaf\053\uffaf\054\uffaf\055\uffaf\056\uffaf\057" +
    "\uffaf\061\uffaf\062\uffaf\067\uffaf\072\uffaf\073\uffaf\001\002" +
    "\000\022\033\050\042\061\055\055\060\063\066\057\074" +
    "\053\075\052\076\064\001\002\000\022\033\050\042\061" +
    "\055\055\060\063\066\057\074\053\075\052\076\064\001" +
    "\002\000\042\023\uffbc\024\uffbc\025\uffbc\046\uffbc\047\uffbc" +
    "\050\uffbc\051\uffbc\052\uffbc\053\uffbc\054\uffbc\055\uffbc\061" +
    "\uffbc\062\uffbc\067\uffbc\072\uffbc\073\uffbc\001\002\000\046" +
    "\023\uffb9\024\uffb9\025\uffb9\046\uffb9\047\uffb9\050\uffb9\051" +
    "\uffb9\052\uffb9\053\uffb9\054\uffb9\055\uffb9\056\131\057\130" +
    "\061\uffb9\062\uffb9\067\uffb9\072\uffb9\073\uffb9\001\002\000" +
    "\042\023\uffba\024\uffba\025\uffba\046\uffba\047\uffba\050\uffba" +
    "\051\uffba\052\uffba\053\uffba\054\uffba\055\uffba\061\uffba\062" +
    "\uffba\067\uffba\072\uffba\073\uffba\001\002\000\046\023\uffb9" +
    "\024\uffb9\025\uffb9\046\uffb9\047\uffb9\050\uffb9\051\uffb9\052" +
    "\uffb9\053\uffb9\054\uffb9\055\uffb9\056\131\057\130\061\uffb9" +
    "\062\uffb9\067\uffb9\072\uffb9\073\uffb9\001\002\000\042\023" +
    "\uffbb\024\uffbb\025\uffbb\046\uffbb\047\uffbb\050\uffbb\051\uffbb" +
    "\052\uffbb\053\uffbb\054\uffbb\055\uffbb\061\uffbb\062\uffbb\067" +
    "\uffbb\072\uffbb\073\uffbb\001\002\000\046\023\uffb7\024\uffb7" +
    "\025\uffb7\046\uffb7\047\uffb7\050\uffb7\051\uffb7\052\uffb7\053" +
    "\uffb7\054\uffb7\055\uffb7\056\uffb7\057\uffb7\061\uffb7\062\uffb7" +
    "\067\uffb7\072\uffb7\073\uffb7\001\002\000\010\067\uffd7\072" +
    "\uffd7\073\uffd7\001\002\000\010\067\uffd6\072\uffd6\073\uffd6" +
    "\001\002\000\010\067\uffd9\072\uffd9\073\uffd9\001\002\000" +
    "\010\067\uffd8\072\uffd8\073\uffd8\001\002\000\046\023\uffb3" +
    "\024\uffb3\025\uffb3\046\uffb3\047\uffb3\050\uffb3\051\uffb3\052" +
    "\uffb3\053\uffb3\054\uffb3\055\uffb3\056\uffb3\057\uffb3\061\uffb3" +
    "\062\uffb3\067\uffb3\072\uffb3\073\uffb3\001\002\000\046\023" +
    "\uffb2\024\uffb2\025\uffb2\046\uffb2\047\uffb2\050\uffb2\051\uffb2" +
    "\052\uffb2\053\uffb2\054\uffb2\055\uffb2\056\uffb2\057\uffb2\061" +
    "\uffb2\062\uffb2\067\uffb2\072\uffb2\073\uffb2\001\002\000\036" +
    "\010\040\014\025\015\026\026\041\027\031\036\022\037" +
    "\027\040\021\044\032\045\034\063\035\064\036\071\uffe4" +
    "\076\037\001\002\000\004\071\uffec\001\002\000\004\072" +
    "\151\001\002\000\036\010\040\014\025\015\026\026\041" +
    "\027\031\036\022\037\027\040\021\044\032\045\034\063" +
    "\035\064\036\071\uffe4\076\037\001\002\000\004\071\uffea" +
    "\001\002\000\036\010\040\014\025\015\026\026\041\027" +
    "\031\036\022\037\027\040\021\044\032\045\034\063\035" +
    "\064\036\071\uffe4\076\037\001\002\000\004\070\161\001" +
    "\002\000\022\033\050\042\061\055\055\060\063\066\057" +
    "\074\053\075\052\076\064\001\002\000\004\067\157\001" +
    "\002\000\004\070\uffa7\001\002\000\040\010\uffae\011\165" +
    "\014\uffae\015\uffae\026\uffae\027\uffae\036\uffae\037\uffae\040" +
    "\uffae\044\uffae\045\uffae\063\uffae\064\uffae\071\uffae\076\uffae" +
    "\001\002\000\036\010\040\014\025\015\026\026\041\027" +
    "\031\036\022\037\027\040\021\044\032\045\034\063\035" +
    "\064\036\071\uffe4\076\037\001\002\000\004\071\163\001" +
    "\002\000\040\010\uffa6\011\uffa6\014\uffa6\015\uffa6\026\uffa6" +
    "\027\uffa6\036\uffa6\037\uffa6\040\uffa6\044\uffa6\045\uffa6\063" +
    "\uffa6\064\uffa6\071\uffa6\076\uffa6\001\002\000\036\010\uffad" +
    "\014\uffad\015\uffad\026\uffad\027\uffad\036\uffad\037\uffad\040" +
    "\uffad\044\uffad\045\uffad\063\uffad\064\uffad\071\uffad\076\uffad" +
    "\001\002\000\006\010\166\070\167\001\002\000\004\066" +
    "\155\001\002\000\036\010\040\014\025\015\026\026\041" +
    "\027\031\036\022\037\027\040\021\044\032\045\034\063" +
    "\035\064\036\071\uffe4\076\037\001\002\000\004\071\171" +
    "\001\002\000\036\010\uffab\014\uffab\015\uffab\026\uffab\027" +
    "\uffab\036\uffab\037\uffab\040\uffab\044\uffab\045\uffab\063\uffab" +
    "\064\uffab\071\uffab\076\uffab\001\002\000\036\010\uffac\014" +
    "\uffac\015\uffac\026\uffac\027\uffac\036\uffac\037\uffac\040\uffac" +
    "\044\uffac\045\uffac\063\uffac\064\uffac\071\uffac\076\uffac\001" +
    "\002\000\004\071\ufff0\001\002\000\022\033\050\042\061" +
    "\055\055\060\063\066\057\074\053\075\052\076\064\001" +
    "\002\000\004\072\207\001\002\000\004\020\203\001\002" +
    "\000\004\072\200\001\002\000\036\010\040\014\025\015" +
    "\026\026\041\027\031\036\022\037\027\040\021\044\032" +
    "\045\034\063\035\064\036\071\uffe4\076\037\001\002\000" +
    "\004\071\ufff6\001\002\000\012\065\uffd1\067\uffd1\072\uffd1" +
    "\073\uffd1\001\002\000\006\006\206\007\205\001\002\000" +
    "\012\065\uffcf\067\uffcf\072\uffcf\073\uffcf\001\002\000\012" +
    "\065\uffcd\067\uffcd\072\uffcd\073\uffcd\001\002\000\012\065" +
    "\uffce\067\uffce\072\uffce\073\uffce\001\002\000\036\010\040" +
    "\014\025\015\026\026\041\027\031\036\022\037\027\040" +
    "\021\044\032\045\034\063\035\064\036\071\uffe4\076\037" +
    "\001\002\000\004\071\ufff7\001\002\000\004\072\uffd2\001" +
    "\002\000\004\072\213\001\002\000\036\010\040\014\025" +
    "\015\026\026\041\027\031\036\022\037\027\040\021\044" +
    "\032\045\034\063\035\064\036\071\uffe4\076\037\001\002" +
    "\000\004\071\ufff4\001\002\000\004\072\216\001\002\000" +
    "\036\010\040\014\025\015\026\026\041\027\031\036\022" +
    "\037\027\040\021\044\032\045\034\063\035\064\036\071" +
    "\uffe4\076\037\001\002\000\004\071\ufff5\001\002\000\036" +
    "\010\040\014\025\015\026\026\041\027\031\036\022\037" +
    "\027\040\021\044\032\045\034\063\035\064\036\071\uffe4" +
    "\076\037\001\002\000\004\070\161\001\002\000\036\010" +
    "\uffa8\014\uffa8\015\uffa8\026\uffa8\027\uffa8\036\uffa8\037\uffa8" +
    "\040\uffa8\044\uffa8\045\uffa8\063\uffa8\064\uffa8\071\uffa8\076" +
    "\uffa8\001\002\000\004\071\uffef\001\002\000\036\010\040" +
    "\014\025\015\026\026\041\027\031\036\022\037\027\040" +
    "\021\044\032\045\034\063\035\064\036\071\uffe4\076\037" +
    "\001\002\000\004\071\uffe6\001\002\000\004\072\uffe1\001" +
    "\002\000\004\072\uffe0\001\002\000\004\066\247\001\002" +
    "\000\004\066\241\001\002\000\004\072\uffdf\001\002\000" +
    "\004\066\234\001\002\000\022\033\050\042\061\055\055" +
    "\060\063\066\057\074\053\075\052\076\064\001\002\000" +
    "\004\073\236\001\002\000\004\022\046\001\002\000\004" +
    "\067\240\001\002\000\004\072\uffa9\001\002\000\024\033" +
    "\050\042\061\055\055\060\063\066\057\067\uffdb\074\053" +
    "\075\052\076\064\001\002\000\004\067\246\001\002\000" +
    "\006\067\uffdc\073\244\001\002\000\024\033\050\042\061" +
    "\055\055\060\063\066\057\067\uffdb\074\053\075\052\076" +
    "\064\001\002\000\004\067\uffdd\001\002\000\004\072\uffde" +
    "\001\002\000\004\022\046\001\002\000\004\073\251\001" +
    "\002\000\022\033\050\042\061\055\055\060\063\066\057" +
    "\074\053\075\052\076\064\001\002\000\004\073\253\001" +
    "\002\000\022\033\050\042\061\055\055\060\063\066\057" +
    "\074\053\075\052\076\064\001\002\000\004\067\255\001" +
    "\002\000\004\072\uffaa\001\002\000\006\022\046\032\047" +
    "\001\002\000\006\022\046\032\047\001\002\000\004\072" +
    "\261\001\002\000\036\010\040\014\025\015\026\026\041" +
    "\027\031\036\022\037\027\040\021\044\032\045\034\063" +
    "\035\064\036\071\uffe4\076\037\001\002\000\004\071\uffeb" +
    "\001\002\000\004\072\264\001\002\000\036\010\040\014" +
    "\025\015\026\026\041\027\031\036\022\037\027\040\021" +
    "\044\032\045\034\063\035\064\036\071\uffe4\076\037\001" +
    "\002\000\004\071\uffe9\001\002\000\036\010\040\014\025" +
    "\015\026\026\041\027\031\036\022\037\027\040\021\044" +
    "\032\045\034\063\035\064\036\071\uffe4\076\037\001\002" +
    "\000\004\071\ufff1\001\002\000\004\072\271\001\002\000" +
    "\036\010\040\014\025\015\026\026\041\027\031\036\022" +
    "\037\027\040\021\044\032\045\034\063\035\064\036\071" +
    "\uffe4\076\037\001\002\000\004\071\uffed\001\002\000\004" +
    "\071\uffe5\001\002\000\004\072\275\001\002\000\036\010" +
    "\040\014\025\015\026\026\041\027\031\036\022\037\027" +
    "\040\021\044\032\045\034\063\035\064\036\071\uffe4\076" +
    "\037\001\002\000\004\071\uffe7\001\002\000\006\043\301" +
    "\071\302\001\002\000\004\002\ufffe\001\002\000\004\076" +
    "\304\001\002\000\004\004\303\001\002\000\004\002\ufffd" +
    "\001\002\000\004\066\307\001\002\000\006\043\301\071" +
    "\302\001\002\000\004\002\ufffc\001\002\000\006\067\ufff8" +
    "\076\311\001\002\000\004\067\315\001\002\000\004\017" +
    "\176\001\002\000\006\067\ufff9\073\313\001\002\000\006" +
    "\067\ufff8\076\311\001\002\000\004\067\ufffa\001\002\000" +
    "\004\070\316\001\002\000\036\010\040\014\025\015\026" +
    "\026\041\027\031\036\022\037\027\040\021\044\032\045" +
    "\034\063\035\064\036\071\uffe4\076\037\001\002\000\004" +
    "\071\320\001\002\000\006\043\ufffb\071\ufffb\001\002\000" +
    "\004\072\326\001\002\000\022\033\050\042\061\055\055" +
    "\060\063\066\057\074\053\075\052\076\064\001\002\000" +
    "\036\010\040\014\025\015\026\026\041\027\031\036\022" +
    "\037\027\040\021\044\032\045\034\063\035\064\036\071" +
    "\uffe4\076\037\001\002\000\004\071\ufff3\001\002\000\004" +
    "\072\uffd0\001\002\000\036\010\040\014\025\015\026\026" +
    "\041\027\031\036\022\037\027\040\021\044\032\045\034" +
    "\063\035\064\036\071\uffe4\076\037\001\002\000\004\071" +
    "\ufff2\001\002\000\004\072\331\001\002\000\036\010\040" +
    "\014\025\015\026\026\041\027\031\036\022\037\027\040" +
    "\021\044\032\045\034\063\035\064\036\071\uffe4\076\037" +
    "\001\002\000\004\071\uffee\001\002\000\004\072\334\001" +
    "\002\000\036\010\040\014\025\015\026\026\041\027\031" +
    "\036\022\037\027\040\021\044\032\045\034\063\035\064" +
    "\036\071\uffe4\076\037\001\002\000\004\071\uffe8\001\002" +
    "\000\010\023\143\024\140\025\141\001\002\000\004\067" +
    "\uffda\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\335\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\010\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\014\001\001\000\016\021\335\024\050\026\064" +
    "\030\061\032\057\034\055\001\001\000\002\001\001\000" +
    "\004\004\017\001\001\000\012\005\023\020\027\023\032" +
    "\044\022\001\001\000\002\001\001\000\004\007\332\001" +
    "\001\000\002\001\001\000\004\011\320\001\001\000\002" +
    "\001\001\000\004\007\273\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\012\231\013\226\036\225\001\001\000\002\001\001\000" +
    "\006\037\217\040\220\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\040\153\045\152\001" +
    "\001\000\002\001\001\000\006\007\044\035\147\001\001" +
    "\000\006\007\044\035\043\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\021\053\024\050\026\064\030\061" +
    "\032\057\034\055\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\141\001\001\000\004\024\136\001\001\000" +
    "\004\033\131\001\001\000\016\021\125\024\050\026\064" +
    "\030\061\032\057\034\055\001\001\000\004\031\116\001" +
    "\001\000\004\014\114\001\001\000\004\027\101\001\001" +
    "\000\004\024\074\001\001\000\002\001\001\000\004\025" +
    "\065\001\001\000\002\001\001\000\014\024\050\026\072" +
    "\030\061\032\057\034\055\001\001\000\014\024\050\026" +
    "\070\030\061\032\057\034\055\001\001\000\004\025\071" +
    "\001\001\000\002\001\001\000\004\025\073\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\024\050\030\111" +
    "\032\057\034\055\001\001\000\012\024\050\030\110\032" +
    "\057\034\055\001\001\000\012\024\050\030\107\032\057" +
    "\034\055\001\001\000\012\024\050\030\106\032\057\034" +
    "\055\001\001\000\002\001\001\000\012\024\050\030\105" +
    "\032\057\034\055\001\001\000\012\024\050\030\104\032" +
    "\057\034\055\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\024" +
    "\050\032\123\034\055\001\001\000\010\024\050\032\121" +
    "\034\055\001\001\000\004\031\122\001\001\000\002\001" +
    "\001\000\004\031\124\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\024\050\034\134\001" +
    "\001\000\006\024\050\034\132\001\001\000\002\001\001" +
    "\000\004\033\133\001\001\000\002\001\001\000\004\033" +
    "\135\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\005\146" +
    "\020\027\023\032\044\022\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\005\151\020\027\023\032\044\022" +
    "\001\001\000\002\001\001\000\012\005\172\020\027\023" +
    "\032\044\022\001\001\000\004\041\157\001\001\000\016" +
    "\021\155\024\050\026\064\030\061\032\057\034\055\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\046\163" +
    "\001\001\000\012\005\161\020\027\023\032\044\022\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\040\153\045\171\001\001\000" +
    "\012\005\167\020\027\023\032\044\022\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\021\210\024\050\026\064\030\061\032\057" +
    "\034\055\001\001\000\002\001\001\000\004\042\201\001" +
    "\001\000\002\001\001\000\012\005\200\020\027\023\032" +
    "\044\022\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\043\203\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\005\207\020\027\023\032\044" +
    "\022\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\005\213\020\027\023\032\044\022\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\005\216" +
    "\020\027\023\032\044\022\001\001\000\002\001\001\000" +
    "\012\005\222\020\027\023\032\044\022\001\001\000\004" +
    "\041\221\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\005\224\020\027\023\032\044\022\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\021\234\024\050\026\064\030\061\032\057\034" +
    "\055\001\001\000\002\001\001\000\004\007\236\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\021\242\022" +
    "\241\024\050\026\064\030\061\032\057\034\055\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\021\242\022" +
    "\244\024\050\026\064\030\061\032\057\034\055\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\247\001" +
    "\001\000\002\001\001\000\016\021\251\024\050\026\064" +
    "\030\061\032\057\034\055\001\001\000\002\001\001\000" +
    "\016\021\253\024\050\026\064\030\061\032\057\034\055" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\007" +
    "\044\035\262\001\001\000\006\007\044\035\257\001\001" +
    "\000\002\001\001\000\012\005\261\020\027\023\032\044" +
    "\022\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\005\264\020\027\023\032\044\022\001\001\000\002\001" +
    "\001\000\012\005\266\020\027\023\032\044\022\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\005\271\020" +
    "\027\023\032\044\022\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\005\275\020\027\023" +
    "\032\044\022\001\001\000\002\001\001\000\004\016\277" +
    "\001\001\000\002\001\001\000\004\015\304\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\016\305\001\001\000\002\001\001\000\006\017\307\044" +
    "\311\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\017\313\044\311\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\005\316\020\027\023\032" +
    "\044\022\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\021\324\024\050\026\064\030\061" +
    "\032\057\034\055\001\001\000\012\005\323\020\027\023" +
    "\032\044\022\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\005\326\020\027\023\032\044\022\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\005\331\020\027" +
    "\023\032\044\022\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\005\334\020\027\023\032\044\022\001\001" +
    "\000\002\001\001\000\004\010\336\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$generadorIntermedio$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$generadorIntermedio$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$generadorIntermedio$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public generadorIntermedio(analisis.Lexer lexer){
        super(lexer);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$generadorIntermedio$actions {
  private final generadorIntermedio parser;

  /** Constructor */
  CUP$generadorIntermedio$actions(generadorIntermedio parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$generadorIntermedio$do_action_part00000000(
    int                        CUP$generadorIntermedio$act_num,
    java_cup.runtime.lr_parser CUP$generadorIntermedio$parser,
    java.util.Stack            CUP$generadorIntermedio$stack,
    int                        CUP$generadorIntermedio$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$generadorIntermedio$result;

      /* select the action based on the action number */
      switch (CUP$generadorIntermedio$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-1)).value;
		RESULT = start_val;
              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-1)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$generadorIntermedio$parser.done_parsing();
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= INICIO IDENTIFICADOR LLAVE_ABIERTA inicio1 
            {
              Object RESULT =null;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-3)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio1 ::= COMIENZO PARENTESIS_ABIERTO tiempo_cada PARENTESIS_CERRADO inicio2 
            {
              Object RESULT =null;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("inicio1",1, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-4)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio2 ::= LLAVE_ABIERTA gramaticas LLAVE_CERRADA inicio_fin 
            {
              Object RESULT =null;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("inicio2",2, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-3)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // inicio_fin ::= LLAVE_CERRADA FIN 
            {
              Object RESULT =null;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("inicio_fin",12, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-1)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // inicio_fin ::= FUNCION funcion inicio_fin 
            {
              Object RESULT =null;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("inicio_fin",12, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-2)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // funcion ::= IDENTIFICADOR PARENTESIS_ABIERTO parametros PARENTESIS_CERRADO LLAVE_ABIERTA gramaticas LLAVE_CERRADA 
            {
              Object RESULT =null;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("funcion",11, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-6)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // parametros ::= declaracion_inicio COMA parametros 
            {
              Object RESULT =null;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("parametros",13, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-2)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // parametros ::= declaracion_inicio 
            {
              Object RESULT =null;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("parametros",13, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // parametros ::= 
            {
              Object RESULT =null;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("parametros",13, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // gramaticas ::= IDENTIFICADOR INC PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("gramaticas",3, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-3)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // gramaticas ::= IDENTIFICADOR DEC PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("gramaticas",3, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-3)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // gramaticas ::= INC IDENTIFICADOR PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("gramaticas",3, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-3)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // gramaticas ::= DEC IDENTIFICADOR PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("gramaticas",3, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-3)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // gramaticas ::= declaracion_inicio PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("gramaticas",3, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-2)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // gramaticas ::= declaracion_inicio declaracion_valor PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("gramaticas",3, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-3)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // gramaticas ::= asignacion PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("gramaticas",3, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-2)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // gramaticas ::= CONDICION condicion gramaticas 
            {
              Object RESULT =null;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("gramaticas",3, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-2)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // gramaticas ::= MIENTRAS mientras gramaticas 
            {
              Object RESULT =null;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("gramaticas",3, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-2)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // gramaticas ::= APAGAR LUCES PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("gramaticas",3, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-3)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // gramaticas ::= ENCENDER LUCES PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("gramaticas",3, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-3)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // gramaticas ::= ABRIR PUERTAS tiempo_abrir_cerrar PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("gramaticas",3, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-4)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // gramaticas ::= CERRAR PUERTAS tiempo_abrir_cerrar PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("gramaticas",3, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-4)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // gramaticas ::= ABRIR VENTANAS tiempo_abrir_cerrar PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("gramaticas",3, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-4)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // gramaticas ::= CERRAR VENTANAS tiempo_abrir_cerrar PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("gramaticas",3, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-4)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // gramaticas ::= SANITIZAR tiempo_por PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("gramaticas",3, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-3)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // gramaticas ::= DISPENSAR tiempo_por PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("gramaticas",3, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-3)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // gramaticas ::= usar PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("gramaticas",3, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-2)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // gramaticas ::= SALIR PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("gramaticas",3, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-1)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // gramaticas ::= 
            {
              Object RESULT =null;
		
              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("gramaticas",3, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // tiempo_abrir_cerrar ::= MANTENER 
            {
              Object RESULT =null;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("tiempo_abrir_cerrar",27, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // tiempo_abrir_cerrar ::= tiempo_por 
            {
              Object RESULT =null;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("tiempo_abrir_cerrar",27, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // usar ::= USAR usar_funcion 
            {
              Object RESULT =null;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("usar",17, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-1)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // usar ::= USAR admitir 
            {
              Object RESULT =null;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("usar",17, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-1)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // usar ::= USAR ventilar 
            {
              Object RESULT =null;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("usar",17, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-1)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // usar_funcion ::= IDENTIFICADOR PARENTESIS_ABIERTO parametros_llamar PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("usar_funcion",28, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-3)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // parametros_llamar ::= expresion COMA parametros_llamar 
            {
              Object RESULT =null;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("parametros_llamar",16, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-2)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // parametros_llamar ::= expresion 
            {
              Object RESULT =null;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("parametros_llamar",16, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // parametros_llamar ::= 
            {
              Object RESULT =null;
		
              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("parametros_llamar",16, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // tiempo_cada ::= CADA expresion unidad_tiempo 
            {
              Object RESULT =null;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("tiempo_cada",4, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-2)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // tiempo_por ::= POR expresion unidad_tiempo 
            {
              Object RESULT =null;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("tiempo_por",5, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-2)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // unidad_tiempo ::= SEG 
            {
              Object RESULT =null;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("unidad_tiempo",6, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // unidad_tiempo ::= MIN 
            {
              Object RESULT =null;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("unidad_tiempo",6, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // unidad_tiempo ::= HR 
            {
              Object RESULT =null;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("unidad_tiempo",6, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // estado ::= LUCES 
            {
              Object RESULT =null;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("estado",10, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // estado ::= PUERTAS 
            {
              Object RESULT =null;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("estado",10, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // estado ::= VENTANAS 
            {
              Object RESULT =null;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("estado",10, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // asignacion ::= IDENTIFICADOR ASIGNACION expresion 
            {
              Object RESULT =null;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("asignacion",14, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-2)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // declaracion_inicio ::= IDENTIFICADOR DECLARAR declaracion_tipo_dato 
            {
              String RESULT =null;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("declaracion_inicio",34, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-2)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // declaracion_valor ::= ASIGNACION expresion 
            {
              Object RESULT =null;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("declaracion_valor",7, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-1)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // declaracion_tipo_dato ::= COMO tipo_dato 
            {
              String RESULT =null;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("declaracion_tipo_dato",32, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-1)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // tipo_dato ::= ENTERO 
            {
              String RESULT =null;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("tipo_dato",33, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // tipo_dato ::= LOGICO 
            {
              String RESULT =null;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("tipo_dato",33, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expresion ::= op2 op1 
            {
              Object RESULT =null;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("expresion",15, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-1)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // op1 ::= LOGICO_AND op2 op1 
            {
              Object RESULT =null;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("op1",19, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-2)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // op1 ::= LOGICO_OR op2 op1 
            {
              Object RESULT =null;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("op1",19, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-2)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // op1 ::= 
            {
              Object RESULT =null;
		
              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("op1",19, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // op2 ::= op4 op3 
            {
              Object RESULT =null;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("op2",20, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-1)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // op3 ::= REL_MENOR op4 
            {
              Object RESULT =null;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("op3",21, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-1)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // op3 ::= REL_MAYOR op4 
            {
              Object RESULT =null;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("op3",21, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-1)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // op3 ::= REL_MENOR_IGUAL op4 
            {
              Object RESULT =null;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("op3",21, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-1)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // op3 ::= REL_MAYOR_IGUAL op4 
            {
              Object RESULT =null;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("op3",21, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-1)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // op3 ::= REL_DIFERENTE op4 
            {
              Object RESULT =null;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("op3",21, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-1)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // op3 ::= REL_IGUAL op4 
            {
              Object RESULT =null;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("op3",21, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-1)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // op3 ::= 
            {
              Object RESULT =null;
		
              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("op3",21, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // op4 ::= op6 op5 
            {
              Object RESULT =null;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("op4",22, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-1)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // op5 ::= AR_SUMA op6 op5 
            {
              Object RESULT =null;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("op5",23, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-2)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // op5 ::= AR_RESTA op6 op5 
            {
              Object RESULT =null;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("op5",23, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-2)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // op5 ::= 
            {
              Object RESULT =null;
		
              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("op5",23, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // op6 ::= op8 op7 
            {
              Object RESULT =null;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("op6",24, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-1)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // op7 ::= AR_DIVISION op8 op7 
            {
              Object RESULT =null;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("op7",25, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-2)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // op7 ::= AR_MULTIPLICACION op8 op7 
            {
              Object RESULT =null;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("op7",25, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-2)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // op7 ::= 
            {
              Object RESULT =null;
		
              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("op7",25, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // op8 ::= valores 
            {
              Object RESULT =null;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("op8",26, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // op8 ::= AR_RESTA valores 
            {
              Object RESULT =null;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("op8",26, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-1)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // op8 ::= NEGACION valores 
            {
              Object RESULT =null;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("op8",26, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-1)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // valores ::= NUMERO 
            {
              Object RESULT =null;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("valores",18, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // valores ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("valores",18, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // valores ::= OBTENER TEMPERATURA 
            {
              Object RESULT =null;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("valores",18, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-1)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // valores ::= OBTENER PERSONAS 
            {
              Object RESULT =null;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("valores",18, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-1)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // valores ::= OP_BOOLEANO 
            {
              Object RESULT =null;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("valores",18, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // valores ::= ESTADO estado 
            {
              Object RESULT =null;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("valores",18, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-1)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // valores ::= PARENTESIS_ABIERTO expresion PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("valores",18, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-2)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // condicion ::= cabecera_condicional cuerpo_estructura 
            {
              Boolean RESULT =null;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("condicion",35, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-1)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // condicion ::= cabecera_condicional cuerpo_estructura sino 
            {
              Boolean RESULT =null;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("condicion",35, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-2)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // sino ::= SINO CONDICION condicion 
            {
              Boolean RESULT =null;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("sino",36, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-2)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // sino ::= SINO LLAVE_ABIERTA gramaticas LLAVE_CERRADA 
            {
              Boolean RESULT =null;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("sino",36, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-3)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ventilar ::= VENTILAR PARENTESIS_ABIERTO tiempo_por COMA expresion COMA expresion PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("ventilar",8, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-7)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // admitir ::= ADMITIR PARENTESIS_ABIERTO expresion COMA tiempo_por PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("admitir",9, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-5)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // mientras ::= cabecera_condicional cuerpo_estructura 
            {
              Object RESULT =null;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("mientras",29, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-1)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // cabecera_condicional ::= PARENTESIS_ABIERTO expresion PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("cabecera_condicional",30, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-2)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // cuerpo_estructura ::= LLAVE_ABIERTA gramaticas LLAVE_CERRADA 
            {
              Object RESULT =null;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("cuerpo_estructura",31, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-2)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$generadorIntermedio$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$generadorIntermedio$do_action(
    int                        CUP$generadorIntermedio$act_num,
    java_cup.runtime.lr_parser CUP$generadorIntermedio$parser,
    java.util.Stack            CUP$generadorIntermedio$stack,
    int                        CUP$generadorIntermedio$top)
    throws java.lang.Exception
    {
              return CUP$generadorIntermedio$do_action_part00000000(
                               CUP$generadorIntermedio$act_num,
                               CUP$generadorIntermedio$parser,
                               CUP$generadorIntermedio$stack,
                               CUP$generadorIntermedio$top);
    }
}

}
