
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package codigo_intermedio;

import java_cup.runtime.Symbol;
import codigo.FrmPrincipal;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class generadorIntermedio extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public generadorIntermedio() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public generadorIntermedio(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public generadorIntermedio(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\216\000\002\002\004\000\002\047\002\000\002\002" +
    "\007\000\002\050\002\000\002\051\002\000\002\003\011" +
    "\000\002\004\006\000\002\011\004\000\002\011\005\000" +
    "\002\010\011\000\002\012\005\000\002\012\003\000\002" +
    "\012\002\000\002\052\002\000\002\005\007\000\002\053" +
    "\002\000\002\005\007\000\002\054\002\000\002\005\007" +
    "\000\002\055\002\000\002\005\007\000\002\056\002\000" +
    "\002\005\006\000\002\057\002\000\002\005\007\000\002" +
    "\060\002\000\002\005\006\000\002\061\002\000\002\005" +
    "\006\000\002\062\002\000\002\005\006\000\002\063\002" +
    "\000\002\005\007\000\002\064\002\000\002\005\007\000" +
    "\002\065\002\000\002\005\010\000\002\066\002\000\002" +
    "\005\010\000\002\067\002\000\002\005\010\000\002\070" +
    "\002\000\002\005\010\000\002\071\002\000\002\005\007" +
    "\000\002\072\002\000\002\005\007\000\002\005\005\000" +
    "\002\005\004\000\002\005\002\000\002\027\003\000\002" +
    "\027\003\000\002\015\004\000\002\015\004\000\002\015" +
    "\004\000\002\073\002\000\002\030\007\000\002\074\002" +
    "\000\002\014\006\000\002\014\003\000\002\014\002\000" +
    "\002\037\005\000\002\036\005\000\002\040\003\000\002" +
    "\040\003\000\002\040\003\000\002\041\003\000\002\041" +
    "\003\000\002\041\003\000\002\046\005\000\002\044\005" +
    "\000\002\045\004\000\002\043\004\000\002\042\003\000" +
    "\002\042\003\000\002\075\002\000\002\013\005\000\002" +
    "\076\002\000\002\077\002\000\002\017\007\000\002\100" +
    "\002\000\002\101\002\000\002\017\007\000\002\017\002" +
    "\000\002\102\002\000\002\020\005\000\002\103\002\000" +
    "\002\021\005\000\002\104\002\000\002\021\005\000\002" +
    "\105\002\000\002\021\005\000\002\106\002\000\002\021" +
    "\005\000\002\107\002\000\002\021\005\000\002\110\002" +
    "\000\002\021\005\000\002\021\002\000\002\111\002\000" +
    "\002\022\005\000\002\112\002\000\002\113\002\000\002" +
    "\023\007\000\002\114\002\000\002\115\002\000\002\023" +
    "\007\000\002\023\002\000\002\116\002\000\002\024\005" +
    "\000\002\117\002\000\002\120\002\000\002\025\007\000" +
    "\002\121\002\000\002\122\002\000\002\025\007\000\002" +
    "\025\002\000\002\026\003\000\002\026\004\000\002\026" +
    "\004\000\002\016\003\000\002\016\003\000\002\016\004" +
    "\000\002\016\004\000\002\016\003\000\002\016\004\000" +
    "\002\016\005\000\002\034\004\000\002\034\005\000\002" +
    "\123\002\000\002\124\002\000\002\035\007\000\002\125" +
    "\002\000\002\035\005\000\002\006\012\000\002\007\010" +
    "\000\002\031\004\000\002\126\002\000\002\032\006\000" +
    "\002\127\002\000\002\130\002\000\002\033\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u010d\000\004\016\004\001\002\000\004\076\000\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\076\010\001\002\000\004\070\011\001\002\000" +
    "\004\005\013\001\002\000\004\002\uffff\001\002\000\004" +
    "\066\ufffe\001\002\000\004\066\015\001\002\000\004\021" +
    "\016\001\002\000\022\033\052\042\063\055\057\060\066" +
    "\066\061\074\055\075\054\076\065\001\002\000\004\067" +
    "\ufffd\001\002\000\004\067\021\001\002\000\004\070\022" +
    "\001\002\000\036\010\044\014\031\015\032\026\043\027" +
    "\034\036\025\037\030\040\024\044\035\045\037\063\040" +
    "\064\041\071\uffd0\076\042\001\002\000\004\002\ufffc\001" +
    "\002\000\004\022\217\001\002\000\004\041\u0106\001\002" +
    "\000\006\065\376\072\uffec\001\002\000\004\071\353\001" +
    "\002\000\004\041\347\001\002\000\004\022\217\001\002" +
    "\000\004\072\342\001\002\000\004\072\uffe8\001\002\000" +
    "\006\030\325\031\326\001\002\000\010\012\276\013\300" +
    "\076\275\001\002\000\004\072\271\001\002\000\004\066" +
    "\uffe4\001\002\000\004\076\260\001\002\000\004\076\254" +
    "\001\002\000\012\017\236\063\235\064\237\065\234\001" +
    "\002\000\006\030\212\031\213\001\002\000\004\066\uffe6" +
    "\001\002\000\004\066\050\001\002\000\036\010\044\014" +
    "\031\015\032\026\043\027\034\036\025\037\030\040\024" +
    "\044\035\045\037\063\040\064\041\071\uffd0\076\042\001" +
    "\002\000\004\070\uff76\001\002\000\022\033\uff78\042\uff78" +
    "\055\uff78\060\uff78\066\uff78\074\uff78\075\uff78\076\uff78\001" +
    "\002\000\022\033\052\042\063\055\057\060\066\066\061" +
    "\074\055\075\054\076\065\001\002\000\006\034\171\035" +
    "\172\001\002\000\046\023\uff8c\024\uff8c\025\uff8c\046\uff8c" +
    "\047\uff8c\050\uff8c\051\uff8c\052\uff8c\053\uff8c\054\uff8c\055" +
    "\uff8c\056\uff8c\057\uff8c\061\uff8c\062\uff8c\067\uff8c\072\uff8c" +
    "\073\uff8c\001\002\000\046\023\uff85\024\uff85\025\uff85\046" +
    "\uff85\047\uff85\050\uff85\051\uff85\052\uff85\053\uff85\054\uff85" +
    "\055\uff85\056\uff85\057\uff85\061\uff85\062\uff85\067\uff85\072" +
    "\uff85\073\uff85\001\002\000\046\023\uff89\024\uff89\025\uff89" +
    "\046\uff89\047\uff89\050\uff89\051\uff89\052\uff89\053\uff89\054" +
    "\uff89\055\uff89\056\uff89\057\uff89\061\uff89\062\uff89\067\uff89" +
    "\072\uff89\073\uff89\001\002\000\004\067\170\001\002\000" +
    "\016\033\052\042\063\066\061\074\055\075\054\076\065" +
    "\001\002\000\046\023\uff95\024\uff95\025\uff95\046\uff95\047" +
    "\uff95\050\uff95\051\uff95\052\uff95\053\uff95\054\uff95\055\uff95" +
    "\056\uff95\057\uff95\061\uff95\062\uff95\067\uff95\072\uff95\073" +
    "\uff95\001\002\000\022\033\052\042\063\055\057\060\066" +
    "\066\061\074\055\075\054\076\065\001\002\000\042\023" +
    "\uff9e\024\uff9e\025\uff9e\046\uff9e\047\uff9e\050\uff9e\051\uff9e" +
    "\052\uff9e\053\uff9e\054\uff9e\055\uff9e\061\uff9e\062\uff9e\067" +
    "\uff9e\072\uff9e\073\uff9e\001\002\000\010\030\131\031\134" +
    "\041\132\001\002\000\036\023\uffad\024\uffad\025\uffad\046" +
    "\uffad\047\uffad\050\uffad\051\uffad\052\uffad\053\uffad\061\uffad" +
    "\062\uffad\067\uffad\072\uffad\073\uffad\001\002\000\046\023" +
    "\uff88\024\uff88\025\uff88\046\uff88\047\uff88\050\uff88\051\uff88" +
    "\052\uff88\053\uff88\054\uff88\055\uff88\056\uff88\057\uff88\061" +
    "\uff88\062\uff88\067\uff88\072\uff88\073\uff88\001\002\000\016" +
    "\033\052\042\063\066\061\074\055\075\054\076\065\001" +
    "\002\000\022\023\uffb6\024\uffb6\025\uffb6\061\uffb6\062\uffb6" +
    "\067\uffb6\072\uffb6\073\uffb6\001\002\000\022\023\uffae\024" +
    "\uffae\025\uffae\061\072\062\073\067\uffae\072\uffae\073\uffae" +
    "\001\002\000\016\023\uffb5\024\uffb5\025\uffb5\067\uffb5\072" +
    "\uffb5\073\uffb5\001\002\000\022\033\uffb4\042\uffb4\055\uffb4" +
    "\060\uffb4\066\uffb4\074\uffb4\075\uffb4\076\uffb4\001\002\000" +
    "\022\033\uffb1\042\uffb1\055\uffb1\060\uffb1\066\uffb1\074\uffb1" +
    "\075\uffb1\076\uffb1\001\002\000\022\033\052\042\063\055" +
    "\057\060\066\066\061\074\055\075\054\076\065\001\002" +
    "\000\022\023\uffb0\024\uffb0\025\uffb0\061\uffb0\062\uffb0\067" +
    "\uffb0\072\uffb0\073\uffb0\001\002\000\022\023\uffae\024\uffae" +
    "\025\uffae\061\072\062\073\067\uffae\072\uffae\073\uffae\001" +
    "\002\000\016\023\uffaf\024\uffaf\025\uffaf\067\uffaf\072\uffaf" +
    "\073\uffaf\001\002\000\022\033\052\042\063\055\057\060" +
    "\066\066\061\074\055\075\054\076\065\001\002\000\022" +
    "\023\uffb3\024\uffb3\025\uffb3\061\uffb3\062\uffb3\067\uffb3\072" +
    "\uffb3\073\uffb3\001\002\000\022\023\uffae\024\uffae\025\uffae" +
    "\061\072\062\073\067\uffae\072\uffae\073\uffae\001\002\000" +
    "\016\023\uffb2\024\uffb2\025\uffb2\067\uffb2\072\uffb2\073\uffb2" +
    "\001\002\000\046\023\uff8a\024\uff8a\025\uff8a\046\uff8a\047" +
    "\uff8a\050\uff8a\051\uff8a\052\uff8a\053\uff8a\054\uff8a\055\uff8a" +
    "\056\uff8a\057\uff8a\061\uff8a\062\uff8a\067\uff8a\072\uff8a\073" +
    "\uff8a\001\002\000\036\023\uff9f\024\uff9f\025\uff9f\046\110" +
    "\047\112\050\106\051\107\052\113\053\114\061\uff9f\062" +
    "\uff9f\067\uff9f\072\uff9f\073\uff9f\001\002\000\022\033\uffa7" +
    "\042\uffa7\055\uffa7\060\uffa7\066\uffa7\074\uffa7\075\uffa7\076" +
    "\uffa7\001\002\000\022\033\uffa5\042\uffa5\055\uffa5\060\uffa5" +
    "\066\uffa5\074\uffa5\075\uffa5\076\uffa5\001\002\000\022\033" +
    "\uffab\042\uffab\055\uffab\060\uffab\066\uffab\074\uffab\075\uffab" +
    "\076\uffab\001\002\000\022\023\uffac\024\uffac\025\uffac\061" +
    "\uffac\062\uffac\067\uffac\072\uffac\073\uffac\001\002\000\022" +
    "\033\uffa9\042\uffa9\055\uffa9\060\uffa9\066\uffa9\074\uffa9\075" +
    "\uffa9\076\uffa9\001\002\000\022\033\uffa3\042\uffa3\055\uffa3" +
    "\060\uffa3\066\uffa3\074\uffa3\075\uffa3\076\uffa3\001\002\000" +
    "\022\033\uffa1\042\uffa1\055\uffa1\060\uffa1\066\uffa1\074\uffa1" +
    "\075\uffa1\076\uffa1\001\002\000\022\033\052\042\063\055" +
    "\057\060\066\066\061\074\055\075\054\076\065\001\002" +
    "\000\022\023\uffa0\024\uffa0\025\uffa0\061\uffa0\062\uffa0\067" +
    "\uffa0\072\uffa0\073\uffa0\001\002\000\022\033\052\042\063" +
    "\055\057\060\066\066\061\074\055\075\054\076\065\001" +
    "\002\000\022\023\uffa2\024\uffa2\025\uffa2\061\uffa2\062\uffa2" +
    "\067\uffa2\072\uffa2\073\uffa2\001\002\000\022\033\052\042" +
    "\063\055\057\060\066\066\061\074\055\075\054\076\065" +
    "\001\002\000\022\023\uffa8\024\uffa8\025\uffa8\061\uffa8\062" +
    "\uffa8\067\uffa8\072\uffa8\073\uffa8\001\002\000\022\033\052" +
    "\042\063\055\057\060\066\066\061\074\055\075\054\076" +
    "\065\001\002\000\022\023\uffaa\024\uffaa\025\uffaa\061\uffaa" +
    "\062\uffaa\067\uffaa\072\uffaa\073\uffaa\001\002\000\022\033" +
    "\052\042\063\055\057\060\066\066\061\074\055\075\054" +
    "\076\065\001\002\000\022\023\uffa4\024\uffa4\025\uffa4\061" +
    "\uffa4\062\uffa4\067\uffa4\072\uffa4\073\uffa4\001\002\000\022" +
    "\033\052\042\063\055\057\060\066\066\061\074\055\075" +
    "\054\076\065\001\002\000\022\023\uffa6\024\uffa6\025\uffa6" +
    "\061\uffa6\062\uffa6\067\uffa6\072\uffa6\073\uffa6\001\002\000" +
    "\046\023\uffbd\024\uffbd\025\uffbd\046\uffbd\047\uffbd\050\uffbd" +
    "\051\uffbd\052\uffbd\053\uffbd\054\uffbd\055\uffbd\056\uffbd\057" +
    "\uffbd\061\uffbd\062\uffbd\067\uffbd\072\uffbd\073\uffbd\001\002" +
    "\000\046\023\uffbf\024\uffbf\025\uffbf\046\uffbf\047\uffbf\050" +
    "\uffbf\051\uffbf\052\uffbf\053\uffbf\054\uffbf\055\uffbf\056\uffbf" +
    "\057\uffbf\061\uffbf\062\uffbf\067\uffbf\072\uffbf\073\uffbf\001" +
    "\002\000\046\023\uff84\024\uff84\025\uff84\046\uff84\047\uff84" +
    "\050\uff84\051\uff84\052\uff84\053\uff84\054\uff84\055\uff84\056" +
    "\uff84\057\uff84\061\uff84\062\uff84\067\uff84\072\uff84\073\uff84" +
    "\001\002\000\046\023\uffbe\024\uffbe\025\uffbe\046\uffbe\047" +
    "\uffbe\050\uffbe\051\uffbe\052\uffbe\053\uffbe\054\uffbe\055\uffbe" +
    "\056\uffbe\057\uffbe\061\uffbe\062\uffbe\067\uffbe\072\uffbe\073" +
    "\uffbe\001\002\000\042\023\uff96\024\uff96\025\uff96\046\uff96" +
    "\047\uff96\050\uff96\051\uff96\052\uff96\053\uff96\054\140\055" +
    "\137\061\uff96\062\uff96\067\uff96\072\uff96\073\uff96\001\002" +
    "\000\036\023\uff9d\024\uff9d\025\uff9d\046\uff9d\047\uff9d\050" +
    "\uff9d\051\uff9d\052\uff9d\053\uff9d\061\uff9d\062\uff9d\067\uff9d" +
    "\072\uff9d\073\uff9d\001\002\000\022\033\uff99\042\uff99\055" +
    "\uff99\060\uff99\066\uff99\074\uff99\075\uff99\076\uff99\001\002" +
    "\000\022\033\uff9c\042\uff9c\055\uff9c\060\uff9c\066\uff9c\074" +
    "\uff9c\075\uff9c\076\uff9c\001\002\000\022\033\052\042\063" +
    "\055\057\060\066\066\061\074\055\075\054\076\065\001" +
    "\002\000\042\023\uff9b\024\uff9b\025\uff9b\046\uff9b\047\uff9b" +
    "\050\uff9b\051\uff9b\052\uff9b\053\uff9b\054\uff9b\055\uff9b\061" +
    "\uff9b\062\uff9b\067\uff9b\072\uff9b\073\uff9b\001\002\000\042" +
    "\023\uff96\024\uff96\025\uff96\046\uff96\047\uff96\050\uff96\051" +
    "\uff96\052\uff96\053\uff96\054\140\055\137\061\uff96\062\uff96" +
    "\067\uff96\072\uff96\073\uff96\001\002\000\036\023\uff9a\024" +
    "\uff9a\025\uff9a\046\uff9a\047\uff9a\050\uff9a\051\uff9a\052\uff9a" +
    "\053\uff9a\061\uff9a\062\uff9a\067\uff9a\072\uff9a\073\uff9a\001" +
    "\002\000\022\033\052\042\063\055\057\060\066\066\061" +
    "\074\055\075\054\076\065\001\002\000\042\023\uff98\024" +
    "\uff98\025\uff98\046\uff98\047\uff98\050\uff98\051\uff98\052\uff98" +
    "\053\uff98\054\uff98\055\uff98\061\uff98\062\uff98\067\uff98\072" +
    "\uff98\073\uff98\001\002\000\042\023\uff96\024\uff96\025\uff96" +
    "\046\uff96\047\uff96\050\uff96\051\uff96\052\uff96\053\uff96\054" +
    "\140\055\137\061\uff96\062\uff96\067\uff96\072\uff96\073\uff96" +
    "\001\002\000\036\023\uff97\024\uff97\025\uff97\046\uff97\047" +
    "\uff97\050\uff97\051\uff97\052\uff97\053\uff97\061\uff97\062\uff97" +
    "\067\uff97\072\uff97\073\uff97\001\002\000\004\067\152\001" +
    "\002\000\046\023\uff83\024\uff83\025\uff83\046\uff83\047\uff83" +
    "\050\uff83\051\uff83\052\uff83\053\uff83\054\uff83\055\uff83\056" +
    "\uff83\057\uff83\061\uff83\062\uff83\067\uff83\072\uff83\073\uff83" +
    "\001\002\000\046\023\uff8d\024\uff8d\025\uff8d\046\uff8d\047" +
    "\uff8d\050\uff8d\051\uff8d\052\uff8d\053\uff8d\054\uff8d\055\uff8d" +
    "\056\155\057\154\061\uff8d\062\uff8d\067\uff8d\072\uff8d\073" +
    "\uff8d\001\002\000\022\033\uff93\042\uff93\055\uff93\060\uff93" +
    "\066\uff93\074\uff93\075\uff93\076\uff93\001\002\000\022\033" +
    "\uff90\042\uff90\055\uff90\060\uff90\066\uff90\074\uff90\075\uff90" +
    "\076\uff90\001\002\000\042\023\uff94\024\uff94\025\uff94\046" +
    "\uff94\047\uff94\050\uff94\051\uff94\052\uff94\053\uff94\054\uff94" +
    "\055\uff94\061\uff94\062\uff94\067\uff94\072\uff94\073\uff94\001" +
    "\002\000\022\033\052\042\063\055\057\060\066\066\061" +
    "\074\055\075\054\076\065\001\002\000\046\023\uff8f\024" +
    "\uff8f\025\uff8f\046\uff8f\047\uff8f\050\uff8f\051\uff8f\052\uff8f" +
    "\053\uff8f\054\uff8f\055\uff8f\056\uff8f\057\uff8f\061\uff8f\062" +
    "\uff8f\067\uff8f\072\uff8f\073\uff8f\001\002\000\046\023\uff8d" +
    "\024\uff8d\025\uff8d\046\uff8d\047\uff8d\050\uff8d\051\uff8d\052" +
    "\uff8d\053\uff8d\054\uff8d\055\uff8d\056\155\057\154\061\uff8d" +
    "\062\uff8d\067\uff8d\072\uff8d\073\uff8d\001\002\000\042\023" +
    "\uff8e\024\uff8e\025\uff8e\046\uff8e\047\uff8e\050\uff8e\051\uff8e" +
    "\052\uff8e\053\uff8e\054\uff8e\055\uff8e\061\uff8e\062\uff8e\067" +
    "\uff8e\072\uff8e\073\uff8e\001\002\000\022\033\052\042\063" +
    "\055\057\060\066\066\061\074\055\075\054\076\065\001" +
    "\002\000\046\023\uff92\024\uff92\025\uff92\046\uff92\047\uff92" +
    "\050\uff92\051\uff92\052\uff92\053\uff92\054\uff92\055\uff92\056" +
    "\uff92\057\uff92\061\uff92\062\uff92\067\uff92\072\uff92\073\uff92" +
    "\001\002\000\046\023\uff8d\024\uff8d\025\uff8d\046\uff8d\047" +
    "\uff8d\050\uff8d\051\uff8d\052\uff8d\053\uff8d\054\uff8d\055\uff8d" +
    "\056\155\057\154\061\uff8d\062\uff8d\067\uff8d\072\uff8d\073" +
    "\uff8d\001\002\000\042\023\uff91\024\uff91\025\uff91\046\uff91" +
    "\047\uff91\050\uff91\051\uff91\052\uff91\053\uff91\054\uff91\055" +
    "\uff91\061\uff91\062\uff91\067\uff91\072\uff91\073\uff91\001\002" +
    "\000\046\023\uff8b\024\uff8b\025\uff8b\046\uff8b\047\uff8b\050" +
    "\uff8b\051\uff8b\052\uff8b\053\uff8b\054\uff8b\055\uff8b\056\uff8b" +
    "\057\uff8b\061\uff8b\062\uff8b\067\uff8b\072\uff8b\073\uff8b\001" +
    "\002\000\004\070\uff77\001\002\000\046\023\uff87\024\uff87" +
    "\025\uff87\046\uff87\047\uff87\050\uff87\051\uff87\052\uff87\053" +
    "\uff87\054\uff87\055\uff87\056\uff87\057\uff87\061\uff87\062\uff87" +
    "\067\uff87\072\uff87\073\uff87\001\002\000\046\023\uff86\024" +
    "\uff86\025\uff86\046\uff86\047\uff86\050\uff86\051\uff86\052\uff86" +
    "\053\uff86\054\uff86\055\uff86\056\uff86\057\uff86\061\uff86\062" +
    "\uff86\067\uff86\072\uff86\073\uff86\001\002\000\040\010\uff82" +
    "\011\202\014\uff82\015\uff82\026\uff82\027\uff82\036\uff82\037" +
    "\uff82\040\uff82\044\uff82\045\uff82\063\uff82\064\uff82\071\uff82" +
    "\076\uff82\001\002\000\004\070\175\001\002\000\036\010" +
    "\044\014\031\015\032\026\043\027\034\036\025\037\030" +
    "\040\024\044\035\045\037\063\040\064\041\071\uffd0\076" +
    "\042\001\002\000\004\071\uff75\001\002\000\004\071\200" +
    "\001\002\000\040\010\uff74\011\uff74\014\uff74\015\uff74\026" +
    "\uff74\027\uff74\036\uff74\037\uff74\040\uff74\044\uff74\045\uff74" +
    "\063\uff74\064\uff74\071\uff74\076\uff74\001\002\000\036\010" +
    "\uff81\014\uff81\015\uff81\026\uff81\027\uff81\036\uff81\037\uff81" +
    "\040\uff81\044\uff81\045\uff81\063\uff81\064\uff81\071\uff81\076" +
    "\uff81\001\002\000\006\010\uff80\070\uff7d\001\002\000\004" +
    "\070\uff76\001\002\000\004\010\205\001\002\000\004\066" +
    "\uff7f\001\002\000\004\066\050\001\002\000\036\010\uff7e" +
    "\014\uff7e\015\uff7e\026\uff7e\027\uff7e\036\uff7e\037\uff7e\040" +
    "\uff7e\044\uff7e\045\uff7e\063\uff7e\064\uff7e\071\uff7e\076\uff7e" +
    "\001\002\000\036\010\uff7c\014\uff7c\015\uff7c\026\uff7c\027" +
    "\uff7c\036\uff7c\037\uff7c\040\uff7c\044\uff7c\045\uff7c\063\uff7c" +
    "\064\uff7c\071\uff7c\076\uff7c\001\002\000\004\071\uffe5\001" +
    "\002\000\006\022\217\032\216\001\002\000\006\022\217" +
    "\032\216\001\002\000\004\072\uffde\001\002\000\004\072" +
    "\uffce\001\002\000\004\072\uffcf\001\002\000\022\033\052" +
    "\042\063\055\057\060\066\066\061\074\055\075\054\076" +
    "\065\001\002\000\010\023\224\024\221\025\222\001\002" +
    "\000\010\067\uffc1\072\uffc1\073\uffc1\001\002\000\010\067" +
    "\uffc0\072\uffc0\073\uffc0\001\002\000\010\067\uffc3\072\uffc3" +
    "\073\uffc3\001\002\000\010\067\uffc2\072\uffc2\073\uffc2\001" +
    "\002\000\004\072\226\001\002\000\036\010\044\014\031" +
    "\015\032\026\043\027\034\036\025\037\030\040\024\044" +
    "\035\045\037\063\040\064\041\071\uffd0\076\042\001\002" +
    "\000\004\071\uffdd\001\002\000\004\072\uffda\001\002\000" +
    "\004\072\232\001\002\000\036\010\044\014\031\015\032" +
    "\026\043\027\034\036\025\037\030\040\024\044\035\045" +
    "\037\063\040\064\041\071\uffd0\076\042\001\002\000\004" +
    "\071\uffd9\001\002\000\022\033\052\042\063\055\057\060" +
    "\066\066\061\074\055\075\054\076\065\001\002\000\004" +
    "\072\250\001\002\000\004\020\244\001\002\000\004\072" +
    "\240\001\002\000\036\010\ufff2\014\ufff2\015\ufff2\026\ufff2" +
    "\027\ufff2\036\ufff2\037\ufff2\040\ufff2\044\ufff2\045\ufff2\063" +
    "\ufff2\064\ufff2\071\ufff2\076\ufff2\001\002\000\036\010\044" +
    "\014\031\015\032\026\043\027\034\036\025\037\030\040" +
    "\024\044\035\045\037\063\040\064\041\071\uffd0\076\042" +
    "\001\002\000\004\071\ufff1\001\002\000\012\065\uffbb\067" +
    "\uffbb\072\uffbb\073\uffbb\001\002\000\006\006\247\007\246" +
    "\001\002\000\012\065\uffb9\067\uffb9\072\uffb9\073\uffb9\001" +
    "\002\000\012\065\uffb7\067\uffb7\072\uffb7\073\uffb7\001\002" +
    "\000\012\065\uffb8\067\uffb8\072\uffb8\073\uffb8\001\002\000" +
    "\036\010\ufff4\014\ufff4\015\ufff4\026\ufff4\027\ufff4\036\ufff4" +
    "\037\ufff4\040\ufff4\044\ufff4\045\ufff4\063\ufff4\064\ufff4\071" +
    "\ufff4\076\ufff4\001\002\000\036\010\044\014\031\015\032" +
    "\026\043\027\034\036\025\037\030\040\024\044\035\045" +
    "\037\063\040\064\041\071\uffd0\076\042\001\002\000\004" +
    "\071\ufff3\001\002\000\004\072\uffbc\001\002\000\004\072" +
    "\255\001\002\000\036\010\uffee\014\uffee\015\uffee\026\uffee" +
    "\027\uffee\036\uffee\037\uffee\040\uffee\044\uffee\045\uffee\063" +
    "\uffee\064\uffee\071\uffee\076\uffee\001\002\000\036\010\044" +
    "\014\031\015\032\026\043\027\034\036\025\037\030\040" +
    "\024\044\035\045\037\063\040\064\041\071\uffd0\076\042" +
    "\001\002\000\004\071\uffed\001\002\000\004\072\261\001" +
    "\002\000\036\010\ufff0\014\ufff0\015\ufff0\026\ufff0\027\ufff0" +
    "\036\ufff0\037\ufff0\040\ufff0\044\ufff0\045\ufff0\063\ufff0\064" +
    "\ufff0\071\ufff0\076\ufff0\001\002\000\036\010\044\014\031" +
    "\015\032\026\043\027\034\036\025\037\030\040\024\044" +
    "\035\045\037\063\040\064\041\071\uffd0\076\042\001\002" +
    "\000\004\071\uffef\001\002\000\004\066\050\001\002\000" +
    "\036\010\044\014\031\015\032\026\043\027\034\036\025" +
    "\037\030\040\024\044\035\045\037\063\040\064\041\071" +
    "\uffd0\076\042\001\002\000\004\070\uff76\001\002\000\036" +
    "\010\uff79\014\uff79\015\uff79\026\uff79\027\uff79\036\uff79\037" +
    "\uff79\040\uff79\044\uff79\045\uff79\063\uff79\064\uff79\071\uff79" +
    "\076\uff79\001\002\000\004\071\uffe3\001\002\000\036\010" +
    "\044\014\031\015\032\026\043\027\034\036\025\037\030" +
    "\040\024\044\035\045\037\063\040\064\041\071\uffd0\076" +
    "\042\001\002\000\004\071\uffd2\001\002\000\004\072\uffcd" +
    "\001\002\000\004\072\uffcc\001\002\000\004\066\uffca\001" +
    "\002\000\004\066\306\001\002\000\004\072\uffcb\001\002" +
    "\000\004\066\301\001\002\000\022\033\052\042\063\055" +
    "\057\060\066\066\061\074\055\075\054\076\065\001\002" +
    "\000\004\073\303\001\002\000\004\022\217\001\002\000" +
    "\004\067\305\001\002\000\004\072\uff7a\001\002\000\004" +
    "\022\217\001\002\000\004\073\310\001\002\000\022\033" +
    "\052\042\063\055\057\060\066\066\061\074\055\075\054" +
    "\076\065\001\002\000\004\073\312\001\002\000\022\033" +
    "\052\042\063\055\057\060\066\066\061\074\055\075\054" +
    "\076\065\001\002\000\004\067\314\001\002\000\004\072" +
    "\uff7b\001\002\000\004\066\316\001\002\000\024\033\052" +
    "\042\063\055\057\060\066\066\061\067\uffc5\074\055\075" +
    "\054\076\065\001\002\000\004\067\324\001\002\000\006" +
    "\067\uffc6\073\uffc8\001\002\000\004\073\322\001\002\000" +
    "\024\033\052\042\063\055\057\060\066\066\061\067\uffc5" +
    "\074\055\075\054\076\065\001\002\000\004\067\uffc7\001" +
    "\002\000\004\072\uffc9\001\002\000\006\022\217\032\216" +
    "\001\002\000\006\022\217\032\216\001\002\000\004\072" +
    "\uffdc\001\002\000\004\072\331\001\002\000\036\010\044" +
    "\014\031\015\032\026\043\027\034\036\025\037\030\040" +
    "\024\044\035\045\037\063\040\064\041\071\uffd0\076\042" +
    "\001\002\000\004\071\uffdb\001\002\000\004\072\uffd8\001" +
    "\002\000\004\072\335\001\002\000\036\010\044\014\031" +
    "\015\032\026\043\027\034\036\025\037\030\040\024\044" +
    "\035\045\037\063\040\064\041\071\uffd0\076\042\001\002" +
    "\000\004\071\uffd7\001\002\000\004\072\340\001\002\000" +
    "\036\010\044\014\031\015\032\026\043\027\034\036\025" +
    "\037\030\040\024\044\035\045\037\063\040\064\041\071" +
    "\uffd0\076\042\001\002\000\004\071\uffe7\001\002\000\004" +
    "\071\uffd1\001\002\000\004\072\344\001\002\000\036\010" +
    "\uffd4\014\uffd4\015\uffd4\026\uffd4\027\uffd4\036\uffd4\037\uffd4" +
    "\040\uffd4\044\uffd4\045\uffd4\063\uffd4\064\uffd4\071\uffd4\076" +
    "\uffd4\001\002\000\036\010\044\014\031\015\032\026\043" +
    "\027\034\036\025\037\030\040\024\044\035\045\037\063" +
    "\040\064\041\071\uffd0\076\042\001\002\000\004\071\uffd3" +
    "\001\002\000\004\072\350\001\002\000\036\010\uffe0\014" +
    "\uffe0\015\uffe0\026\uffe0\027\uffe0\036\uffe0\037\uffe0\040\uffe0" +
    "\044\uffe0\045\uffe0\063\uffe0\064\uffe0\071\uffe0\076\uffe0\001" +
    "\002\000\036\010\044\014\031\015\032\026\043\027\034" +
    "\036\025\037\030\040\024\044\035\045\037\063\040\064" +
    "\041\071\uffd0\076\042\001\002\000\004\071\uffdf\001\002" +
    "\000\006\043\355\071\356\001\002\000\004\002\ufffb\001" +
    "\002\000\004\076\360\001\002\000\004\004\357\001\002" +
    "\000\004\002\ufffa\001\002\000\004\066\363\001\002\000" +
    "\006\043\355\071\356\001\002\000\004\002\ufff9\001\002" +
    "\000\006\067\ufff5\076\365\001\002\000\004\067\371\001" +
    "\002\000\004\017\236\001\002\000\006\067\ufff6\073\367" +
    "\001\002\000\006\067\ufff5\076\365\001\002\000\004\067" +
    "\ufff7\001\002\000\004\070\372\001\002\000\036\010\044" +
    "\014\031\015\032\026\043\027\034\036\025\037\030\040" +
    "\024\044\035\045\037\063\040\064\041\071\uffd0\076\042" +
    "\001\002\000\004\071\374\001\002\000\006\043\ufff8\071" +
    "\ufff8\001\002\000\004\072\uffea\001\002\000\022\033\052" +
    "\042\063\055\057\060\066\066\061\074\055\075\054\076" +
    "\065\001\002\000\004\072\u0100\001\002\000\036\010\044" +
    "\014\031\015\032\026\043\027\034\036\025\037\030\040" +
    "\024\044\035\045\037\063\040\064\041\071\uffd0\076\042" +
    "\001\002\000\004\071\uffeb\001\002\000\004\072\uffba\001" +
    "\002\000\004\072\u0104\001\002\000\036\010\044\014\031" +
    "\015\032\026\043\027\034\036\025\037\030\040\024\044" +
    "\035\045\037\063\040\064\041\071\uffd0\076\042\001\002" +
    "\000\004\071\uffe9\001\002\000\004\072\u0107\001\002\000" +
    "\036\010\uffe2\014\uffe2\015\uffe2\026\uffe2\027\uffe2\036\uffe2" +
    "\037\uffe2\040\uffe2\044\uffe2\045\uffe2\063\uffe2\064\uffe2\071" +
    "\uffe2\076\uffe2\001\002\000\036\010\044\014\031\015\032" +
    "\026\043\027\034\036\025\037\030\040\024\044\035\045" +
    "\037\063\040\064\041\071\uffd0\076\042\001\002\000\004" +
    "\071\uffe1\001\002\000\004\072\u010b\001\002\000\036\010" +
    "\uffd6\014\uffd6\015\uffd6\026\uffd6\027\uffd6\036\uffd6\037\uffd6" +
    "\040\uffd6\044\uffd6\045\uffd6\063\uffd6\064\uffd6\071\uffd6\076" +
    "\uffd6\001\002\000\036\010\044\014\031\015\032\026\043" +
    "\027\034\036\025\037\030\040\024\044\035\045\037\063" +
    "\040\064\041\071\uffd0\076\042\001\002\000\004\071\uffd5" +
    "\001\002\000\010\023\224\024\221\025\222\001\002\000" +
    "\004\067\uffc4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u010d\000\004\002\004\001\001\000\004\047\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\011\001\001\000\002\001" +
    "\001\000\004\050\013\001\001\000\002\001\001\000\004" +
    "\037\016\001\001\000\016\013\u010d\016\052\020\066\022" +
    "\063\024\061\026\057\001\001\000\004\051\017\001\001" +
    "\000\002\001\001\000\004\004\022\001\001\000\012\005" +
    "\026\015\035\044\025\046\032\001\001\000\002\001\001" +
    "\000\004\036\u0109\001\001\000\002\001\001\000\006\045" +
    "\374\056\376\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\036\342\001\001\000\002\001\001\000\004\060" +
    "\336\001\001\000\002\001\001\000\010\006\276\007\273" +
    "\030\272\001\001\000\002\001\001\000\004\062\263\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\061\044\001\001\000\006\032" +
    "\046\034\045\001\001\000\012\005\210\015\035\044\025" +
    "\046\032\001\001\000\006\033\172\127\173\001\001\000" +
    "\004\126\050\001\001\000\016\013\055\016\052\020\066" +
    "\022\063\024\061\026\057\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\016\166\001\001\000\004\116\152\001" +
    "\001\000\016\013\150\016\052\020\066\022\063\024\061" +
    "\026\057\001\001\000\004\111\134\001\001\000\004\041" +
    "\132\001\001\000\004\102\104\001\001\000\002\001\001" +
    "\000\004\016\103\001\001\000\004\075\067\001\001\000" +
    "\004\017\070\001\001\000\002\001\001\000\004\076\077" +
    "\001\001\000\004\100\073\001\001\000\014\016\052\020" +
    "\074\022\063\024\061\026\057\001\001\000\004\101\075" +
    "\001\001\000\004\017\076\001\001\000\002\001\001\000" +
    "\014\016\052\020\100\022\063\024\061\026\057\001\001" +
    "\000\004\077\101\001\001\000\004\017\102\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\110\001\001" +
    "\000\004\105\126\001\001\000\004\106\124\001\001\000" +
    "\004\103\122\001\001\000\002\001\001\000\004\104\120" +
    "\001\001\000\004\107\116\001\001\000\004\110\114\001" +
    "\001\000\012\016\052\022\115\024\061\026\057\001\001" +
    "\000\002\001\001\000\012\016\052\022\117\024\061\026" +
    "\057\001\001\000\002\001\001\000\012\016\052\022\121" +
    "\024\061\026\057\001\001\000\002\001\001\000\012\016" +
    "\052\022\123\024\061\026\057\001\001\000\002\001\001" +
    "\000\012\016\052\022\125\024\061\026\057\001\001\000" +
    "\002\001\001\000\012\016\052\022\127\024\061\026\057" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\023\135" +
    "\001\001\000\002\001\001\000\004\114\144\001\001\000" +
    "\004\112\140\001\001\000\010\016\052\024\141\026\057" +
    "\001\001\000\004\113\142\001\001\000\004\023\143\001" +
    "\001\000\002\001\001\000\010\016\052\024\145\026\057" +
    "\001\001\000\004\115\146\001\001\000\004\023\147\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\025\155\001\001\000\004\117\162\001\001\000" +
    "\004\121\156\001\001\000\002\001\001\000\006\016\052" +
    "\026\157\001\001\000\004\122\160\001\001\000\004\025" +
    "\161\001\001\000\002\001\001\000\006\016\052\026\163" +
    "\001\001\000\004\120\164\001\001\000\004\025\165\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\035\200\001" +
    "\001\000\002\001\001\000\012\005\175\015\035\044\025" +
    "\046\032\001\001\000\004\130\176\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\123\203" +
    "\125\202\001\001\000\006\033\207\127\173\001\001\000" +
    "\002\001\001\000\004\124\205\001\001\000\006\032\046" +
    "\034\206\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\027\227\036\214\001\001\000\006" +
    "\027\213\036\214\001\001\000\004\065\224\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\013\217\016\052" +
    "\020\066\022\063\024\061\026\057\001\001\000\004\040" +
    "\222\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\005" +
    "\226\015\035\044\025\046\032\001\001\000\002\001\001" +
    "\000\004\067\230\001\001\000\002\001\001\000\012\005" +
    "\232\015\035\044\025\046\032\001\001\000\002\001\001" +
    "\000\016\013\252\016\052\020\066\022\063\024\061\026" +
    "\057\001\001\000\002\001\001\000\004\043\242\001\001" +
    "\000\002\001\001\000\004\053\240\001\001\000\012\005" +
    "\241\015\035\044\025\046\032\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\042\244\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\052\250" +
    "\001\001\000\012\005\251\015\035\044\025\046\032\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\055\255\001\001\000\012\005\256\015\035\044" +
    "\025\046\032\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\054\261\001\001\000\012\005\262\015\035\044" +
    "\025\046\032\001\001\000\002\001\001\000\006\031\264" +
    "\032\265\001\001\000\012\005\267\015\035\044\025\046" +
    "\032\001\001\000\006\033\266\127\173\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\005\271\015\035\044" +
    "\025\046\032\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\073\314\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\013\301" +
    "\016\052\020\066\022\063\024\061\026\057\001\001\000" +
    "\002\001\001\000\004\036\303\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\036\306\001\001\000\002\001" +
    "\001\000\016\013\310\016\052\020\066\022\063\024\061" +
    "\026\057\001\001\000\002\001\001\000\016\013\312\016" +
    "\052\020\066\022\063\024\061\026\057\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\013" +
    "\317\014\316\016\052\020\066\022\063\024\061\026\057" +
    "\001\001\000\002\001\001\000\004\074\320\001\001\000" +
    "\002\001\001\000\020\013\317\014\322\016\052\020\066" +
    "\022\063\024\061\026\057\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\027\332\036\214\001\001\000\006" +
    "\027\326\036\214\001\001\000\004\066\327\001\001\000" +
    "\002\001\001\000\012\005\331\015\035\044\025\046\032" +
    "\001\001\000\002\001\001\000\004\070\333\001\001\000" +
    "\002\001\001\000\012\005\335\015\035\044\025\046\032" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\005" +
    "\340\015\035\044\025\046\032\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\072\344\001" +
    "\001\000\012\005\345\015\035\044\025\046\032\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\064\350\001" +
    "\001\000\012\005\351\015\035\044\025\046\032\001\001" +
    "\000\002\001\001\000\004\011\353\001\001\000\002\001" +
    "\001\000\004\010\360\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\361\001\001\000" +
    "\002\001\001\000\006\012\363\044\365\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\012" +
    "\367\044\365\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\005\372\015\035\044\025\046\032\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\057\u0102\001\001" +
    "\000\016\013\u0101\016\052\020\066\022\063\024\061\026" +
    "\057\001\001\000\002\001\001\000\012\005\u0100\015\035" +
    "\044\025\046\032\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\005\u0104\015\035\044\025" +
    "\046\032\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\063\u0107\001\001\000\012\005\u0108\015\035\044\025" +
    "\046\032\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\071\u010b\001\001\000\012\005\u010c\015\035\044\025" +
    "\046\032\001\001\000\002\001\001\000\004\040\u010e\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$generadorIntermedio$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$generadorIntermedio$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$generadorIntermedio$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public BloquePrograma programa;
    private BloqueTripletas bloqueActual, bloqueAux;
    private ArrayList<Tripleta> expresion;
    private ArrayList<Integer> anidamientos = new ArrayList<>();
    private Tripleta actual;
    private Object aux1, aux2, aux3, aux4, valorActual;
    private String ambito = "";
    private int anidamiento = 0;
    public TablaSimbolos tabla = new TablaSimbolos();

    public generadorIntermedio(analisis.Lexer lexer){
        super(lexer);
    }

    private int agregarAnidamiento(){
        if(anidamiento == 0 && anidamientos.size() == 0){
            anidamientos.add(1);
            anidamientos.add(0);
            anidamiento++;
            return 1;
        }
        anidamientos.set(anidamiento, anidamientos.get(anidamiento) + 1);
        anidamientos.add(0);
        return anidamientos.get(anidamiento++);
    }
    private void quitarAnidamiento(){
        if(anidamiento == 0){
            ambito = ambito.split(":")[0];
            //anidamientos.clear();
            return;
        }
        if(anidamiento == 1){
            ambito = ambito.split(":")[0];
            anidamiento--;
            return;
        }
        anidamientos.remove(anidamiento--);
        anidamientos.remove(anidamiento--);
        String cadena = "";
        for(int i: anidamientos) cadena += ":" + i;
        ambito = ambito.split(":")[0] + cadena;
    }

    private void agregarTripletaBloque(Tripleta tripleta){
        bloqueActual.addTripleta(tripleta);
    }

    private void guardarBloque(){
        programa.addBloque(bloqueActual);
    }

    private void guardarBloqueCondicional(){
        if(bloqueActual instanceof BloqueSiNo){
            bloqueActual = ((BloqueSiNo) bloqueActual).bloquePadre;
            return;
        }
        BloqueCondicional bc = (BloqueCondicion) bloqueActual;
        bc.bloquePadre.addBloqueInterno(bc);
        bloqueActual = bc.bloquePadre;
        bloqueAux = bc;
    }

    private void agregarTripletaExpresion(Tripleta tripleta){
        expresion.add(tripleta);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$generadorIntermedio$actions {
  private final generadorIntermedio parser;

  /** Constructor */
  CUP$generadorIntermedio$actions(generadorIntermedio parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$generadorIntermedio$do_action_part00000000(
    int                        CUP$generadorIntermedio$act_num,
    java_cup.runtime.lr_parser CUP$generadorIntermedio$parser,
    java.util.Stack            CUP$generadorIntermedio$stack,
    int                        CUP$generadorIntermedio$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$generadorIntermedio$result;

      /* select the action based on the action number */
      switch (CUP$generadorIntermedio$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-1)).value;
		RESULT = start_val;
              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-1)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$generadorIntermedio$parser.done_parsing();
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
programa = new BloquePrograma();
              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("NT$0",37, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= INICIO NT$0 IDENTIFICADOR LLAVE_ABIERTA inicio1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-3)).value;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-4)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$1 ::= 
            {
              Object RESULT =null;
bloqueActual = new BloqueTripletas();
              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("NT$1",38, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$2 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()).right;
		TripletaTiempoCada t = (TripletaTiempoCada)((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.peek()).value;
bloqueActual = new BloqueComienzo(t); ambito = "comienzo";guardarBloque();
              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("NT$2",39, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // inicio1 ::= COMIENZO NT$1 PARENTESIS_ABIERTO tiempo_cada NT$2 PARENTESIS_CERRADO inicio2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-3)).right;
		TripletaTiempoCada t = (TripletaTiempoCada)((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-3)).value;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("inicio1",1, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-6)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // inicio2 ::= LLAVE_ABIERTA gramaticas LLAVE_CERRADA inicio_fin 
            {
              Object RESULT =null;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("inicio2",2, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-3)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // inicio_fin ::= LLAVE_CERRADA FIN 
            {
              Object RESULT =null;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("inicio_fin",7, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-1)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // inicio_fin ::= FUNCION funcion inicio_fin 
            {
              Object RESULT =null;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("inicio_fin",7, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-2)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // funcion ::= IDENTIFICADOR PARENTESIS_ABIERTO parametros PARENTESIS_CERRADO LLAVE_ABIERTA gramaticas LLAVE_CERRADA 
            {
              Object RESULT =null;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("funcion",6, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-6)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // parametros ::= declaracion_inicio COMA parametros 
            {
              Object RESULT =null;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("parametros",8, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-2)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // parametros ::= declaracion_inicio 
            {
              Object RESULT =null;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("parametros",8, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // parametros ::= 
            {
              Object RESULT =null;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("parametros",8, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$3 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-2)).value;
agregarTripletaBloque(new TripletaIncremento(tabla.getDireccion(i, ambito)));
              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("NT$3",40, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // gramaticas ::= IDENTIFICADOR INC PUNTO_COMA NT$3 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-4)).value;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("gramaticas",3, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-4)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$4 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-2)).value;
agregarTripletaBloque(new TripletaDecremento(tabla.getDireccion(i, ambito)));
              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("NT$4",41, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // gramaticas ::= IDENTIFICADOR DEC PUNTO_COMA NT$4 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-4)).value;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("gramaticas",3, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-4)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$5 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-1)).value;
agregarTripletaBloque(new TripletaIncremento(tabla.getDireccion(i, ambito)));
              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("NT$5",42, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // gramaticas ::= INC IDENTIFICADOR PUNTO_COMA NT$5 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-3)).value;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("gramaticas",3, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-4)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$6 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-1)).value;
agregarTripletaBloque(new TripletaDecremento(tabla.getDireccion(i, ambito)));
              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("NT$6",43, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // gramaticas ::= DEC IDENTIFICADOR PUNTO_COMA NT$6 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-3)).value;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("gramaticas",3, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-4)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$7 ::= 
            {
              Object RESULT =null;
		int dileft = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()).left;
		int diright = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()).right;
		TripletaDeclaracion di = (TripletaDeclaracion)((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.peek()).value;
agregarTripletaBloque(di);
              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("NT$7",44, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // gramaticas ::= declaracion_inicio NT$7 PUNTO_COMA gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-2)).value;
		int dileft = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-3)).left;
		int diright = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-3)).right;
		TripletaDeclaracion di = (TripletaDeclaracion)((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-3)).value;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("gramaticas",3, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-3)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$8 ::= 
            {
              Object RESULT =null;
		int dileft = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-1)).left;
		int diright = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-1)).right;
		TripletaDeclaracion di = (TripletaDeclaracion)((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-1)).value;
		int dvleft = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()).right;
		TripletaAsignacion dv = (TripletaAsignacion)((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.peek()).value;
di.setInicializacion(dv); agregarTripletaBloque(di);
              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("NT$8",45, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // gramaticas ::= declaracion_inicio declaracion_valor NT$8 PUNTO_COMA gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-2)).value;
		int dileft = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-4)).left;
		int diright = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-4)).right;
		TripletaDeclaracion di = (TripletaDeclaracion)((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-4)).value;
		int dvleft = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-3)).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-3)).right;
		TripletaAsignacion dv = (TripletaAsignacion)((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-3)).value;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("gramaticas",3, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-4)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$9 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()).right;
		TripletaAsignacion a = (TripletaAsignacion)((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.peek()).value;
agregarTripletaBloque(a);
              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("NT$9",46, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // gramaticas ::= asignacion NT$9 PUNTO_COMA gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-3)).right;
		TripletaAsignacion a = (TripletaAsignacion)((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-3)).value;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("gramaticas",3, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-3)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$10 ::= 
            {
              Object RESULT =null;
bloqueActual = new BloqueCondicion(bloqueActual);
              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("NT$10",47, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // gramaticas ::= CONDICION NT$10 condicion gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-2)).value;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("gramaticas",3, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-3)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$11 ::= 
            {
              Object RESULT =null;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("NT$11",48, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // gramaticas ::= MIENTRAS NT$11 mientras gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-2)).value;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("gramaticas",3, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-3)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NT$12 ::= 
            {
              Object RESULT =null;
agregarTripletaBloque(new TripletaApagar());
              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("NT$12",49, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // gramaticas ::= APAGAR LUCES PUNTO_COMA NT$12 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-1)).value;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("gramaticas",3, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-4)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NT$13 ::= 
            {
              Object RESULT =null;
agregarTripletaBloque(new TripletaEncender());
              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("NT$13",50, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // gramaticas ::= ENCENDER LUCES PUNTO_COMA NT$13 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-1)).value;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("gramaticas",3, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-4)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // NT$14 ::= 
            {
              Object RESULT =null;
		int tacleft = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()).left;
		int tacright = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()).right;
		Object tac = (Object)((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.peek()).value;
agregarTripletaBloque(new TripletaAbrir("puertas", tac));
              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("NT$14",51, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // gramaticas ::= ABRIR PUERTAS tiempo_abrir_cerrar NT$14 PUNTO_COMA gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-2)).value;
		int tacleft = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-3)).left;
		int tacright = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-3)).right;
		Object tac = (Object)((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-3)).value;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("gramaticas",3, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-5)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NT$15 ::= 
            {
              Object RESULT =null;
		int tacleft = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()).left;
		int tacright = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()).right;
		Object tac = (Object)((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.peek()).value;
agregarTripletaBloque(new TripletaCerrar("puertas", tac));
              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("NT$15",52, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // gramaticas ::= CERRAR PUERTAS tiempo_abrir_cerrar NT$15 PUNTO_COMA gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-2)).value;
		int tacleft = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-3)).left;
		int tacright = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-3)).right;
		Object tac = (Object)((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-3)).value;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("gramaticas",3, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-5)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // NT$16 ::= 
            {
              Object RESULT =null;
		int tacleft = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()).left;
		int tacright = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()).right;
		Object tac = (Object)((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.peek()).value;
agregarTripletaBloque(new TripletaAbrir("ventanas", tac));
              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("NT$16",53, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // gramaticas ::= ABRIR VENTANAS tiempo_abrir_cerrar NT$16 PUNTO_COMA gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-2)).value;
		int tacleft = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-3)).left;
		int tacright = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-3)).right;
		Object tac = (Object)((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-3)).value;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("gramaticas",3, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-5)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NT$17 ::= 
            {
              Object RESULT =null;
		int tacleft = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()).left;
		int tacright = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()).right;
		Object tac = (Object)((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.peek()).value;
agregarTripletaBloque(new TripletaCerrar("ventanas", tac));
              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("NT$17",54, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // gramaticas ::= CERRAR VENTANAS tiempo_abrir_cerrar NT$17 PUNTO_COMA gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-2)).value;
		int tacleft = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-3)).left;
		int tacright = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-3)).right;
		Object tac = (Object)((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-3)).value;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("gramaticas",3, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-5)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$18 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-1)).right;
		TripletaTiempoPor t = (TripletaTiempoPor)((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-1)).value;
agregarTripletaBloque(new TripletaSanitizar(t));
              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("NT$18",55, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // gramaticas ::= SANITIZAR tiempo_por PUNTO_COMA NT$18 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-3)).right;
		TripletaTiempoPor t = (TripletaTiempoPor)((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-3)).value;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("gramaticas",3, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-4)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // NT$19 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-1)).right;
		TripletaTiempoPor t = (TripletaTiempoPor)((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-1)).value;
agregarTripletaBloque(new TripletaDispensar(t));
              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("NT$19",56, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // gramaticas ::= DISPENSAR tiempo_por PUNTO_COMA NT$19 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-3)).right;
		TripletaTiempoPor t = (TripletaTiempoPor)((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-3)).value;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("gramaticas",3, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-4)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // gramaticas ::= usar PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("gramaticas",3, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-2)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // gramaticas ::= SALIR PUNTO_COMA 
            {
              Object RESULT =null;
		agregarTripletaBloque(new TripletaSalir());
              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("gramaticas",3, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-1)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // gramaticas ::= 
            {
              Object RESULT =null;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("gramaticas",3, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // tiempo_abrir_cerrar ::= MANTENER 
            {
              Object RESULT =null;
		RESULT = "mantener";
              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("tiempo_abrir_cerrar",21, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // tiempo_abrir_cerrar ::= tiempo_por 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()).right;
		TripletaTiempoPor t = (TripletaTiempoPor)((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.peek()).value;
		RESULT = t;
              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("tiempo_abrir_cerrar",21, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // usar ::= USAR usar_funcion 
            {
              Object RESULT =null;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("usar",11, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-1)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // usar ::= USAR admitir 
            {
              Object RESULT =null;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("usar",11, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-1)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // usar ::= USAR ventilar 
            {
              Object RESULT =null;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("usar",11, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-1)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // NT$20 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.peek()).value;
actual = new TripletaUsar(i);agregarTripletaBloque(actual);
              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("NT$20",57, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // usar_funcion ::= IDENTIFICADOR NT$20 PARENTESIS_ABIERTO parametros_llamar PARENTESIS_CERRADO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-4)).value;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("usar_funcion",22, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-4)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NT$21 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.peek()).value;
((TripletaUsar)actual).addParametro(e);
              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("NT$21",58, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // parametros_llamar ::= expresion NT$21 COMA parametros_llamar 
            {
              Object RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-3)).value;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("parametros_llamar",10, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-3)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // parametros_llamar ::= expresion 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.peek()).value;
		((TripletaUsar)actual).addParametro(e);
              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("parametros_llamar",10, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // parametros_llamar ::= 
            {
              Object RESULT =null;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("parametros_llamar",10, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // tiempo_cada ::= CADA expresion unidad_tiempo 
            {
              TripletaTiempoCada RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-1)).value;
		int utleft = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()).left;
		int utright = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()).right;
		String ut = (String)((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.peek()).value;
		RESULT = new TripletaTiempoCada((e instanceof Tripleta) ? bloqueActual : e, ut);
              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("tiempo_cada",29, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-2)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // tiempo_por ::= POR expresion unidad_tiempo 
            {
              TripletaTiempoPor RESULT =null;
		int utleft = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()).left;
		int utright = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()).right;
		String ut = (String)((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.peek()).value;
		RESULT = new TripletaTiempoPor(expresion, ut);
              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("tiempo_por",28, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-2)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // unidad_tiempo ::= SEG 
            {
              String RESULT =null;
		RESULT="seg";
              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("unidad_tiempo",30, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // unidad_tiempo ::= MIN 
            {
              String RESULT =null;
		RESULT="min";
              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("unidad_tiempo",30, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // unidad_tiempo ::= HR 
            {
              String RESULT =null;
		RESULT="hr";
              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("unidad_tiempo",30, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // estado ::= LUCES 
            {
              String RESULT =null;
		RESULT="luces";
              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("estado",31, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // estado ::= PUERTAS 
            {
              String RESULT =null;
		RESULT="puertas";
              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("estado",31, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // estado ::= VENTANAS 
            {
              String RESULT =null;
		RESULT="ventanas";
              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("estado",31, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // asignacion ::= IDENTIFICADOR ASIGNACION expresion 
            {
              TripletaAsignacion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.peek()).value;
		RESULT = new TripletaAsignacion(tabla.getDireccion(i, ambito), e);
              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("asignacion",36, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-2)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // declaracion_inicio ::= IDENTIFICADOR DECLARAR declaracion_tipo_dato 
            {
              TripletaDeclaracion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-2)).value;
		int dtdleft = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()).left;
		int dtdright = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()).right;
		String dtd = (String)((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.peek()).value;
		RESULT = new TripletaDeclaracion(dtd, tabla.getDireccion(i, ambito));
              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("declaracion_inicio",34, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-2)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // declaracion_valor ::= ASIGNACION expresion 
            {
              TripletaAsignacion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.peek()).value;
		RESULT = new TripletaAsignacion(e);
              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("declaracion_valor",35, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-1)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // declaracion_tipo_dato ::= COMO tipo_dato 
            {
              String RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()).right;
		String td = (String)((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.peek()).value;
		RESULT=td;
              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("declaracion_tipo_dato",33, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-1)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // tipo_dato ::= ENTERO 
            {
              String RESULT =null;
		RESULT="entero";
              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("tipo_dato",32, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // tipo_dato ::= LOGICO 
            {
              String RESULT =null;
		RESULT="logico";
              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("tipo_dato",32, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // NT$22 ::= 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.peek()).value;
valorActual = v;
              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("NT$22",59, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expresion ::= op2 NT$22 op1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.peek()).value;
		RESULT = r;
              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("expresion",9, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-2)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // NT$23 ::= 
            {
              Object RESULT =null;
aux1 = valorActual;
              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("NT$23",60, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // NT$24 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.peek()).value;

        TripletaAnd t = new TripletaAnd(aux1, v);
        valorActual = t;
        agregarTripletaBloque(t);
    
              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("NT$24",61, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // op1 ::= LOGICO_AND NT$23 op2 NT$24 op1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$24
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.peek()).value;
		RESULT=r;
              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("op1",13, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-4)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // NT$25 ::= 
            {
              Object RESULT =null;
aux1 = valorActual;
              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("NT$25",62, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // NT$26 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.peek()).value;

        TripletaOr t = new TripletaOr(aux1, v);
        valorActual = t;
        agregarTripletaBloque(t);
    
              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("NT$26",63, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // op1 ::= LOGICO_OR NT$25 op2 NT$26 op1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$26
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.peek()).value;
		RESULT=r;
              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("op1",13, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-4)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // op1 ::= 
            {
              Object RESULT =null;
		RESULT=valorActual;
              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("op1",13, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // NT$27 ::= 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.peek()).value;
valorActual = v;
              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("NT$27",64, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // op2 ::= op4 NT$27 op3 
            {
              Object RESULT =null;
              // propagate RESULT from NT$27
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.peek()).value;
		RESULT = r;
              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("op2",14, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-2)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // NT$28 ::= 
            {
              Object RESULT =null;
aux2 = valorActual;
              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("NT$28",65, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // op3 ::= REL_MENOR NT$28 op4 
            {
              Object RESULT =null;
              // propagate RESULT from NT$28
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.peek()).value;
		
        TripletaMenor t = new TripletaMenor(aux2, v);
        valorActual = t;
        agregarTripletaBloque(t);
        RESULT = t;
    
              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("op3",15, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-2)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // NT$29 ::= 
            {
              Object RESULT =null;
aux2 = valorActual;
              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("NT$29",66, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // op3 ::= REL_MAYOR NT$29 op4 
            {
              Object RESULT =null;
              // propagate RESULT from NT$29
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.peek()).value;
		
        TripletaMayor t = new TripletaMayor(aux2, v);
        valorActual = t;
        agregarTripletaBloque(t);
        RESULT = t;
    
              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("op3",15, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-2)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // NT$30 ::= 
            {
              Object RESULT =null;
aux2 = valorActual;
              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("NT$30",67, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // op3 ::= REL_MENOR_IGUAL NT$30 op4 
            {
              Object RESULT =null;
              // propagate RESULT from NT$30
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.peek()).value;
		
        TripletaMenorIgual t = new TripletaMenorIgual(aux2, v);
        valorActual = t;
        agregarTripletaBloque(t);
        RESULT = t;
    
              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("op3",15, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-2)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // NT$31 ::= 
            {
              Object RESULT =null;
aux2 = valorActual;
              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("NT$31",68, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // op3 ::= REL_MAYOR_IGUAL NT$31 op4 
            {
              Object RESULT =null;
              // propagate RESULT from NT$31
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.peek()).value;
		
        TripletaMayorIgual t = new TripletaMayorIgual(aux2, v);
        valorActual = t;
        agregarTripletaBloque(t);
        RESULT = t;
    
              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("op3",15, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-2)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // NT$32 ::= 
            {
              Object RESULT =null;
aux2 = valorActual;
              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("NT$32",69, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // op3 ::= REL_DIFERENTE NT$32 op4 
            {
              Object RESULT =null;
              // propagate RESULT from NT$32
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.peek()).value;
		
        TripletaDiferente t = new TripletaDiferente(aux2, v);
        valorActual = t;
        agregarTripletaBloque(t);
        RESULT = t;
    
              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("op3",15, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-2)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // NT$33 ::= 
            {
              Object RESULT =null;
aux2 = valorActual;
              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("NT$33",70, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // op3 ::= REL_IGUAL NT$33 op4 
            {
              Object RESULT =null;
              // propagate RESULT from NT$33
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.peek()).value;
		
        TripletaIgual t = new TripletaIgual(aux2, v);
        valorActual = t;
        agregarTripletaBloque(t);
        RESULT = t;
    
              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("op3",15, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-2)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // op3 ::= 
            {
              Object RESULT =null;
		RESULT=valorActual;
              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("op3",15, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // NT$34 ::= 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.peek()).value;
valorActual = v;
              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("NT$34",71, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // op4 ::= op6 NT$34 op5 
            {
              Object RESULT =null;
              // propagate RESULT from NT$34
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.peek()).value;
		RESULT = r;
              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("op4",16, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-2)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // NT$35 ::= 
            {
              Object RESULT =null;
aux3 = valorActual;
              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("NT$35",72, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // NT$36 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.peek()).value;

        TripletaSuma t = new TripletaSuma(aux3, v);
        valorActual = t;
        agregarTripletaBloque(t);
    
              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("NT$36",73, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // op5 ::= AR_SUMA NT$35 op6 NT$36 op5 
            {
              Object RESULT =null;
              // propagate RESULT from NT$36
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.peek()).value;
		RESULT=r;
              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("op5",17, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-4)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // NT$37 ::= 
            {
              Object RESULT =null;
aux3 = valorActual;
              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("NT$37",74, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // NT$38 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.peek()).value;

        TripletaResta t = new TripletaResta(aux3, v);
        valorActual = t;
        agregarTripletaBloque(t);
    
              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("NT$38",75, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // op5 ::= AR_RESTA NT$37 op6 NT$38 op5 
            {
              Object RESULT =null;
              // propagate RESULT from NT$38
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.peek()).value;
		RESULT=r;
              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("op5",17, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-4)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // op5 ::= 
            {
              Object RESULT =null;
		RESULT=valorActual;
              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("op5",17, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // NT$39 ::= 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.peek()).value;
valorActual = v;
              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("NT$39",76, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // op6 ::= op8 NT$39 op7 
            {
              Object RESULT =null;
              // propagate RESULT from NT$39
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.peek()).value;
		RESULT = r;
              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("op6",18, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-2)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // NT$40 ::= 
            {
              Object RESULT =null;
aux4 = valorActual;
              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("NT$40",77, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // NT$41 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.peek()).value;

        TripletaDivision t = new TripletaDivision(aux4, v);
        valorActual = t;
        agregarTripletaBloque(t);
    
              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("NT$41",78, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // op7 ::= AR_DIVISION NT$40 op8 NT$41 op7 
            {
              Object RESULT =null;
              // propagate RESULT from NT$41
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.peek()).value;
		RESULT=r;
              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("op7",19, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-4)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // NT$42 ::= 
            {
              Object RESULT =null;
aux4 = valorActual;
              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("NT$42",79, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // NT$43 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.peek()).value;

        TripletaMultiplicacion t = new TripletaMultiplicacion(aux4, v);
        valorActual = t;
        agregarTripletaBloque(t);
    
              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("NT$43",80, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // op7 ::= AR_MULTIPLICACION NT$42 op8 NT$43 op7 
            {
              Object RESULT =null;
              // propagate RESULT from NT$43
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.peek()).value;
		RESULT=r;
              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("op7",19, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-4)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // op7 ::= 
            {
              Object RESULT =null;
		RESULT=valorActual;
              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("op7",19, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // op8 ::= valores 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.peek()).value;
		RESULT = v;
              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("op8",20, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // op8 ::= AR_RESTA valores 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.peek()).value;
		
        TripletaResta t = new TripletaResta(v);
        RESULT = t;
        agregarTripletaBloque(t);
    
              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("op8",20, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-1)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // op8 ::= NEGACION valores 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.peek()).value;
		
        TripletaNegacion t = new TripletaNegacion(v);
        RESULT = t;
        agregarTripletaBloque(t);
    
              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("op8",20, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-1)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // valores ::= NUMERO 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.peek()).value;
		RESULT = n;
              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("valores",12, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // valores ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.peek()).value;
		RESULT = tabla.getDireccion(i, ambito);
              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("valores",12, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // valores ::= OBTENER TEMPERATURA 
            {
              Object RESULT =null;
		
                TripletaObtener t = new TripletaObtener("temperatura");
                RESULT = t;
                agregarTripletaBloque(t);
            
              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("valores",12, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-1)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // valores ::= OBTENER PERSONAS 
            {
              Object RESULT =null;
		
                TripletaObtener t = new TripletaObtener("personas");
                RESULT = t;
                agregarTripletaBloque(t);
            
              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("valores",12, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-1)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // valores ::= OP_BOOLEANO 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()).right;
		Boolean o = (Boolean)((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.peek()).value;
		RESULT = o ? "verdadero" : "falso";
              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("valores",12, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // valores ::= ESTADO estado 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.peek()).value;
		
                TripletaEstado t = new TripletaEstado(e);
                RESULT = t;
                agregarTripletaBloque(t);
            
              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("valores",12, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-1)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // valores ::= PARENTESIS_ABIERTO expresion PARENTESIS_CERRADO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-1)).value;
		RESULT = e;
              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("valores",12, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-2)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // condicion ::= cabecera_condicional cuerpo_estructura 
            {
              Object RESULT =null;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("condicion",26, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-1)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // condicion ::= cabecera_condicional cuerpo_estructura sino 
            {
              Object RESULT =null;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("condicion",26, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-2)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // NT$44 ::= 
            {
              Object RESULT =null;
 
            bloqueActual = new BloqueSiNo(bloqueActual);
            ((BloqueCondicion) bloqueAux).setSiNo((BloqueSiNo) bloqueActual);
        
              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("NT$44",81, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // NT$45 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-1)).value;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("NT$45",82, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // sino ::= SINO NT$44 CONDICION NT$45 condicion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$45
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-1)).value;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("sino",27, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-4)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // NT$46 ::= 
            {
              Object RESULT =null;
 
            bloqueActual = new BloqueSiNo(bloqueActual);
            ((BloqueCondicion) bloqueAux).setSiNo((BloqueSiNo) bloqueActual);
        
              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("NT$46",83, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // sino ::= SINO NT$46 cuerpo_estructura 
            {
              Object RESULT =null;
              // propagate RESULT from NT$46
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-1)).value;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("sino",27, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-2)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // ventilar ::= VENTILAR PARENTESIS_ABIERTO tiempo_por COMA expresion COMA expresion PARENTESIS_CERRADO 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-5)).right;
		TripletaTiempoPor t = (TripletaTiempoPor)((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-1)).value;
		agregarTripletaBloque(new TripletaVentilar(t, e1, e2));
              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("ventilar",4, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-7)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // admitir ::= ADMITIR PARENTESIS_ABIERTO expresion COMA tiempo_por PARENTESIS_CERRADO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-1)).right;
		TripletaTiempoPor t = (TripletaTiempoPor)((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-1)).value;
		agregarTripletaBloque(new TripletaAdmitir(e, t));
              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("admitir",5, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-5)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // mientras ::= cabecera_condicional cuerpo_estructura 
            {
              Object RESULT =null;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("mientras",23, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-1)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // NT$47 ::= 
            {
              Object RESULT =null;
bloqueAux = bloqueActual; bloqueActual = new BloqueTripletas();
              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("NT$47",84, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // cabecera_condicional ::= PARENTESIS_ABIERTO NT$47 expresion PARENTESIS_CERRADO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$47
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-1)).value;
		((BloqueCondicional) bloqueAux).setCondicion(new TripletaCondicion(e instanceof Tripleta ? bloqueActual : e));bloqueActual=bloqueAux;
              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("cabecera_condicional",24, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-3)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // NT$48 ::= 
            {
              Object RESULT =null;
ambito+=":"+(agregarAnidamiento());
              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("NT$48",85, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // NT$49 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-2)).value;
quitarAnidamiento();guardarBloqueCondicional();
              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("NT$49",86, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // cuerpo_estructura ::= NT$48 LLAVE_ABIERTA gramaticas NT$49 LLAVE_CERRADA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$49
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-1)).value;

              CUP$generadorIntermedio$result = parser.getSymbolFactory().newSymbol("cuerpo_estructura",25, ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.elementAt(CUP$generadorIntermedio$top-4)), ((java_cup.runtime.Symbol)CUP$generadorIntermedio$stack.peek()), RESULT);
            }
          return CUP$generadorIntermedio$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$generadorIntermedio$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$generadorIntermedio$do_action(
    int                        CUP$generadorIntermedio$act_num,
    java_cup.runtime.lr_parser CUP$generadorIntermedio$parser,
    java.util.Stack            CUP$generadorIntermedio$stack,
    int                        CUP$generadorIntermedio$top)
    throws java.lang.Exception
    {
              return CUP$generadorIntermedio$do_action_part00000000(
                               CUP$generadorIntermedio$act_num,
                               CUP$generadorIntermedio$parser,
                               CUP$generadorIntermedio$stack,
                               CUP$generadorIntermedio$top);
    }
}

}
