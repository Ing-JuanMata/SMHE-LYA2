package analisis;

import java_cup.runtime.Symbol;
import codigo.FrmPrincipal;


parser code
{:
    private String ambito;
    private Symbol s;
    private Object valActual = 0;
    private boolean aux1 = false, enFuncion = false;
    private int aux2 = 0, aux3 = 0, aux4 = 0, anidamiento = 0;
    private herramientas.Funcion funcionActual;
    private java.util.ArrayList<herramientas.Funcion> funcionesLlamadas = new java.util.ArrayList<>();
    private java.util.ArrayList<Integer> anidamientos = new java.util.ArrayList<>();
    
    private int agregarAnidamiento(){
        if(anidamiento == 0 && anidamientos.size() == 0){
            anidamientos.add(1);
            anidamientos.add(0);
            anidamiento++;
            return 1;
        }
        anidamientos.set(anidamiento, anidamientos.get(anidamiento) + 1);
        anidamientos.add(0);
        return anidamientos.get(anidamiento++);
    }
    private void quitarAnidamiento(){
        if(anidamiento == 0){
            ambito = ambito.split(":")[0];
            //anidamientos.clear();
            return;
        }
        if(anidamiento == 1){
            ambito = ambito.split(":")[0];
            anidamiento--;
            return;
        }
        anidamientos.remove(anidamiento--);
        anidamientos.remove(anidamiento--);
        String cadena = "";
        for(int i: anidamientos) cadena += ":" + i;
        ambito = ambito.split(":")[0] + cadena;
    }
    public void syntax_error(Symbol s){
        this.s = s;
    }

    private void reportarError(String codigo, String encontrado){
        if(this.s == null) this.s = cur_token;
        FrmPrincipal.errores.agregarErrorSintactico(codigo, s.left + 1, sym.terminalNames[s.sym], encontrado);
    }

    private void reportarErrorSemantico(String codigo, String... valores){
        if(this.s == null) this.s = cur_token;
        FrmPrincipal.errores.agregarErrorSemantico(codigo, s.left + 1, valores);
    }

    public void report_fatal_error(String message, Object info){
        reportarError("ES8", null);
    }

    public SintaxPrueba(Lexer lexer){
        super(lexer);
    }

    private void ponerValor(String identificador, Object valor){
        if(valor == null || identificador == null) return;
        String tipo = getTipo(identificador);
        if(tipo == null) {
            reportarErrorSemantico("ESM1", identificador);
            return;
        }

        if(tipo.equals("error")){
            reportarErrorSemantico("ESM6", identificador);
            return;
        }

        if(tipo.equals("logico") && !valor.getClass().getName().equals("java.lang.Boolean")){
            reportarErrorSemantico("ESM5", "entero", identificador, "logico");
            return;
        }

        if(tipo.equals("entero") && !valor.getClass().getName().equals("java.lang.Integer")){
            reportarErrorSemantico("ESM5", "logico", identificador, "entero");
            return;
        }
        FrmPrincipal.tablaSimbolos.agregarValor(new LlaveTabla(identificador, ambito), valor);
    }

    private void verificarIdentificador(String id, boolean declarando){
        if(!FrmPrincipal.tablaSimbolos.existe(new LlaveTabla(id, ambito)) && !declarando){
            reportarErrorSemantico("ESM1", id);
            agregarSimbolo(id, -1);
        }
        if(FrmPrincipal.tablaSimbolos.existe(new LlaveTabla(id, ambito)) && declarando){
            reportarErrorSemantico("ESM4", id);
        }
        if(FrmPrincipal.funciones.existe(id)){
            reportarErrorSemantico("ESM4", id);
        }
    }

    private Object getValor(String identificador){
        return FrmPrincipal.tablaSimbolos.getValor(new LlaveTabla(identificador, ambito));
    }

    private String getTipo(String identificador){
        return FrmPrincipal.tablaSimbolos.getTipo(new LlaveTabla(identificador, ambito));
    }

    private void ponerTipoDato(String identificador, String tipo){
        FrmPrincipal.tablaSimbolos.agregarTipo(new LlaveTabla(identificador, ambito), tipo);
    }

    private void agregarSimbolo(String identificador, int linea){
        FrmPrincipal.tablaSimbolos.agregarSimbolo(new LlaveTabla(identificador, ambito), linea);
    }

    private void agregarFuncion(String id){
        verificarIdentificador(id, true);
        FrmPrincipal.funciones.agregarFuncion(id);
    }

    private void agregarParametro(String parametro){
        FrmPrincipal.funciones.agregarParametro(ambito, new LlaveTabla(parametro, ambito));
    }

    private Integer validarEntero(String id){
        switch(getTipo(id)){
            case "logico" -> {
                reportarErrorSemantico("ESM2", id, "logico");
                return 0;
            }
            case "entero" -> {
                
                return (int) verificarValor(id);
            }
            default -> {
                reportarErrorSemantico("ESM2", id, "sin tipo");
                return 0;
            }
        }
    }

    private Object verificarValor(String id){
        Object valor = getValor(id);
        if(valor == null){
            reportarErrorSemantico("ESM3", id);
        }
        return valor;
    }

    private void agregarExpresion(Object expresion){
        funcionActual.agregarParametro(expresion);
    }
    private void comprobarFunciones(){
        funcionesLlamadas.forEach(funcion -> funcion.comprobarParametros());
    }

    private void guardarFuncion(){
        funcionesLlamadas.add(funcionActual);
    }

    private int getEntero(Object v){
        if(v == null) return 0;
        if(v instanceof Integer) return Integer.parseInt(v.toString());
        else {
            reportarErrorSemantico("ESM11", "Lógico", "Entera");
            return 0;
        }
    }

    private boolean getLogico(Object v){
        if(v == null) return false;
        if(v instanceof Boolean) return Boolean.parseBoolean(v.toString());
        else {
            reportarErrorSemantico("ESM11", "Entero", "Lógica");
            return false;
        }
    }
:};

terminal FIN, COMIENZO, ENTERO, LOGICO, CONDICION, SINO, VENTILAR,
        ADMITIR, DISPENSAR, SALIR, INICIO, DECLARAR, COMO, CADA, POR, SEG,
        MIN, HR, ABRIR, CERRAR, VENTANAS, PUERTAS, MANTENER, OBTENER, TEMPERATURA,
        PERSONAS, APAGAR, ENCENDER, SANITIZAR, LUCES, ESTADO, FUNCION, USAR, MIENTRAS;
terminal REL_MENOR, REL_MAYOR, REL_MENOR_IGUAL, REL_MAYOR_IGUAL, REL_DIFERENTE, 
        REL_IGUAL;
terminal AR_SUMA, AR_RESTA, AR_MULTIPLICACION, AR_DIVISION;
terminal NEGACION, LOGICO_AND, LOGICO_OR;
terminal INC, DEC, ASIGNACION;
terminal PARENTESIS_ABIERTO, PARENTESIS_CERRADO, LLAVE_ABIERTA, LLAVE_CERRADA;
terminal PUNTO_COMA, COMA;
terminal Integer NUMERO;
terminal Boolean OP_BOOLEANO;
terminal String IDENTIFICADOR;

non terminal inicio, inicio1, inicio2, gramaticas, tiempo_cada, tiempo_por, unidad_tiempo, 
            declaracion_valor, ventilar, admitir, estado, funcion, inicio_fin, 
            parametros, asignacion, expresion, parametros_llamar, usar, valores,
            op1, op2, op3, op4, op5, op6, op7, op8, tiempo_abrir_cerrar, 
            usar_funcion, mientras, cabecera_condicional, cuerpo_estructura;
non terminal String declaracion_tipo_dato, tipo_dato, declaracion_inicio;
non terminal Boolean condicion, sino;

start with inicio;

inicio ::= INICIO IDENTIFICADOR {:
            ambito = "comienzo";
            agregarFuncion("comienzo");
        :} LLAVE_ABIERTA inicio1
        | INICIO IDENTIFICADOR {:
            ambito = "comienzo";
            agregarFuncion("comienzo");
            s=cur_token;reportarError("ES11", "No se ha encontrado \"{\"");
        :} inicio1
        | error {:s=cur_token;reportarError("ES11", "No se ha encontrado \"inicio\"");:} IDENTIFICADOR {:
            ambito = "comienzo";
            agregarFuncion("comienzo");
        :} LLAVE_ABIERTA inicio1
        | INICIO error {:
            s=cur_token;
            ambito = "comienzo";
            agregarFuncion("comienzo");
            reportarError("ES11", "No se ha encontrado el nombre del programa");
        :} LLAVE_ABIERTA inicio1;
inicio1 ::= COMIENZO PARENTESIS_ABIERTO tiempo_cada PARENTESIS_CERRADO inicio2
        | error {:s=cur_token;reportarError("ES11", "No se ha encontrado \"comienzo\"");:}
        PARENTESIS_ABIERTO tiempo_cada PARENTESIS_CERRADO inicio2
        | COMIENZO {:s=cur_token;reportarError("ES11", "No se ha encontrado \"(\"");:}
        tiempo_cada PARENTESIS_CERRADO inicio2
        | COMIENZO PARENTESIS_ABIERTO tiempo_cada 
        {:s=cur_token;reportarError("ES11", "No se ha encontrado \")\"");:} inicio2;
inicio2 ::= LLAVE_ABIERTA gramaticas LLAVE_CERRADA inicio_fin {:comprobarFunciones();:}
        | {:s=cur_token;reportarError("ES11", "No se ha encontrado \"{\"");:} 
        gramaticas LLAVE_CERRADA inicio_fin {:comprobarFunciones();:};
inicio_fin ::= LLAVE_CERRADA FIN | FUNCION funcion inicio_fin
            | LLAVE_CERRADA {:reportarError("ES11", "No se ha encontrado \"fin\"");:}
            | {:reportarError("ES11", "No se ha encontrado \"funcion\"");:} funcion inicio_fin;
funcion ::= IDENTIFICADOR:i {:
                                s = cur_token;
                                agregarFuncion(i);
                                ambito = i;
                                anidamientos.clear();
                                anidamiento = 0;
                                enFuncion = true;
                            :}
            PARENTESIS_ABIERTO parametros PARENTESIS_CERRADO LLAVE_ABIERTA 
            gramaticas LLAVE_CERRADA |
            error {:s=cur_token;reportarError("ES11", "No se ha encontrado el identificador de la función");:}
            PARENTESIS_ABIERTO parametros PARENTESIS_CERRADO LLAVE_ABIERTA 
            gramaticas LLAVE_CERRADA;
parametros ::= declaracion_inicio:i {:agregarParametro(i);:} COMA parametros 
                | declaracion_inicio:i {:agregarParametro(i);:} | /**/;
gramaticas ::= IDENTIFICADOR:i INC {:
                verificarIdentificador(i, false);
                ponerValor(i, validarEntero(i) + 1);
            :} PUNTO_COMA gramaticas
            | IDENTIFICADOR:i INC {:
                reportarError("ES7", null);
                verificarIdentificador(i, false);
                ponerValor(i, validarEntero(i) + 1);
            :} gramaticas
            | IDENTIFICADOR:i DEC {:
                verificarIdentificador(i, false);
                ponerValor(i, validarEntero(i) - 1);
            :} PUNTO_COMA gramaticas
            | IDENTIFICADOR:i DEC {:
                reportarError("ES7", null);
                verificarIdentificador(i, false);
                ponerValor(i, validarEntero(i) - 1);
            :} gramaticas 
            | INC IDENTIFICADOR:i {:
                verificarIdentificador(i, false);
                ponerValor(i, validarEntero(i) + 1);
            :} PUNTO_COMA gramaticas
            | INC IDENTIFICADOR:i {:
                reportarError("ES7", null);
                verificarIdentificador(i, false);
                ponerValor(i, validarEntero(i) + 1);
            :} gramaticas
            | DEC IDENTIFICADOR:i {:
                verificarIdentificador(i, false);
                ponerValor(i, validarEntero(i) - 1);
            :} PUNTO_COMA gramaticas
            | DEC IDENTIFICADOR:i {:
                reportarError("ES7", null);
                verificarIdentificador(i, false);
                ponerValor(i, validarEntero(i) - 1);
            :} gramaticas
            | declaracion_inicio PUNTO_COMA gramaticas
            | declaracion_inicio {:s=cur_token;reportarError("ES7", null);:} gramaticas
            | declaracion_inicio:i declaracion_valor:v {:ponerValor(i,v);:} PUNTO_COMA gramaticas
            | declaracion_inicio:i declaracion_valor:v {:reportarError("ES7", null);ponerValor(i,v);:} gramaticas
            | asignacion PUNTO_COMA gramaticas
            | asignacion {:s=cur_token;reportarError("ES7", null);:} gramaticas
            | CONDICION condicion gramaticas
            | MIENTRAS mientras gramaticas
            | APAGAR LUCES PUNTO_COMA gramaticas
            | APAGAR LUCES {:s=cur_token;reportarError("ES7", null);:} gramaticas
            | ENCENDER LUCES PUNTO_COMA gramaticas
            | ENCENDER LUCES {:s=cur_token;reportarError("ES7", null);:} gramaticas
            | ABRIR PUERTAS tiempo_abrir_cerrar PUNTO_COMA gramaticas
            | ABRIR PUERTAS tiempo_abrir_cerrar {:s=cur_token;reportarError("ES7", null);:} gramaticas
            | CERRAR PUERTAS tiempo_abrir_cerrar PUNTO_COMA gramaticas
            | CERRAR PUERTAS tiempo_abrir_cerrar {:s=cur_token;reportarError("ES7", null);:} gramaticas
            | ABRIR VENTANAS tiempo_abrir_cerrar PUNTO_COMA gramaticas
            | ABRIR VENTANAS tiempo_abrir_cerrar {:s=cur_token;reportarError("ES7", null);:} gramaticas
            | CERRAR VENTANAS tiempo_abrir_cerrar PUNTO_COMA gramaticas 
            | CERRAR VENTANAS tiempo_abrir_cerrar {:s=cur_token;reportarError("ES7", null);:} gramaticas
            | SANITIZAR tiempo_por PUNTO_COMA gramaticas
            | SANITIZAR tiempo_por {:s=cur_token;reportarError("ES7", null);:} gramaticas
            | DISPENSAR tiempo_por PUNTO_COMA gramaticas
            | DISPENSAR tiempo_por {:s=cur_token;reportarError("ES7", null);:} gramaticas
            | usar PUNTO_COMA gramaticas
            | usar {:s=cur_token;reportarError("ES7", null);:} gramaticas
            | SALIR PUNTO_COMA
            | SALIR {:s=cur_token;reportarError("ES7", null);:}
            | SALIR error {:s=cur_token;reportarError("ES7", null);:}
            | SALIR error PUNTO_COMA
            | error{:s=cur_token;reportarError("ES2", null);:} PUNTO_COMA gramaticas
            | error{:s=cur_token;reportarError("ES11", "Faltó identificador");:} INC PUNTO_COMA gramaticas
            | error{:s=cur_token;reportarError("ES11", "Faltó identificador");:} DEC PUNTO_COMA gramaticas
            | INC error{:s=cur_token;reportarError("ES11", "Faltó identificador");:} PUNTO_COMA gramaticas
            | DEC error{:s=cur_token;reportarError("ES11", "Faltó identificador");:} PUNTO_COMA gramaticas
            | error{:s=cur_token;reportarError("ES11", "Faltó <\"condicion\", \"mientras\">");:} condicion gramaticas
            | error{:s=cur_token;reportarError("ES11", "Faltó <\"encender\",\"apagar\">");:} LUCES PUNTO_COMA gramaticas
            | ENCENDER error{:s=cur_token;reportarError("ES11", "Faltó \"luces\"");:} PUNTO_COMA gramaticas
            | APAGAR error{:s=cur_token;reportarError("ES11", "Faltó \"luces\"");:} PUNTO_COMA gramaticas
            | error{:s=cur_token;reportarError("ES11", "Faltó <\"abrir\",\"cerrar\">");:} PUERTAS tiempo_abrir_cerrar PUNTO_COMA gramaticas
            | error{:s=cur_token;reportarError("ES11", "Faltó <\"abrir\",\"cerrar\">");:} VENTANAS tiempo_abrir_cerrar PUNTO_COMA gramaticas
            | error{:s=cur_token;reportarError("ES11", "Faltó <\"sanitizar\",\"dispensar\">");:} tiempo_por PUNTO_COMA gramaticas
            | {:
                if(enFuncion && anidamiento == 0){
                    s=cur_token;
                    reportarError("ES10", null);
                }
            :};
tiempo_abrir_cerrar ::= MANTENER 
    | tiempo_por
    | error{:s=cur_token;reportarError("ES11", "Se esperaba \"mantener\" o \"por <Expresión aritmética> <\"seg\", \"min\", \"hr\">\"");:};
usar ::= USAR usar_funcion | USAR admitir | USAR ventilar
    | error usar_funcion {:reportarError("ES11", "Faltó <\"usar\">");:}
    | error admitir {:reportarError("ES11", "Faltó <\"usar\">");:}
    | error ventilar {:reportarError("ES11", "Faltó <\"usar\">");:};
usar_funcion ::= IDENTIFICADOR:i {:funcionActual = new herramientas.Funcion(i, cur_token.left+1);:}
                PARENTESIS_ABIERTO parametros_llamar PARENTESIS_CERRADO
            | error{:
                        s=cur_token;
                        reportarError("ES11", "No se ha encontrado el identificador de la función");
                        funcionActual = new herramientas.Funcion("0sin_id", cur_token.left+1);
                    :} PARENTESIS_ABIERTO parametros_llamar PARENTESIS_CERRADO
            | error{:s=cur_token;reportarError("ES11", "No se ha encontrado <\"(\", \")\"> en el llamado de la función");:};
parametros_llamar ::= expresion:e {:agregarExpresion(e);:} COMA parametros_llamar 
                    | expresion:e {:agregarExpresion(e);guardarFuncion();:}
                    | expresion:e {:agregarExpresion(e);:} error{:s=cur_token;reportarError("ES11", "No se ha encontrado \",\" después de la expresión");:} parametros_llamar
                    | {:guardarFuncion();:};
tiempo_cada ::= CADA expresion unidad_tiempo | error{:s=cur_token;reportarError("ES11", "Se esperaba \"cada\"");:} expresion unidad_tiempo;
tiempo_por ::= POR expresion:e {:getEntero(e);:} unidad_tiempo;
unidad_tiempo ::= SEG | MIN | HR | error{:s=cur_token;reportarError("ES3", null);:};
estado ::= LUCES | PUERTAS | VENTANAS | error{:s=cur_token;reportarError("ES11", "Se esperaba <\"luces\", \"puertas\", \"ventanas\">");:};
asignacion ::= IDENTIFICADOR:i {:
                s = cur_token;
                verificarIdentificador(i, false);
            :} ASIGNACION expresion:e {:ponerValor(i,e);:}
        | error{:s=cur_token;reportarError("ES11", "No se ha encontrado el identificador para la asignación");:} ASIGNACION expresion
        | IDENTIFICADOR:i {:
                s = cur_token;
                verificarIdentificador(i, false);
                reportarError("ES11", "No se ha encontrado el simbolo \"=\"");
            :} expresion:e {:ponerValor(i,e);:};
declaracion_inicio ::= IDENTIFICADOR:i {:s=cur_token;verificarIdentificador(i, true);:} 
                    DECLARAR declaracion_tipo_dato:td {:
                        agregarSimbolo(i, cur_token.left+1);
                        ponerTipoDato(i,td);
                        RESULT=i;
                    :}
                | error{:s=cur_token;reportarError("ES11", "No se ha encontrado un identificador");:}
                    DECLARAR declaracion_tipo_dato
                | error{:s=cur_token;reportarError("ES11", "No se ha encontrado \"declarar\"");:}
                    declaracion_tipo_dato;
declaracion_valor ::= ASIGNACION expresion:e {:RESULT=e;:};
declaracion_tipo_dato ::= COMO tipo_dato:td {:RESULT = td;:};
tipo_dato ::= ENTERO {:RESULT = "entero";:} | LOGICO {:RESULT = "logico";:}
                | error{:s=cur_token;reportarError("ES4", null); RESULT = "error";:};
expresion ::= op2:v {:valActual=v;:} op1:r {:RESULT=r;:};
op1 ::= LOGICO_AND {:aux1=getLogico(valActual);:} op2:v {:valActual=aux1&&getLogico(v);:} op1:r {:RESULT=r;:} 
    | LOGICO_OR {:aux1=getLogico(valActual);:} op2:v {:valActual=getLogico(v)||aux1;:} op1:r {:RESULT=r;:} 
    | {:RESULT=valActual;:};
op2 ::= op4:v {:valActual=v;:} op3:r {:RESULT=r;:};
op3 ::= REL_MENOR {:aux2=getEntero(valActual);:} op4:v {:RESULT=aux2<getEntero(v);:} 
    | REL_MAYOR {:aux2=getEntero(valActual);:} op4:v {:RESULT=aux2>getEntero(v);:} 
    | REL_MENOR_IGUAL {:aux2=getEntero(valActual);:} op4:v {:RESULT=aux2<=getEntero(v);:} 
    | REL_MAYOR_IGUAL {:aux2=getEntero(valActual);:} op4:v {:RESULT=aux2>=getEntero(v);:}
    | REL_DIFERENTE {:aux2=getEntero(valActual);:} op4:v {:RESULT=aux2!=getEntero(v);:} 
    | REL_IGUAL {:aux2=getEntero(valActual);:} op4:v {:RESULT=aux2==getEntero(v);:} 
    | {:RESULT=valActual;:};
op4 ::= op6:v {:valActual=v;:} op5:r {:RESULT=r;:};
op5 ::= AR_SUMA {:aux3=getEntero(valActual);:} op6:v {:valActual=aux3+getEntero(v);:} op5:r {:RESULT=r;:}
    | AR_RESTA {:aux3=getEntero(valActual);:} op6:v {:valActual=aux3-getEntero(v);:} op5:r {:RESULT=r;:}
    | {:RESULT=valActual;:};
op6 ::= op8:v {:valActual=v;:} op7:r {:RESULT=r;:};
op7 ::= AR_DIVISION {:aux4=getEntero(valActual);:} op8:v {:valActual=aux4/getEntero(v);:} op7:r {:RESULT=r;:} 
    | AR_MULTIPLICACION {:aux4=getEntero(valActual);:} op8:v {:valActual=aux4*getEntero(v);:} op7:r {:RESULT=r;:}
    | {:RESULT=valActual;:};
op8 ::= valores:v {:RESULT=v;if(v instanceof Integer) if(Integer.parseInt(v.toString()) > 128) reportarErrorSemantico("ESM12", v.toString());:} 
    | AR_RESTA valores:v {:RESULT=-getEntero(v);if(Integer.parseInt(RESULT.toString()) < -127) reportarErrorSemantico("ESM12", RESULT.toString());:} 
    | NEGACION valores:v {:RESULT=!getLogico(v);:}
    | error{:s=cur_token;reportarError("ES11", "No se ha encontrado un operador o un operando en la expresión ingresada");:};
valores ::= NUMERO:n {:s=cur_token;RESULT=n;:}
            | IDENTIFICADOR:i {:s=cur_token;verificarIdentificador(i, false);RESULT=getValor(i);:} 
            | OBTENER TEMPERATURA {:RESULT=0;:} | OBTENER PERSONAS {:RESULT=0;:}
            | OP_BOOLEANO:ob {:RESULT=ob;:} | ESTADO estado {:RESULT=false;:}
            | PARENTESIS_ABIERTO expresion:e PARENTESIS_CERRADO {:RESULT=e;:};
condicion ::=  cabecera_condicional cuerpo_estructura
            | cabecera_condicional cuerpo_estructura sino;
sino ::= SINO CONDICION condicion | SINO cuerpo_estructura;
ventilar ::= VENTILAR PARENTESIS_ABIERTO tiempo_por COMA expresion COMA expresion PARENTESIS_CERRADO;
admitir ::= ADMITIR PARENTESIS_ABIERTO expresion COMA tiempo_por PARENTESIS_CERRADO;
mientras ::= cabecera_condicional cuerpo_estructura;
cabecera_condicional ::= PARENTESIS_ABIERTO expresion:e {:s=cur_token;getLogico(e);:} PARENTESIS_CERRADO;
cuerpo_estructura ::= {:ambito+=":"+(agregarAnidamiento());:} LLAVE_ABIERTA gramaticas {:quitarAnidamiento();:} LLAVE_CERRADA;