
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analisis;

import java_cup.runtime.Symbol;
import codigo.FrmPrincipal;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintaxPrueba extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public SintaxPrueba() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintaxPrueba(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintaxPrueba(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\230\000\002\002\004\000\002\034\002\000\002\002" +
    "\016\000\002\035\002\000\002\002\010\000\002\036\002" +
    "\000\002\002\007\000\002\016\004\000\002\037\002\000" +
    "\002\016\005\000\002\016\005\000\002\040\002\000\002" +
    "\016\006\000\002\041\002\000\002\015\012\000\002\017" +
    "\005\000\002\017\003\000\002\017\002\000\002\003\003" +
    "\000\002\003\005\000\002\042\002\000\002\003\005\000" +
    "\002\003\005\000\002\043\002\000\002\003\005\000\002" +
    "\003\005\000\002\003\006\000\002\044\002\000\002\003" +
    "\006\000\002\003\006\000\002\045\002\000\002\003\006" +
    "\000\002\003\006\000\002\046\002\000\002\003\006\000" +
    "\002\003\005\000\002\047\002\000\002\003\005\000\002" +
    "\003\006\000\002\050\002\000\002\003\006\000\002\003" +
    "\006\000\002\051\002\000\002\003\006\000\002\003\007" +
    "\000\002\052\002\000\002\003\007\000\002\003\007\000" +
    "\002\053\002\000\002\003\007\000\002\003\007\000\002" +
    "\054\002\000\002\003\007\000\002\003\007\000\002\055" +
    "\002\000\002\003\007\000\002\003\007\000\002\056\002" +
    "\000\002\003\007\000\002\003\007\000\002\057\002\000" +
    "\002\003\007\000\002\003\007\000\002\060\002\000\002" +
    "\003\007\000\002\003\007\000\002\061\002\000\002\003" +
    "\007\000\002\003\006\000\002\062\002\000\002\003\006" +
    "\000\002\003\006\000\002\063\002\000\002\003\006\000" +
    "\002\003\006\000\002\064\002\000\002\003\006\000\002" +
    "\003\006\000\002\065\002\000\002\003\006\000\002\003" +
    "\006\000\002\066\002\000\002\003\006\000\002\067\002" +
    "\000\002\003\006\000\002\070\002\000\002\071\002\000" +
    "\002\003\013\000\002\003\002\000\002\025\006\000\002" +
    "\025\006\000\002\025\006\000\002\025\006\000\002\004" +
    "\005\000\002\005\005\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\020\005\000\002" +
    "\072\002\000\002\020\005\000\002\007\003\000\002\007" +
    "\004\000\002\023\005\000\002\010\004\000\002\010\004" +
    "\000\002\021\004\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\024\005\000\002\024\005\000\002" +
    "\024\005\000\002\024\005\000\002\024\005\000\002\024" +
    "\003\000\002\024\003\000\002\024\003\000\002\026\010" +
    "\000\002\026\011\000\002\027\003\000\002\027\005\000" +
    "\002\027\005\000\002\027\003\000\002\027\010\000\002" +
    "\027\003\000\002\027\005\000\002\027\005\000\002\027" +
    "\003\000\002\027\005\000\002\027\005\000\002\027\003" +
    "\000\002\027\005\000\002\027\005\000\002\027\003\000" +
    "\002\030\004\000\002\031\006\000\002\032\005\000\002" +
    "\032\005\000\002\032\005\000\002\032\005\000\002\032" +
    "\005\000\002\032\005\000\002\033\005\000\002\033\006" +
    "\000\002\011\012\000\002\012\012\000\002\013\014" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0145\000\006\003\004\017\005\001\002\000\046\003" +
    "\ufffc\010\ufffc\012\ufffc\013\ufffc\014\ufffc\015\ufffc\016\ufffc" +
    "\027\ufffc\030\ufffc\034\ufffc\037\ufffc\040\ufffc\041\ufffc\043" +
    "\ufffc\062\ufffc\063\ufffc\070\ufffc\075\ufffc\001\002\000\006" +
    "\003\010\075\011\001\002\000\004\002\007\001\002\000" +
    "\004\002\001\001\002\000\046\003\ufffe\010\ufffe\012\ufffe" +
    "\013\ufffe\014\ufffe\015\ufffe\016\ufffe\027\ufffe\030\ufffe\034" +
    "\ufffe\037\ufffe\040\ufffe\041\ufffe\043\ufffe\062\ufffe\063\ufffe" +
    "\070\ufffe\075\ufffe\001\002\000\004\067\000\001\002\000" +
    "\004\067\013\001\002\000\004\005\014\001\002\000\004" +
    "\065\015\001\002\000\004\022\016\001\002\000\004\073" +
    "\u013e\001\002\000\004\066\020\001\002\000\004\067\021" +
    "\001\002\000\046\003\040\010\045\012\022\013\044\014" +
    "\027\015\032\016\023\027\030\030\025\034\042\037\047" +
    "\040\034\041\035\043\046\062\036\063\037\070\uffa9\075" +
    "\041\001\002\000\004\012\u0131\001\002\000\050\003\uffdd" +
    "\010\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd\016\uffdd\027" +
    "\uffdd\030\uffdd\034\uffdd\037\uffdd\040\uffdd\041\uffdd\043\uffdd" +
    "\062\uffdd\063\uffdd\070\uffdd\071\u012d\075\uffdd\001\002\000" +
    "\004\070\uffef\001\002\000\006\031\u0117\032\u0118\001\002" +
    "\000\004\070\u0102\001\002\000\004\014\364\001\002\000" +
    "\006\031\335\032\336\001\002\000\050\003\uffea\010\uffea" +
    "\012\uffea\013\uffea\014\uffea\015\uffea\016\uffea\027\uffea\030" +
    "\uffea\034\uffea\037\uffea\040\uffea\041\uffea\043\uffea\062\uffea" +
    "\063\uffea\070\uffea\071\331\075\uffea\001\002\000\004\023" +
    "\204\001\002\000\050\003\uffed\010\uffed\012\uffed\013\uffed" +
    "\014\uffed\015\uffed\016\uffed\027\uffed\030\uffed\034\uffed\037" +
    "\uffed\040\uffed\041\uffed\043\uffed\062\uffed\063\uffed\070\uffed" +
    "\071\320\075\uffed\001\002\000\004\042\313\001\002\000" +
    "\004\023\204\001\002\000\004\075\303\001\002\000\004" +
    "\075\300\001\002\000\010\064\uff9a\071\uffae\075\uffac\001" +
    "\002\000\012\020\242\062\241\063\243\064\240\001\002" +
    "\000\006\035\226\036\227\001\002\000\052\003\uff98\010" +
    "\uff98\012\uff98\013\uff98\014\uff98\015\uff98\016\uff98\027\uff98" +
    "\030\uff98\034\uff98\037\uff98\040\uff98\041\uff98\043\uff98\062" +
    "\uff98\063\uff98\064\223\070\uff98\071\uff98\075\uff98\001\002" +
    "\000\004\013\177\001\002\000\004\065\066\001\002\000" +
    "\010\031\055\032\060\042\056\001\002\000\004\042\050" +
    "\001\002\000\050\003\uffda\010\uffda\012\uffda\013\uffda\014" +
    "\uffda\015\uffda\016\uffda\027\uffda\030\uffda\034\uffda\037\uffda" +
    "\040\uffda\041\uffda\043\uffda\062\uffda\063\uffda\070\uffda\071" +
    "\051\075\uffda\001\002\000\046\003\040\010\045\012\022" +
    "\013\044\014\027\015\032\016\023\027\030\030\025\034" +
    "\042\037\047\040\034\041\035\043\046\062\036\063\037" +
    "\070\uffa9\075\041\001\002\000\046\003\040\010\045\012" +
    "\022\013\044\014\027\015\032\016\023\027\030\030\025" +
    "\034\042\037\047\040\034\041\035\043\046\062\036\063" +
    "\037\070\uffa9\075\041\001\002\000\004\070\uffd9\001\002" +
    "\000\004\070\uffdb\001\002\000\050\003\uff9c\010\uff9c\012" +
    "\uff9c\013\uff9c\014\uff9c\015\uff9c\016\uff9c\027\uff9c\030\uff9c" +
    "\034\uff9c\037\uff9c\040\uff9c\041\uff9c\043\uff9c\062\uff9c\063" +
    "\uff9c\070\uff9c\071\uff9c\075\uff9c\001\002\000\050\003\uff9e" +
    "\010\uff9e\012\uff9e\013\uff9e\014\uff9e\015\uff9e\016\uff9e\027" +
    "\uff9e\030\uff9e\034\uff9e\037\uff9e\040\uff9e\041\uff9e\043\uff9e" +
    "\062\uff9e\063\uff9e\070\uff9e\071\uff9e\075\uff9e\001\002\000" +
    "\050\003\uffb0\010\uffb0\012\uffb0\013\uffb0\014\uffb0\015\uffb0" +
    "\016\uffb0\027\uffb0\030\uffb0\034\uffb0\037\uffb0\040\uffb0\041" +
    "\uffb0\043\uffb0\062\uffb0\063\uffb0\070\uffb0\071\061\075\uffb0" +
    "\001\002\000\050\003\uff9d\010\uff9d\012\uff9d\013\uff9d\014" +
    "\uff9d\015\uff9d\016\uff9d\027\uff9d\030\uff9d\034\uff9d\037\uff9d" +
    "\040\uff9d\041\uff9d\043\uff9d\062\uff9d\063\uff9d\070\uff9d\071" +
    "\uff9d\075\uff9d\001\002\000\046\003\040\010\045\012\022" +
    "\013\044\014\027\015\032\016\023\027\030\030\025\034" +
    "\042\037\047\040\034\041\035\043\046\062\036\063\037" +
    "\070\uffa9\075\041\001\002\000\046\003\040\010\045\012" +
    "\022\013\044\014\027\015\032\016\023\027\030\030\025" +
    "\034\042\037\047\040\034\041\035\043\046\062\036\063" +
    "\037\070\uffa9\075\041\001\002\000\004\070\uffaf\001\002" +
    "\000\004\070\uffb1\001\002\000\046\003\040\010\045\012" +
    "\022\013\044\014\027\015\032\016\023\027\030\030\025" +
    "\034\042\037\047\040\034\041\035\043\046\062\036\063" +
    "\037\070\uffa9\075\041\001\002\000\012\003\071\057\075" +
    "\074\076\075\074\001\002\000\004\066\162\001\002\000" +
    "\014\060\156\061\157\066\uff7a\072\uff7a\075\uff7a\001\002" +
    "\000\010\066\uff77\072\uff77\075\uff77\001\002\000\014\060" +
    "\152\061\153\066\uff7d\072\uff7d\075\uff7d\001\002\000\014" +
    "\060\146\061\147\066\uff80\072\uff80\075\uff80\001\002\000" +
    "\026\045\111\046\112\047\107\050\110\051\114\052\115" +
    "\060\113\066\uff82\072\uff82\075\uff82\001\002\000\006\065" +
    "\104\075\103\001\002\000\014\060\077\061\100\066\uff85" +
    "\072\uff85\075\uff85\001\002\000\012\003\071\057\075\074" +
    "\076\075\074\001\002\000\012\003\071\057\075\074\076" +
    "\075\074\001\002\000\010\066\uff83\072\uff83\075\uff83\001" +
    "\002\000\010\066\uff84\072\uff84\075\uff84\001\002\000\014" +
    "\060\uff76\061\uff76\066\uff76\072\uff76\075\uff76\001\002\000" +
    "\012\003\071\057\075\074\076\075\074\001\002\000\004" +
    "\066\106\001\002\000\014\060\uff75\061\uff75\066\uff75\072" +
    "\uff75\075\uff75\001\002\000\012\003\117\065\122\073\116" +
    "\075\120\001\002\000\012\003\117\065\122\073\116\075" +
    "\120\001\002\000\012\003\117\065\122\073\116\075\120" +
    "\001\002\000\012\003\117\065\122\073\116\075\120\001" +
    "\002\000\012\003\071\057\075\074\076\075\074\001\002" +
    "\000\012\003\117\065\122\073\116\075\120\001\002\000" +
    "\012\003\117\065\122\073\116\075\120\001\002\000\070" +
    "\003\uff8a\010\uff8a\012\uff8a\013\uff8a\014\uff8a\015\uff8a\016" +
    "\uff8a\027\uff8a\030\uff8a\034\uff8a\037\uff8a\040\uff8a\041\uff8a" +
    "\043\uff8a\053\127\054\125\055\130\056\126\060\uff8a\061" +
    "\uff8a\062\uff8a\063\uff8a\066\uff8a\070\uff8a\071\uff8a\072\uff8a" +
    "\075\uff8a\001\002\000\060\003\uff88\010\uff88\012\uff88\013" +
    "\uff88\014\uff88\015\uff88\016\uff88\027\uff88\030\uff88\034\uff88" +
    "\037\uff88\040\uff88\041\uff88\043\uff88\060\uff88\061\uff88\062" +
    "\uff88\063\uff88\066\uff88\070\uff88\071\uff88\072\uff88\075\uff88" +
    "\001\002\000\060\003\uff89\010\uff89\012\uff89\013\uff89\014" +
    "\uff89\015\uff89\016\uff89\027\uff89\030\uff89\034\uff89\037\uff89" +
    "\040\uff89\041\uff89\043\uff89\060\uff89\061\uff89\062\uff89\063" +
    "\uff89\066\uff89\070\uff89\071\uff89\072\uff89\075\uff89\001\002" +
    "\000\014\060\uff6f\061\uff6f\066\uff6f\072\uff6f\075\uff6f\001" +
    "\002\000\012\003\117\065\122\073\116\075\120\001\002" +
    "\000\004\066\124\001\002\000\060\003\uff8f\010\uff8f\012" +
    "\uff8f\013\uff8f\014\uff8f\015\uff8f\016\uff8f\027\uff8f\030\uff8f" +
    "\034\uff8f\037\uff8f\040\uff8f\041\uff8f\043\uff8f\060\uff8f\061" +
    "\uff8f\062\uff8f\063\uff8f\066\uff8f\070\uff8f\071\uff8f\072\uff8f" +
    "\075\uff8f\001\002\000\012\003\117\065\122\073\116\075" +
    "\120\001\002\000\012\003\117\065\122\073\116\075\120" +
    "\001\002\000\012\003\117\065\122\073\116\075\120\001" +
    "\002\000\012\003\117\065\122\073\116\075\120\001\002" +
    "\000\060\003\uff8c\010\uff8c\012\uff8c\013\uff8c\014\uff8c\015" +
    "\uff8c\016\uff8c\027\uff8c\030\uff8c\034\uff8c\037\uff8c\040\uff8c" +
    "\041\uff8c\043\uff8c\060\uff8c\061\uff8c\062\uff8c\063\uff8c\066" +
    "\uff8c\070\uff8c\071\uff8c\072\uff8c\075\uff8c\001\002\000\060" +
    "\003\uff8e\010\uff8e\012\uff8e\013\uff8e\014\uff8e\015\uff8e\016" +
    "\uff8e\027\uff8e\030\uff8e\034\uff8e\037\uff8e\040\uff8e\041\uff8e" +
    "\043\uff8e\060\uff8e\061\uff8e\062\uff8e\063\uff8e\066\uff8e\070" +
    "\uff8e\071\uff8e\072\uff8e\075\uff8e\001\002\000\060\003\uff8b" +
    "\010\uff8b\012\uff8b\013\uff8b\014\uff8b\015\uff8b\016\uff8b\027" +
    "\uff8b\030\uff8b\034\uff8b\037\uff8b\040\uff8b\041\uff8b\043\uff8b" +
    "\060\uff8b\061\uff8b\062\uff8b\063\uff8b\066\uff8b\070\uff8b\071" +
    "\uff8b\072\uff8b\075\uff8b\001\002\000\060\003\uff8d\010\uff8d" +
    "\012\uff8d\013\uff8d\014\uff8d\015\uff8d\016\uff8d\027\uff8d\030" +
    "\uff8d\034\uff8d\037\uff8d\040\uff8d\041\uff8d\043\uff8d\060\uff8d" +
    "\061\uff8d\062\uff8d\063\uff8d\066\uff8d\070\uff8d\071\uff8d\072" +
    "\uff8d\075\uff8d\001\002\000\014\060\uff70\061\uff70\066\uff70" +
    "\072\uff70\075\uff70\001\002\000\004\075\137\001\002\000" +
    "\004\061\140\001\002\000\012\003\071\057\075\074\076" +
    "\075\074\001\002\000\010\066\uff81\072\uff81\075\uff81\001" +
    "\002\000\014\060\uff73\061\uff73\066\uff73\072\uff73\075\uff73" +
    "\001\002\000\014\060\uff74\061\uff74\066\uff74\072\uff74\075" +
    "\uff74\001\002\000\014\060\uff71\061\uff71\066\uff71\072\uff71" +
    "\075\uff71\001\002\000\014\060\uff72\061\uff72\066\uff72\072" +
    "\uff72\075\uff72\001\002\000\012\003\071\057\075\074\076" +
    "\075\074\001\002\000\012\003\071\057\075\074\076\075" +
    "\074\001\002\000\010\066\uff7e\072\uff7e\075\uff7e\001\002" +
    "\000\010\066\uff7f\072\uff7f\075\uff7f\001\002\000\012\003" +
    "\071\057\075\074\076\075\074\001\002\000\012\003\071" +
    "\057\075\074\076\075\074\001\002\000\010\066\uff7b\072" +
    "\uff7b\075\uff7b\001\002\000\010\066\uff7c\072\uff7c\075\uff7c" +
    "\001\002\000\012\003\071\057\075\074\076\075\074\001" +
    "\002\000\012\003\071\057\075\074\076\075\074\001\002" +
    "\000\010\066\uff78\072\uff78\075\uff78\001\002\000\010\066" +
    "\uff79\072\uff79\075\uff79\001\002\000\004\067\163\001\002" +
    "\000\046\003\040\010\045\012\022\013\044\014\027\015" +
    "\032\016\023\027\030\030\025\034\042\037\047\040\034" +
    "\041\035\043\046\062\036\063\037\070\uffa9\075\041\001" +
    "\002\000\004\070\165\001\002\000\050\003\uff87\010\uff87" +
    "\011\167\012\uff87\013\uff87\014\uff87\015\uff87\016\uff87\027" +
    "\uff87\030\uff87\034\uff87\037\uff87\040\uff87\041\uff87\043\uff87" +
    "\062\uff87\063\uff87\070\uff87\075\uff87\001\002\000\046\003" +
    "\uff86\010\uff86\012\uff86\013\uff86\014\uff86\015\uff86\016\uff86" +
    "\027\uff86\030\uff86\034\uff86\037\uff86\040\uff86\041\uff86\043" +
    "\uff86\062\uff86\063\uff86\070\uff86\075\uff86\001\002\000\006" +
    "\010\170\067\171\001\002\000\004\065\066\001\002\000" +
    "\046\003\040\010\045\012\022\013\044\014\027\015\032" +
    "\016\023\027\030\030\025\034\042\037\047\040\034\041" +
    "\035\043\046\062\036\063\037\070\uffa9\075\041\001\002" +
    "\000\004\070\173\001\002\000\046\003\uff6d\010\uff6d\012" +
    "\uff6d\013\uff6d\014\uff6d\015\uff6d\016\uff6d\027\uff6d\030\uff6d" +
    "\034\uff6d\037\uff6d\040\uff6d\041\uff6d\043\uff6d\062\uff6d\063" +
    "\uff6d\070\uff6d\075\uff6d\001\002\000\046\003\uff6e\010\uff6e" +
    "\012\uff6e\013\uff6e\014\uff6e\015\uff6e\016\uff6e\027\uff6e\030" +
    "\uff6e\034\uff6e\037\uff6e\040\uff6e\041\uff6e\043\uff6e\062\uff6e" +
    "\063\uff6e\070\uff6e\075\uff6e\001\002\000\004\070\uffe8\001" +
    "\002\000\050\003\uffe3\010\uffe3\012\uffe3\013\uffe3\014\uffe3" +
    "\015\uffe3\016\uffe3\027\uffe3\030\uffe3\034\uffe3\037\uffe3\040" +
    "\uffe3\041\uffe3\043\uffe3\062\uffe3\063\uffe3\070\uffe3\071\216" +
    "\075\uffe3\001\002\000\004\065\200\001\002\000\012\003" +
    "\071\057\075\074\076\075\074\001\002\000\004\072\202" +
    "\001\002\000\004\023\204\001\002\000\004\072\213\001" +
    "\002\000\004\073\205\001\002\000\012\003\207\024\212" +
    "\025\206\026\210\001\002\000\054\003\uffa1\010\uffa1\012" +
    "\uffa1\013\uffa1\014\uffa1\015\uffa1\016\uffa1\027\uffa1\030\uffa1" +
    "\034\uffa1\037\uffa1\040\uffa1\041\uffa1\043\uffa1\062\uffa1\063" +
    "\uffa1\066\uffa1\070\uffa1\071\uffa1\072\uffa1\075\uffa1\001\002" +
    "\000\054\003\uff9f\010\uff9f\012\uff9f\013\uff9f\014\uff9f\015" +
    "\uff9f\016\uff9f\027\uff9f\030\uff9f\034\uff9f\037\uff9f\040\uff9f" +
    "\041\uff9f\043\uff9f\062\uff9f\063\uff9f\066\uff9f\070\uff9f\071" +
    "\uff9f\072\uff9f\075\uff9f\001\002\000\054\003\uffa0\010\uffa0" +
    "\012\uffa0\013\uffa0\014\uffa0\015\uffa0\016\uffa0\027\uffa0\030" +
    "\uffa0\034\uffa0\037\uffa0\040\uffa0\041\uffa0\043\uffa0\062\uffa0" +
    "\063\uffa0\066\uffa0\070\uffa0\071\uffa0\072\uffa0\075\uffa0\001" +
    "\002\000\052\003\uffa3\010\uffa3\012\uffa3\013\uffa3\014\uffa3" +
    "\015\uffa3\016\uffa3\027\uffa3\030\uffa3\034\uffa3\037\uffa3\040" +
    "\uffa3\041\uffa3\043\uffa3\062\uffa3\063\uffa3\070\uffa3\071\uffa3" +
    "\072\uffa3\075\uffa3\001\002\000\054\003\uffa2\010\uffa2\012" +
    "\uffa2\013\uffa2\014\uffa2\015\uffa2\016\uffa2\027\uffa2\030\uffa2" +
    "\034\uffa2\037\uffa2\040\uffa2\041\uffa2\043\uffa2\062\uffa2\063" +
    "\uffa2\066\uffa2\070\uffa2\071\uffa2\072\uffa2\075\uffa2\001\002" +
    "\000\012\003\071\057\075\074\076\075\074\001\002\000" +
    "\004\066\215\001\002\000\050\003\uff6b\010\uff6b\012\uff6b" +
    "\013\uff6b\014\uff6b\015\uff6b\016\uff6b\027\uff6b\030\uff6b\034" +
    "\uff6b\037\uff6b\040\uff6b\041\uff6b\043\uff6b\062\uff6b\063\uff6b" +
    "\070\uff6b\071\uff6b\075\uff6b\001\002\000\046\003\040\010" +
    "\045\012\022\013\044\014\027\015\032\016\023\027\030" +
    "\030\025\034\042\037\047\040\034\041\035\043\046\062" +
    "\036\063\037\070\uffa9\075\041\001\002\000\046\003\040" +
    "\010\045\012\022\013\044\014\027\015\032\016\023\027" +
    "\030\030\025\034\042\037\047\040\034\041\035\043\046" +
    "\062\036\063\037\070\uffa9\075\041\001\002\000\004\070" +
    "\uffe2\001\002\000\004\070\uffe4\001\002\000\050\003\uff97" +
    "\010\uff97\012\uff97\013\uff97\014\uff97\015\uff97\016\uff97\027" +
    "\uff97\030\uff97\034\uff97\037\uff97\040\uff97\041\uff97\043\uff97" +
    "\062\uff97\063\uff97\070\uff97\071\uff97\075\uff97\001\002\000" +
    "\014\003\117\065\122\073\116\074\225\075\120\001\002" +
    "\000\050\003\uff94\010\uff94\012\uff94\013\uff94\014\uff94\015" +
    "\uff94\016\uff94\027\uff94\030\uff94\034\uff94\037\uff94\040\uff94" +
    "\041\uff94\043\uff94\062\uff94\063\uff94\070\uff94\071\uff94\075" +
    "\uff94\001\002\000\050\003\uff95\010\uff95\012\uff95\013\uff95" +
    "\014\uff95\015\uff95\016\uff95\027\uff95\030\uff95\034\uff95\037" +
    "\uff95\040\uff95\041\uff95\043\uff95\062\uff95\063\uff95\070\uff95" +
    "\071\uff95\075\uff95\001\002\000\050\003\uffbc\010\uffbc\012" +
    "\uffbc\013\uffbc\014\uffbc\015\uffbc\016\uffbc\027\uffbc\030\uffbc" +
    "\034\uffbc\037\uffbc\040\uffbc\041\uffbc\043\uffbc\062\uffbc\063" +
    "\uffbc\070\uffbc\071\235\075\uffbc\001\002\000\050\003\uffb9" +
    "\010\uffb9\012\uffb9\013\uffb9\014\uffb9\015\uffb9\016\uffb9\027" +
    "\uffb9\030\uffb9\034\uffb9\037\uffb9\040\uffb9\041\uffb9\043\uffb9" +
    "\062\uffb9\063\uffb9\070\uffb9\071\230\075\uffb9\001\002\000" +
    "\046\003\040\010\045\012\022\013\044\014\027\015\032" +
    "\016\023\027\030\030\025\034\042\037\047\040\034\041" +
    "\035\043\046\062\036\063\037\070\uffa9\075\041\001\002" +
    "\000\046\003\040\010\045\012\022\013\044\014\027\015" +
    "\032\016\023\027\030\030\025\034\042\037\047\040\034" +
    "\041\035\043\046\062\036\063\037\070\uffa9\075\041\001" +
    "\002\000\004\070\uffb8\001\002\000\004\070\uffba\001\002" +
    "\000\046\003\040\010\045\012\022\013\044\014\027\015" +
    "\032\016\023\027\030\030\025\034\042\037\047\040\034" +
    "\041\035\043\046\062\036\063\037\070\uffa9\075\041\001" +
    "\002\000\046\003\040\010\045\012\022\013\044\014\027" +
    "\015\032\016\023\027\030\030\025\034\042\037\047\040" +
    "\034\041\035\043\046\062\036\063\037\070\uffa9\075\041" +
    "\001\002\000\004\070\uffbd\001\002\000\004\070\uffbb\001" +
    "\002\000\012\003\117\065\122\073\116\075\120\001\002" +
    "\000\004\071\254\001\002\000\004\021\247\001\002\000" +
    "\004\071\244\001\002\000\046\003\040\010\045\012\022" +
    "\013\044\014\027\015\032\016\023\027\030\030\025\034" +
    "\042\037\047\040\034\041\035\043\046\062\036\063\037" +
    "\070\uffa9\075\041\001\002\000\004\070\uffa7\001\002\000" +
    "\056\003\uff96\010\uff96\012\uff96\013\uff96\014\uff96\015\uff96" +
    "\016\uff96\027\uff96\030\uff96\034\uff96\037\uff96\040\uff96\041" +
    "\uff96\043\uff96\062\uff96\063\uff96\064\uff96\066\uff96\070\uff96" +
    "\071\uff96\072\uff96\075\uff96\001\002\000\010\003\251\006" +
    "\253\007\252\001\002\000\056\003\uff93\010\uff93\012\uff93" +
    "\013\uff93\014\uff93\015\uff93\016\uff93\027\uff93\030\uff93\034" +
    "\uff93\037\uff93\040\uff93\041\uff93\043\uff93\062\uff93\063\uff93" +
    "\064\uff93\066\uff93\070\uff93\071\uff93\072\uff93\075\uff93\001" +
    "\002\000\056\003\uff90\010\uff90\012\uff90\013\uff90\014\uff90" +
    "\015\uff90\016\uff90\027\uff90\030\uff90\034\uff90\037\uff90\040" +
    "\uff90\041\uff90\043\uff90\062\uff90\063\uff90\064\uff90\066\uff90" +
    "\070\uff90\071\uff90\072\uff90\075\uff90\001\002\000\056\003" +
    "\uff91\010\uff91\012\uff91\013\uff91\014\uff91\015\uff91\016\uff91" +
    "\027\uff91\030\uff91\034\uff91\037\uff91\040\uff91\041\uff91\043" +
    "\uff91\062\uff91\063\uff91\064\uff91\066\uff91\070\uff91\071\uff91" +
    "\072\uff91\075\uff91\001\002\000\056\003\uff92\010\uff92\012" +
    "\uff92\013\uff92\014\uff92\015\uff92\016\uff92\027\uff92\030\uff92" +
    "\034\uff92\037\uff92\040\uff92\041\uff92\043\uff92\062\uff92\063" +
    "\uff92\064\uff92\066\uff92\070\uff92\071\uff92\072\uff92\075\uff92" +
    "\001\002\000\046\003\040\010\045\012\022\013\044\014" +
    "\027\015\032\016\023\027\030\030\025\034\042\037\047" +
    "\040\034\041\035\043\046\062\036\063\037\070\uffa9\075" +
    "\041\001\002\000\004\070\uffa8\001\002\000\050\003\uff9b" +
    "\010\uff9b\012\uff9b\013\uff9b\014\uff9b\015\uff9b\016\uff9b\027" +
    "\uff9b\030\uff9b\034\uff9b\037\uff9b\040\uff9b\041\uff9b\043\uff9b" +
    "\062\uff9b\063\uff9b\070\uff9b\071\uff9b\075\uff9b\001\002\000" +
    "\004\064\277\001\002\000\004\075\264\001\002\000\004" +
    "\071\262\001\002\000\046\003\040\010\045\012\022\013" +
    "\044\014\027\015\032\016\023\027\030\030\025\034\042" +
    "\037\047\040\034\041\035\043\046\062\036\063\037\070" +
    "\uffa9\075\041\001\002\000\004\070\uffad\001\002\000\004" +
    "\065\uffab\001\002\000\004\065\266\001\002\000\006\066" +
    "\ufff0\075\270\001\002\000\004\066\274\001\002\000\004" +
    "\020\242\001\002\000\006\066\ufff1\072\272\001\002\000" +
    "\006\066\ufff0\075\270\001\002\000\004\066\ufff2\001\002" +
    "\000\004\067\275\001\002\000\046\003\040\010\045\012" +
    "\022\013\044\014\027\015\032\016\023\027\030\030\025" +
    "\034\042\037\047\040\034\041\035\043\046\062\036\063" +
    "\037\070\uffa9\075\041\001\002\000\004\070\uffaa\001\002" +
    "\000\050\003\uff99\010\uff99\012\uff99\013\uff99\014\uff99\015" +
    "\uff99\016\uff99\027\uff99\030\uff99\034\uff99\037\uff99\040\uff99" +
    "\041\uff99\043\uff99\062\uff99\063\uff99\070\uff99\071\uff99\075" +
    "\uff99\001\002\000\004\071\301\001\002\000\046\003\040" +
    "\010\045\012\022\013\044\014\027\015\032\016\023\027" +
    "\030\030\025\034\042\037\047\040\034\041\035\043\046" +
    "\062\036\063\037\070\uffa9\075\041\001\002\000\004\070" +
    "\uffa5\001\002\000\004\071\304\001\002\000\046\003\040" +
    "\010\045\012\022\013\044\014\027\015\032\016\023\027" +
    "\030\030\025\034\042\037\047\040\034\041\035\043\046" +
    "\062\036\063\037\070\uffa9\075\041\001\002\000\004\070" +
    "\uffa6\001\002\000\050\003\uffb6\010\uffb6\012\uffb6\013\uffb6" +
    "\014\uffb6\015\uffb6\016\uffb6\027\uffb6\030\uffb6\034\uffb6\037" +
    "\uffb6\040\uffb6\041\uffb6\043\uffb6\062\uffb6\063\uffb6\070\uffb6" +
    "\071\307\075\uffb6\001\002\000\046\003\040\010\045\012" +
    "\022\013\044\014\027\015\032\016\023\027\030\030\025" +
    "\034\042\037\047\040\034\041\035\043\046\062\036\063" +
    "\037\070\uffa9\075\041\001\002\000\046\003\040\010\045" +
    "\012\022\013\044\014\027\015\032\016\023\027\030\030" +
    "\025\034\042\037\047\040\034\041\035\043\046\062\036" +
    "\063\037\070\uffa9\075\041\001\002\000\004\070\uffb5\001" +
    "\002\000\004\070\uffb7\001\002\000\050\003\uffd7\010\uffd7" +
    "\012\uffd7\013\uffd7\014\uffd7\015\uffd7\016\uffd7\027\uffd7\030" +
    "\uffd7\034\uffd7\037\uffd7\040\uffd7\041\uffd7\043\uffd7\062\uffd7" +
    "\063\uffd7\070\uffd7\071\314\075\uffd7\001\002\000\046\003" +
    "\040\010\045\012\022\013\044\014\027\015\032\016\023" +
    "\027\030\030\025\034\042\037\047\040\034\041\035\043" +
    "\046\062\036\063\037\070\uffa9\075\041\001\002\000\046" +
    "\003\040\010\045\012\022\013\044\014\027\015\032\016" +
    "\023\027\030\030\025\034\042\037\047\040\034\041\035" +
    "\043\046\062\036\063\037\070\uffa9\075\041\001\002\000" +
    "\004\070\uffd6\001\002\000\004\070\uffd8\001\002\000\046" +
    "\003\040\010\045\012\022\013\044\014\027\015\032\016" +
    "\023\027\030\030\025\034\042\037\047\040\034\041\035" +
    "\043\046\062\036\063\037\070\uffa9\075\041\001\002\000" +
    "\046\003\040\010\045\012\022\013\044\014\027\015\032" +
    "\016\023\027\030\030\025\034\042\037\047\040\034\041" +
    "\035\043\046\062\036\063\037\070\uffa9\075\041\001\002" +
    "\000\004\070\uffec\001\002\000\004\070\uffee\001\002\000" +
    "\050\003\uffb3\010\uffb3\012\uffb3\013\uffb3\014\uffb3\015\uffb3" +
    "\016\uffb3\027\uffb3\030\uffb3\034\uffb3\037\uffb3\040\uffb3\041" +
    "\uffb3\043\uffb3\062\uffb3\063\uffb3\070\uffb3\071\325\075\uffb3" +
    "\001\002\000\046\003\040\010\045\012\022\013\044\014" +
    "\027\015\032\016\023\027\030\030\025\034\042\037\047" +
    "\040\034\041\035\043\046\062\036\063\037\070\uffa9\075" +
    "\041\001\002\000\046\003\040\010\045\012\022\013\044" +
    "\014\027\015\032\016\023\027\030\030\025\034\042\037" +
    "\047\040\034\041\035\043\046\062\036\063\037\070\uffa9" +
    "\075\041\001\002\000\004\070\uffb2\001\002\000\004\070" +
    "\uffb4\001\002\000\046\003\040\010\045\012\022\013\044" +
    "\014\027\015\032\016\023\027\030\030\025\034\042\037" +
    "\047\040\034\041\035\043\046\062\036\063\037\070\uffa9" +
    "\075\041\001\002\000\046\003\040\010\045\012\022\013" +
    "\044\014\027\015\032\016\023\027\030\030\025\034\042" +
    "\037\047\040\034\041\035\043\046\062\036\063\037\070" +
    "\uffa9\075\041\001\002\000\004\070\uffe9\001\002\000\004" +
    "\070\uffeb\001\002\000\006\023\204\033\352\001\002\000" +
    "\006\023\204\033\340\001\002\000\050\003\uffd4\010\uffd4" +
    "\012\uffd4\013\uffd4\014\uffd4\015\uffd4\016\uffd4\027\uffd4\030" +
    "\uffd4\034\uffd4\037\uffd4\040\uffd4\041\uffd4\043\uffd4\062\uffd4" +
    "\063\uffd4\070\uffd4\071\345\075\uffd4\001\002\000\050\003" +
    "\uffd1\010\uffd1\012\uffd1\013\uffd1\014\uffd1\015\uffd1\016\uffd1" +
    "\027\uffd1\030\uffd1\034\uffd1\037\uffd1\040\uffd1\041\uffd1\043" +
    "\uffd1\062\uffd1\063\uffd1\070\uffd1\071\341\075\uffd1\001\002" +
    "\000\046\003\040\010\045\012\022\013\044\014\027\015" +
    "\032\016\023\027\030\030\025\034\042\037\047\040\034" +
    "\041\035\043\046\062\036\063\037\070\uffa9\075\041\001" +
    "\002\000\046\003\040\010\045\012\022\013\044\014\027" +
    "\015\032\016\023\027\030\030\025\034\042\037\047\040" +
    "\034\041\035\043\046\062\036\063\037\070\uffa9\075\041" +
    "\001\002\000\004\070\uffd0\001\002\000\004\070\uffd2\001" +
    "\002\000\046\003\040\010\045\012\022\013\044\014\027" +
    "\015\032\016\023\027\030\030\025\034\042\037\047\040" +
    "\034\041\035\043\046\062\036\063\037\070\uffa9\075\041" +
    "\001\002\000\046\003\040\010\045\012\022\013\044\014" +
    "\027\015\032\016\023\027\030\030\025\034\042\037\047" +
    "\040\034\041\035\043\046\062\036\063\037\070\uffa9\075" +
    "\041\001\002\000\004\070\uffd3\001\002\000\004\070\uffd5" +
    "\001\002\000\050\003\uffc8\010\uffc8\012\uffc8\013\uffc8\014" +
    "\uffc8\015\uffc8\016\uffc8\027\uffc8\030\uffc8\034\uffc8\037\uffc8" +
    "\040\uffc8\041\uffc8\043\uffc8\062\uffc8\063\uffc8\070\uffc8\071" +
    "\360\075\uffc8\001\002\000\050\003\uffc5\010\uffc5\012\uffc5" +
    "\013\uffc5\014\uffc5\015\uffc5\016\uffc5\027\uffc5\030\uffc5\034" +
    "\uffc5\037\uffc5\040\uffc5\041\uffc5\043\uffc5\062\uffc5\063\uffc5" +
    "\070\uffc5\071\354\075\uffc5\001\002\000\046\003\040\010" +
    "\045\012\022\013\044\014\027\015\032\016\023\027\030" +
    "\030\025\034\042\037\047\040\034\041\035\043\046\062" +
    "\036\063\037\070\uffa9\075\041\001\002\000\046\003\040" +
    "\010\045\012\022\013\044\014\027\015\032\016\023\027" +
    "\030\030\025\034\042\037\047\040\034\041\035\043\046" +
    "\062\036\063\037\070\uffa9\075\041\001\002\000\004\070" +
    "\uffc6\001\002\000\004\070\uffc4\001\002\000\046\003\040" +
    "\010\045\012\022\013\044\014\027\015\032\016\023\027" +
    "\030\030\025\034\042\037\047\040\034\041\035\043\046" +
    "\062\036\063\037\070\uffa9\075\041\001\002\000\046\003" +
    "\040\010\045\012\022\013\044\014\027\015\032\016\023" +
    "\027\030\030\025\034\042\037\047\040\034\041\035\043" +
    "\046\062\036\063\037\070\uffa9\075\041\001\002\000\004" +
    "\070\uffc9\001\002\000\004\070\uffc7\001\002\000\050\003" +
    "\uffe0\010\uffe0\012\uffe0\013\uffe0\014\uffe0\015\uffe0\016\uffe0" +
    "\027\uffe0\030\uffe0\034\uffe0\037\uffe0\040\uffe0\041\uffe0\043" +
    "\uffe0\062\uffe0\063\uffe0\070\uffe0\071\377\075\uffe0\001\002" +
    "\000\004\065\365\001\002\000\012\003\071\057\075\074" +
    "\076\075\074\001\002\000\004\072\367\001\002\000\004" +
    "\023\204\001\002\000\004\072\371\001\002\000\012\003" +
    "\071\057\075\074\076\075\074\001\002\000\004\072\373" +
    "\001\002\000\012\003\071\057\075\074\076\075\074\001" +
    "\002\000\004\066\375\001\002\000\050\003\uff6a\010\uff6a" +
    "\012\uff6a\013\uff6a\014\uff6a\015\uff6a\016\uff6a\027\uff6a\030" +
    "\uff6a\034\uff6a\037\uff6a\040\uff6a\041\uff6a\043\uff6a\062\uff6a" +
    "\063\uff6a\070\uff6a\071\uff6a\075\uff6a\001\002\000\046\003" +
    "\040\010\045\012\022\013\044\014\027\015\032\016\023" +
    "\027\030\030\025\034\042\037\047\040\034\041\035\043" +
    "\046\062\036\063\037\070\uffa9\075\041\001\002\000\046" +
    "\003\040\010\045\012\022\013\044\014\027\015\032\016" +
    "\023\027\030\030\025\034\042\037\047\040\034\041\035" +
    "\043\046\062\036\063\037\070\uffa9\075\041\001\002\000" +
    "\004\070\uffe1\001\002\000\004\070\uffdf\001\002\000\010" +
    "\003\u0104\044\u0105\070\u0106\001\002\000\004\002\uffff\001" +
    "\002\000\006\004\ufff9\075\ufff6\001\002\000\004\075\u0108" +
    "\001\002\000\004\004\u0107\001\002\000\004\002\ufffa\001" +
    "\002\000\004\065\ufff4\001\002\000\010\003\u0104\044\u0105" +
    "\070\u0106\001\002\000\004\002\ufff7\001\002\000\004\065" +
    "\u010c\001\002\000\006\066\ufff0\075\270\001\002\000\004" +
    "\066\u010e\001\002\000\004\067\u010f\001\002\000\046\003" +
    "\040\010\045\012\022\013\044\014\027\015\032\016\023" +
    "\027\030\030\025\034\042\037\047\040\034\041\035\043" +
    "\046\062\036\063\037\070\uffa9\075\041\001\002\000\004" +
    "\070\u0111\001\002\000\010\003\ufff3\044\ufff3\070\ufff3\001" +
    "\002\000\004\004\u0116\001\002\000\004\075\u0108\001\002" +
    "\000\010\003\u0104\044\u0105\070\u0106\001\002\000\004\002" +
    "\ufff5\001\002\000\004\002\ufff8\001\002\000\006\023\204" +
    "\033\u0124\001\002\000\006\023\204\033\u011a\001\002\000" +
    "\050\003\uffce\010\uffce\012\uffce\013\uffce\014\uffce\015\uffce" +
    "\016\uffce\027\uffce\030\uffce\034\uffce\037\uffce\040\uffce\041" +
    "\uffce\043\uffce\062\uffce\063\uffce\070\uffce\071\u011f\075\uffce" +
    "\001\002\000\050\003\uffcb\010\uffcb\012\uffcb\013\uffcb\014" +
    "\uffcb\015\uffcb\016\uffcb\027\uffcb\030\uffcb\034\uffcb\037\uffcb" +
    "\040\uffcb\041\uffcb\043\uffcb\062\uffcb\063\uffcb\070\uffcb\071" +
    "\u011c\075\uffcb\001\002\000\046\003\040\010\045\012\022" +
    "\013\044\014\027\015\032\016\023\027\030\030\025\034" +
    "\042\037\047\040\034\041\035\043\046\062\036\063\037" +
    "\070\uffa9\075\041\001\002\000\046\003\040\010\045\012" +
    "\022\013\044\014\027\015\032\016\023\027\030\030\025" +
    "\034\042\037\047\040\034\041\035\043\046\062\036\063" +
    "\037\070\uffa9\075\041\001\002\000\004\070\uffcc\001\002" +
    "\000\004\070\uffca\001\002\000\046\003\040\010\045\012" +
    "\022\013\044\014\027\015\032\016\023\027\030\030\025" +
    "\034\042\037\047\040\034\041\035\043\046\062\036\063" +
    "\037\070\uffa9\075\041\001\002\000\046\003\040\010\045" +
    "\012\022\013\044\014\027\015\032\016\023\027\030\030" +
    "\025\034\042\037\047\040\034\041\035\043\046\062\036" +
    "\063\037\070\uffa9\075\041\001\002\000\004\070\uffcd\001" +
    "\002\000\004\070\uffcf\001\002\000\050\003\uffc2\010\uffc2" +
    "\012\uffc2\013\uffc2\014\uffc2\015\uffc2\016\uffc2\027\uffc2\030" +
    "\uffc2\034\uffc2\037\uffc2\040\uffc2\041\uffc2\043\uffc2\062\uffc2" +
    "\063\uffc2\070\uffc2\071\u012a\075\uffc2\001\002\000\050\003" +
    "\uffbf\010\uffbf\012\uffbf\013\uffbf\014\uffbf\015\uffbf\016\uffbf" +
    "\027\uffbf\030\uffbf\034\uffbf\037\uffbf\040\uffbf\041\uffbf\043" +
    "\uffbf\062\uffbf\063\uffbf\070\uffbf\071\u0126\075\uffbf\001\002" +
    "\000\046\003\040\010\045\012\022\013\044\014\027\015" +
    "\032\016\023\027\030\030\025\034\042\037\047\040\034" +
    "\041\035\043\046\062\036\063\037\070\uffa9\075\041\001" +
    "\002\000\046\003\040\010\045\012\022\013\044\014\027" +
    "\015\032\016\023\027\030\030\025\034\042\037\047\040" +
    "\034\041\035\043\046\062\036\063\037\070\uffa9\075\041" +
    "\001\002\000\004\070\uffc0\001\002\000\004\070\uffbe\001" +
    "\002\000\046\003\040\010\045\012\022\013\044\014\027" +
    "\015\032\016\023\027\030\030\025\034\042\037\047\040" +
    "\034\041\035\043\046\062\036\063\037\070\uffa9\075\041" +
    "\001\002\000\046\003\040\010\045\012\022\013\044\014" +
    "\027\015\032\016\023\027\030\030\025\034\042\037\047" +
    "\040\034\041\035\043\046\062\036\063\037\070\uffa9\075" +
    "\041\001\002\000\004\070\uffc3\001\002\000\004\070\uffc1" +
    "\001\002\000\046\003\040\010\045\012\022\013\044\014" +
    "\027\015\032\016\023\027\030\030\025\034\042\037\047" +
    "\040\034\041\035\043\046\062\036\063\037\070\uffa9\075" +
    "\041\001\002\000\046\003\040\010\045\012\022\013\044" +
    "\014\027\015\032\016\023\027\030\030\025\034\042\037" +
    "\047\040\034\041\035\043\046\062\036\063\037\070\uffa9" +
    "\075\041\001\002\000\004\070\uffdc\001\002\000\004\070" +
    "\uffde\001\002\000\004\065\u0137\001\002\000\050\003\uffe6" +
    "\010\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6\016\uffe6\027" +
    "\uffe6\030\uffe6\034\uffe6\037\uffe6\040\uffe6\041\uffe6\043\uffe6" +
    "\062\uffe6\063\uffe6\070\uffe6\071\u0133\075\uffe6\001\002\000" +
    "\046\003\040\010\045\012\022\013\044\014\027\015\032" +
    "\016\023\027\030\030\025\034\042\037\047\040\034\041" +
    "\035\043\046\062\036\063\037\070\uffa9\075\041\001\002" +
    "\000\046\003\040\010\045\012\022\013\044\014\027\015" +
    "\032\016\023\027\030\030\025\034\042\037\047\040\034" +
    "\041\035\043\046\062\036\063\037\070\uffa9\075\041\001" +
    "\002\000\004\070\uffe5\001\002\000\004\070\uffe7\001\002" +
    "\000\004\023\204\001\002\000\004\072\u0139\001\002\000" +
    "\012\003\071\057\075\074\076\075\074\001\002\000\004" +
    "\072\u013b\001\002\000\012\003\071\057\075\074\076\075" +
    "\074\001\002\000\004\066\u013d\001\002\000\050\003\uff6c" +
    "\010\uff6c\012\uff6c\013\uff6c\014\uff6c\015\uff6c\016\uff6c\027" +
    "\uff6c\030\uff6c\034\uff6c\037\uff6c\040\uff6c\041\uff6c\043\uff6c" +
    "\062\uff6c\063\uff6c\070\uff6c\071\uff6c\075\uff6c\001\002\000" +
    "\012\003\207\024\212\025\206\026\210\001\002\000\004" +
    "\066\uffa4\001\002\000\046\003\040\010\045\012\022\013" +
    "\044\014\027\015\032\016\023\027\030\030\025\034\042" +
    "\037\047\040\034\041\035\043\046\062\036\063\037\070" +
    "\uffa9\075\041\001\002\000\004\070\u0142\001\002\000\010" +
    "\003\u0104\044\u0105\070\u0106\001\002\000\004\002\ufffd\001" +
    "\002\000\046\003\040\010\045\012\022\013\044\014\027" +
    "\015\032\016\023\027\030\030\025\034\042\037\047\040" +
    "\034\041\035\043\046\062\036\063\037\070\uffa9\075\041" +
    "\001\002\000\004\070\u0146\001\002\000\010\003\u0104\044" +
    "\u0105\070\u0106\001\002\000\004\002\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0145\000\004\002\005\001\001\000\004\036\u0143\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\035\u013f\001\001\000\004\034\011\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\004\016\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\003\025\007\032\020\030\023\042" +
    "\025\023\001\001\000\004\011\u0131\001\001\000\004\047" +
    "\u012d\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\362\001\001\000\002\001\001\000" +
    "\004\043\331\001\001\000\004\005\323\001\001\000\004" +
    "\042\320\001\001\000\002\001\001\000\004\005\305\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\067\260" +
    "\070\257\072\256\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\221\001\001\000\004\012\175\001\001" +
    "\000\004\026\064\001\001\000\004\014\056\001\001\000" +
    "\002\001\001\000\004\050\051\001\001\000\014\003\053" +
    "\007\032\020\030\023\042\025\023\001\001\000\014\003" +
    "\052\007\032\020\030\023\042\025\023\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\066\061\001\001\000\002\001\001\000\014" +
    "\003\063\007\032\020\030\023\042\025\023\001\001\000" +
    "\014\003\062\007\032\020\030\023\042\025\023\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\003\174\007" +
    "\032\020\030\023\042\025\023\001\001\000\012\027\066" +
    "\030\072\031\071\032\067\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\027\101\030\072\031\071\032\067\001\001" +
    "\000\012\027\100\030\072\031\071\032\067\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\027\104\030\072\031\071\032\067\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\024\144\001\001\000\004" +
    "\024\143\001\001\000\004\024\142\001\001\000\004\024" +
    "\141\001\001\000\012\027\135\030\072\031\071\032\067" +
    "\001\001\000\004\024\134\001\001\000\004\024\120\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\024\122\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\024\133\001\001\000\004" +
    "\024\132\001\001\000\004\024\131\001\001\000\004\024" +
    "\130\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\027\140\030\072\031\071" +
    "\032\067\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\027\150\030\072\031\071\032\067\001\001\000\012\027" +
    "\147\030\072\031\071\032\067\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\027\154\030\072\031\071\032" +
    "\067\001\001\000\012\027\153\030\072\031\071\032\067" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\027" +
    "\160\030\072\031\071\032\067\001\001\000\012\027\157" +
    "\030\072\031\071\032\067\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\003\163\007\032" +
    "\020\030\023\042\025\023\001\001\000\002\001\001\000" +
    "\004\033\165\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\026\173\001\001\000\014\003\171\007\032\020" +
    "\030\023\042\025\023\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\045" +
    "\216\001\001\000\002\001\001\000\012\027\200\030\072" +
    "\031\071\032\067\001\001\000\002\001\001\000\004\005" +
    "\202\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\210\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\027\213\030\072\031\071\032\067\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\003\220\007\032\020\030" +
    "\023\042\025\023\001\001\000\014\003\217\007\032\020" +
    "\030\023\042\025\023\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\024\223\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\062\233\001\001" +
    "\000\004\063\230\001\001\000\014\003\232\007\032\020" +
    "\030\023\042\025\023\001\001\000\014\003\231\007\032" +
    "\020\030\023\042\025\023\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\003\236\007\032\020\030\023\042" +
    "\025\023\001\001\000\014\003\235\007\032\020\030\023" +
    "\042\025\023\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\024\255\001\001\000\002\001\001\000\004\021" +
    "\245\001\001\000\002\001\001\000\014\003\244\007\032" +
    "\020\030\023\042\025\023\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\247\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\003\254\007\032\020\030\023\042\025\023\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\003\262\007\032" +
    "\020\030\023\042\025\023\001\001\000\002\001\001\000" +
    "\004\071\264\001\001\000\002\001\001\000\006\017\266" +
    "\023\270\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\017\272\023\270\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\003\275\007\032\020" +
    "\030\023\042\025\023\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\003\301\007\032\020" +
    "\030\023\042\025\023\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\003\304\007\032\020\030\023\042\025" +
    "\023\001\001\000\002\001\001\000\004\064\307\001\001" +
    "\000\014\003\311\007\032\020\030\023\042\025\023\001" +
    "\001\000\014\003\310\007\032\020\030\023\042\025\023" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\051" +
    "\314\001\001\000\014\003\316\007\032\020\030\023\042" +
    "\025\023\001\001\000\014\003\315\007\032\020\030\023" +
    "\042\025\023\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\003\322\007\032\020\030\023\042\025\023\001" +
    "\001\000\014\003\321\007\032\020\030\023\042\025\023" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\065" +
    "\325\001\001\000\014\003\327\007\032\020\030\023\042" +
    "\025\023\001\001\000\014\003\326\007\032\020\030\023" +
    "\042\025\023\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\003\333\007\032\020\030\023\042\025\023\001" +
    "\001\000\014\003\332\007\032\020\030\023\042\025\023" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\350\001\001\000\004\005\336\001\001\000\004\052\345" +
    "\001\001\000\004\053\341\001\001\000\014\003\343\007" +
    "\032\020\030\023\042\025\023\001\001\000\014\003\342" +
    "\007\032\020\030\023\042\025\023\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\003\347\007\032\020\030" +
    "\023\042\025\023\001\001\000\014\003\346\007\032\020" +
    "\030\023\042\025\023\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\056\356\001\001\000\004\057\352\001" +
    "\001\000\014\003\355\007\032\020\030\023\042\025\023" +
    "\001\001\000\014\003\354\007\032\020\030\023\042\025" +
    "\023\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\003\361\007\032\020\030\023\042\025\023\001\001\000" +
    "\014\003\360\007\032\020\030\023\042\025\023\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\046\375\001" +
    "\001\000\002\001\001\000\012\027\365\030\072\031\071" +
    "\032\067\001\001\000\002\001\001\000\004\005\367\001" +
    "\001\000\002\001\001\000\012\027\371\030\072\031\071" +
    "\032\067\001\001\000\002\001\001\000\012\027\373\030" +
    "\072\031\071\032\067\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\003\u0100\007\032\020\030\023\042\025" +
    "\023\001\001\000\014\003\377\007\032\020\030\023\042" +
    "\025\023\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\u0102\001\001\000\002\001\001\000\006\037\u0111" +
    "\040\u0112\001\001\000\004\015\u0108\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\041\u010a\001\001\000\004" +
    "\016\u0109\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\017\u010c\023\270\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\003\u010f\007\032\020\030\023\042\025" +
    "\023\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\u0113\001\001\000\004\016\u0114\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\u0122" +
    "\001\001\000\004\005\u0118\001\001\000\004\054\u011f\001" +
    "\001\000\004\055\u011a\001\001\000\014\003\u011d\007\032" +
    "\020\030\023\042\025\023\001\001\000\014\003\u011c\007" +
    "\032\020\030\023\042\025\023\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\003\u0121\007\032\020\030\023" +
    "\042\025\023\001\001\000\014\003\u0120\007\032\020\030" +
    "\023\042\025\023\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\060\u0128\001\001\000\004\061\u0124\001\001" +
    "\000\014\003\u0127\007\032\020\030\023\042\025\023\001" +
    "\001\000\014\003\u0126\007\032\020\030\023\042\025\023" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\003" +
    "\u012b\007\032\020\030\023\042\025\023\001\001\000\014" +
    "\003\u012a\007\032\020\030\023\042\025\023\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\003\u012f\007\032" +
    "\020\030\023\042\025\023\001\001\000\014\003\u012e\007" +
    "\032\020\030\023\042\025\023\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\044\u0133\001" +
    "\001\000\014\003\u0135\007\032\020\030\023\042\025\023" +
    "\001\001\000\014\003\u0134\007\032\020\030\023\042\025" +
    "\023\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\u0137\001\001\000\002\001\001\000\012\027\u0139\030" +
    "\072\031\071\032\067\001\001\000\002\001\001\000\012" +
    "\027\u013b\030\072\031\071\032\067\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\u013e\001\001\000\002" +
    "\001\001\000\014\003\u0140\007\032\020\030\023\042\025" +
    "\023\001\001\000\002\001\001\000\004\016\u0142\001\001" +
    "\000\002\001\001\000\014\003\u0144\007\032\020\030\023" +
    "\042\025\023\001\001\000\002\001\001\000\004\016\u0146" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintaxPrueba$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintaxPrueba$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintaxPrueba$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private String ambito;
    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    private void reportarError(String codigo, String encontrado){
        if(this.s == null) this.s = cur_token;
        FrmPrincipal.errores.agregarErrorSintactico(codigo, s.left + 1, sym.terminalNames[s.sym], encontrado);
    }

    public void report_fatal_error(String message, Object info){
        System.out.println(message + " " + sym.terminalNames[((Symbol) info).sym]);
    }

    public SintaxPrueba(Lexer lexer){
        super(lexer);
    }

    private void ponerValor(LlaveTabla identificador, Object valor){
        FrmPrincipal.tablaSimbolos.agregarValor(identificador, valor);
    }

    private void ponerTipoDato(LlaveTabla identificador, String tipo){
        FrmPrincipal.tablaSimbolos.agregarTipo(identificador, tipo);
    }

    private void ponerAmbito(LlaveTabla identificador){
        FrmPrincipal.tablaSimbolos.agregarAmbito(identificador, ambito);
    }

    private void agregarFuncion(LlaveTabla id){
        FrmPrincipal.tablaSimbolos.quitarDeTabla(id);
        FrmPrincipal.funciones.agregarFuncion(id.id);
    }

    private void agregarParametro(LlaveTabla parametro){
        FrmPrincipal.funciones.agregarParametro(ambito, parametro);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintaxPrueba$actions {
  private final SintaxPrueba parser;

  /** Constructor */
  CUP$SintaxPrueba$actions(SintaxPrueba parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintaxPrueba$do_action_part00000000(
    int                        CUP$SintaxPrueba$act_num,
    java_cup.runtime.lr_parser CUP$SintaxPrueba$parser,
    java.util.Stack            CUP$SintaxPrueba$stack,
    int                        CUP$SintaxPrueba$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintaxPrueba$result;

      /* select the action based on the action number */
      switch (CUP$SintaxPrueba$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		RESULT = start_val;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintaxPrueba$parser.done_parsing();
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		LlaveTabla i = (LlaveTabla)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;

            agregarFuncion(i);
            ambito = i.id;
        
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$0",26, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= INICIO IDENTIFICADOR NT$0 LLAVE_ABIERTA COMIENZO PARENTESIS_ABIERTO tiempo_cada PARENTESIS_CERRADO LLAVE_ABIERTA gramaticas LLAVE_CERRADA inicio_fin 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-9)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-10)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-10)).right;
		LlaveTabla i = (LlaveTabla)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-10)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-11)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$1 ::= 
            {
              Object RESULT =null;
reportarError("ES1", null);ambito="rutina_principal";
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$1",27, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // inicio ::= INICIO error NT$1 gramaticas LLAVE_CERRADA inicio_fin 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$2 ::= 
            {
              Object RESULT =null;
reportarError("ES1", null); ambito = "rutina_principal";
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$2",28, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // inicio ::= error NT$2 gramaticas LLAVE_CERRADA inicio_fin 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // inicio_fin ::= LLAVE_CERRADA FIN 
            {
              Object RESULT =null;
		System.out.println("ANALISIS TERMINADO");
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("inicio_fin",12, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$3 ::= 
            {
              Object RESULT =null;
reportarError("ES1", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$3",29, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // inicio_fin ::= error NT$3 FIN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		System.out.println("ANALISIS TERMINADO");
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("inicio_fin",12, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // inicio_fin ::= FUNCION funcion inicio_fin 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("inicio_fin",12, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$4 ::= 
            {
              Object RESULT =null;
reportarError("ES1", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$4",30, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // inicio_fin ::= error NT$4 funcion inicio_fin 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("inicio_fin",12, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$5 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		LlaveTabla i = (LlaveTabla)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;

                                agregarFuncion(i);
                                ambito = i.id;
                            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$5",31, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // funcion ::= IDENTIFICADOR NT$5 PARENTESIS_ABIERTO parametros PARENTESIS_CERRADO LLAVE_ABIERTA gramaticas LLAVE_CERRADA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-7)).right;
		LlaveTabla i = (LlaveTabla)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-7)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("funcion",11, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // parametros ::= declaracion_inicio COMA parametros 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).right;
		LlaveTabla i = (LlaveTabla)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		agregarParametro(i);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("parametros",13, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // parametros ::= declaracion_inicio 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		LlaveTabla i = (LlaveTabla)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		agregarParametro(i);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("parametros",13, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // parametros ::= 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("parametros",13, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // gramaticas ::= incdec 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // gramaticas ::= declaracion PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$6 ::= 
            {
              Object RESULT =null;
reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$6",32, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // gramaticas ::= declaracion NT$6 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // gramaticas ::= asignacion PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$7 ::= 
            {
              Object RESULT =null;
reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$7",33, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // gramaticas ::= asignacion NT$7 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // gramaticas ::= CONDICION condicion gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // gramaticas ::= VENTILAR ventilar PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$8 ::= 
            {
              Object RESULT =null;
reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$8",34, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // gramaticas ::= VENTILAR ventilar NT$8 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // gramaticas ::= ADMITIR admitir PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NT$9 ::= 
            {
              Object RESULT =null;
reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$9",35, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // gramaticas ::= ADMITIR admitir NT$9 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // gramaticas ::= AULAVACIA aula_vacia PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NT$10 ::= 
            {
              Object RESULT =null;
reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$10",36, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // gramaticas ::= AULAVACIA aula_vacia NT$10 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // gramaticas ::= SALIR PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NT$11 ::= 
            {
              Object RESULT =null;
reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$11",37, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // gramaticas ::= SALIR NT$11 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // gramaticas ::= APAGAR LUCES PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // NT$12 ::= 
            {
              Object RESULT =null;
reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$12",38, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // gramaticas ::= APAGAR LUCES NT$12 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // gramaticas ::= ENCENDER LUCES PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NT$13 ::= 
            {
              Object RESULT =null;
reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$13",39, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // gramaticas ::= ENCENDER LUCES NT$13 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // gramaticas ::= ABRIR PUERTAS tiempo_por PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // NT$14 ::= 
            {
              Object RESULT =null;
reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$14",40, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // gramaticas ::= ABRIR PUERTAS tiempo_por NT$14 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // gramaticas ::= ABRIR PUERTAS MANTENER PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // NT$15 ::= 
            {
              Object RESULT =null;
reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$15",41, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // gramaticas ::= ABRIR PUERTAS MANTENER NT$15 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // gramaticas ::= CERRAR PUERTAS tiempo_por PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // NT$16 ::= 
            {
              Object RESULT =null;
reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$16",42, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // gramaticas ::= CERRAR PUERTAS tiempo_por NT$16 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // gramaticas ::= CERRAR PUERTAS MANTENER PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // NT$17 ::= 
            {
              Object RESULT =null;
reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$17",43, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // gramaticas ::= CERRAR PUERTAS MANTENER NT$17 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // gramaticas ::= ABRIR VENTANAS tiempo_por PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NT$18 ::= 
            {
              Object RESULT =null;
reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$18",44, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // gramaticas ::= ABRIR VENTANAS tiempo_por NT$18 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // gramaticas ::= ABRIR VENTANAS MANTENER PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // NT$19 ::= 
            {
              Object RESULT =null;
reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$19",45, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // gramaticas ::= ABRIR VENTANAS MANTENER NT$19 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // gramaticas ::= CERRAR VENTANAS tiempo_por PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // NT$20 ::= 
            {
              Object RESULT =null;
reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$20",46, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // gramaticas ::= CERRAR VENTANAS tiempo_por NT$20 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // gramaticas ::= CERRAR VENTANAS MANTENER PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // NT$21 ::= 
            {
              Object RESULT =null;
reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$21",47, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // gramaticas ::= CERRAR VENTANAS MANTENER NT$21 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // gramaticas ::= OBTENER TEMPERATURA PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // NT$22 ::= 
            {
              Object RESULT =null;
reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$22",48, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // gramaticas ::= OBTENER TEMPERATURA NT$22 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // gramaticas ::= OBTENER PERSONAS PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // NT$23 ::= 
            {
              Object RESULT =null;
reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$23",49, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // gramaticas ::= OBTENER PERSONAS NT$23 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // gramaticas ::= SANITIZAR tiempo_por PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // NT$24 ::= 
            {
              Object RESULT =null;
reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$24",50, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // gramaticas ::= SANITIZAR tiempo_por NT$24 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$24
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // gramaticas ::= DISPENSAR tiempo_por PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // NT$25 ::= 
            {
              Object RESULT =null;
reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$25",51, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // gramaticas ::= DISPENSAR tiempo_por NT$25 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$25
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // gramaticas ::= ESTADO estado PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // NT$26 ::= 
            {
              Object RESULT =null;
reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$26",52, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // gramaticas ::= ESTADO estado NT$26 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$26
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // NT$27 ::= 
            {
              Object RESULT =null;
reportarError("ES2", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$27",53, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // gramaticas ::= error NT$27 PUNTO_COMA gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$27
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // NT$28 ::= 
            {
              Object RESULT =null;
reportarError("ES1", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$28",54, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // NT$29 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		LlaveTabla i = (LlaveTabla)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;

                                agregarFuncion(i);
                                ambito = i.id;
                            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$29",55, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // gramaticas ::= error NT$28 IDENTIFICADOR NT$29 PARENTESIS_ABIERTO parametros PARENTESIS_CERRADO LLAVE_ABIERTA gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$29
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-6)).right;
		LlaveTabla i = (LlaveTabla)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-6)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-8)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // gramaticas ::= 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // incdec ::= IDENTIFICADOR INC PUNTO_COMA gramaticas 
            {
              Integer RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("incdec",19, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // incdec ::= IDENTIFICADOR DEC PUNTO_COMA gramaticas 
            {
              Integer RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("incdec",19, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // incdec ::= INC IDENTIFICADOR PUNTO_COMA gramaticas 
            {
              Integer RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("incdec",19, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // incdec ::= DEC IDENTIFICADOR PUNTO_COMA gramaticas 
            {
              Integer RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("incdec",19, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // tiempo_cada ::= CADA NUMERO unidad_tiempo 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("tiempo_cada",2, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // tiempo_por ::= POR NUMERO unidad_tiempo 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("tiempo_por",3, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // unidad_tiempo ::= SEG 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("unidad_tiempo",4, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // unidad_tiempo ::= MIN 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("unidad_tiempo",4, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // unidad_tiempo ::= HR 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("unidad_tiempo",4, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // unidad_tiempo ::= error 
            {
              Object RESULT =null;
		reportarError("ES3", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("unidad_tiempo",4, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // estado ::= LUCES 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("estado",10, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // estado ::= PUERTAS 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("estado",10, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // estado ::= VENTANAS 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("estado",10, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // asignacion ::= IDENTIFICADOR ASIGNACION op_aritmetica 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("asignacion",14, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // NT$30 ::= 
            {
              Object RESULT =null;
System.out.println("Error de asignacion");
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$30",56, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // asignacion ::= error NT$30 ASIGNACION 
            {
              Object RESULT =null;
              // propagate RESULT from NT$30
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("asignacion",14, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // declaracion ::= declaracion_inicio 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // declaracion ::= declaracion_inicio declaracion_valor 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).right;
		LlaveTabla i = (LlaveTabla)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		ponerValor(i,valor);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // declaracion_inicio ::= IDENTIFICADOR DECLARAR declaracion_tipo_dato 
            {
              LlaveTabla RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).right;
		LlaveTabla i = (LlaveTabla)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		String td = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		ponerAmbito(i);ponerTipoDato(i,td);RESULT=i;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("declaracion_inicio",17, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // declaracion_valor ::= ASIGNACION OP_BOOLEANO 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Boolean valor = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=valor;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("declaracion_valor",6, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // declaracion_valor ::= ASIGNACION op_aritmetica 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Integer valor = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=valor;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("declaracion_valor",6, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // declaracion_tipo_dato ::= COMO tipo_dato 
            {
              String RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		String td = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT = td;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("declaracion_tipo_dato",15, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // tipo_dato ::= ENTERO 
            {
              String RESULT =null;
		RESULT = "entero";
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("tipo_dato",16, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // tipo_dato ::= LOGICO 
            {
              String RESULT =null;
		RESULT = "logico";
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("tipo_dato",16, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // tipo_dato ::= error 
            {
              String RESULT =null;
		reportarError("ES4", null); RESULT = "error";
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("tipo_dato",16, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // op_aritmetica ::= PARENTESIS_ABIERTO op_aritmetica PARENTESIS_CERRADO 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op_aritmetica",18, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // op_aritmetica ::= NUMERO AR_SUMA op_aritmetica 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op_aritmetica",18, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // op_aritmetica ::= NUMERO AR_RESTA op_aritmetica 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op_aritmetica",18, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // op_aritmetica ::= NUMERO AR_MULTIPLICACION op_aritmetica 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op_aritmetica",18, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // op_aritmetica ::= NUMERO AR_DIVISION op_aritmetica 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op_aritmetica",18, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // op_aritmetica ::= NUMERO 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op_aritmetica",18, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // op_aritmetica ::= IDENTIFICADOR 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		LlaveTabla a = (LlaveTabla)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op_aritmetica",18, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // op_aritmetica ::= error 
            {
              Integer RESULT =null;
		reportarError("ES6", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op_aritmetica",18, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // condicion ::= PARENTESIS_ABIERTO sentencia_booleana PARENTESIS_CERRADO LLAVE_ABIERTA gramaticas LLAVE_CERRADA 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("condicion",20, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // condicion ::= PARENTESIS_ABIERTO sentencia_booleana PARENTESIS_CERRADO LLAVE_ABIERTA gramaticas LLAVE_CERRADA sino 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("condicion",20, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // sentencia_booleana ::= OP_BOOLEANO 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("sentencia_booleana",21, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // sentencia_booleana ::= OP_BOOLEANO LOGICO_AND sentencia_booleana 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("sentencia_booleana",21, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // sentencia_booleana ::= OP_BOOLEANO LOGICO_OR sentencia_booleana 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("sentencia_booleana",21, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // sentencia_booleana ::= IDENTIFICADOR 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("sentencia_booleana",21, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // sentencia_booleana ::= IDENTIFICADOR LOGICO_AND sentencia_booleana IDENTIFICADOR LOGICO_OR sentencia_booleana 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("sentencia_booleana",21, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // sentencia_booleana ::= negacion_identificador 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("sentencia_booleana",21, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // sentencia_booleana ::= negacion_identificador LOGICO_AND sentencia_booleana 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("sentencia_booleana",21, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // sentencia_booleana ::= negacion_identificador LOGICO_OR sentencia_booleana 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("sentencia_booleana",21, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // sentencia_booleana ::= negacion_booleana 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("sentencia_booleana",21, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // sentencia_booleana ::= negacion_booleana LOGICO_AND sentencia_booleana 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("sentencia_booleana",21, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // sentencia_booleana ::= negacion_booleana LOGICO_OR sentencia_booleana 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("sentencia_booleana",21, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // sentencia_booleana ::= relacional_booleana 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("sentencia_booleana",21, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // sentencia_booleana ::= relacional_booleana LOGICO_AND sentencia_booleana 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("sentencia_booleana",21, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // sentencia_booleana ::= relacional_booleana LOGICO_OR sentencia_booleana 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("sentencia_booleana",21, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // sentencia_booleana ::= error 
            {
              Boolean RESULT =null;
		reportarError("ES5", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("sentencia_booleana",21, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // negacion_identificador ::= NEGACION IDENTIFICADOR 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("negacion_identificador",22, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // negacion_booleana ::= NEGACION PARENTESIS_ABIERTO sentencia_booleana PARENTESIS_CERRADO 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("negacion_booleana",23, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // relacional_booleana ::= IDENTIFICADOR REL_MENOR op_aritmetica 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("relacional_booleana",24, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // relacional_booleana ::= IDENTIFICADOR REL_MAYOR op_aritmetica 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("relacional_booleana",24, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // relacional_booleana ::= IDENTIFICADOR REL_MENOR_IGUAL op_aritmetica 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("relacional_booleana",24, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // relacional_booleana ::= IDENTIFICADOR REL_MAYOR_IGUAL op_aritmetica 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("relacional_booleana",24, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // relacional_booleana ::= IDENTIFICADOR REL_DIFERENTE op_aritmetica 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("relacional_booleana",24, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // relacional_booleana ::= IDENTIFICADOR REL_IGUAL op_aritmetica 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("relacional_booleana",24, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // sino ::= SINO CONDICION condicion 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("sino",25, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // sino ::= SINO LLAVE_ABIERTA gramaticas LLAVE_CERRADA 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("sino",25, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // ventilar ::= VENTILAR PARENTESIS_ABIERTO tiempo_por COMA sentencia_booleana COMA sentencia_booleana PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("ventilar",7, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // admitir ::= ADMITIR PARENTESIS_ABIERTO sentencia_booleana COMA tiempo_por COMA sentencia_booleana PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("admitir",8, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // aula_vacia ::= AULAVACIA PARENTESIS_ABIERTO sentencia_booleana COMA tiempo_por COMA sentencia_booleana COMA sentencia_booleana PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("aula_vacia",9, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-9)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintaxPrueba$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintaxPrueba$do_action(
    int                        CUP$SintaxPrueba$act_num,
    java_cup.runtime.lr_parser CUP$SintaxPrueba$parser,
    java.util.Stack            CUP$SintaxPrueba$stack,
    int                        CUP$SintaxPrueba$top)
    throws java.lang.Exception
    {
              return CUP$SintaxPrueba$do_action_part00000000(
                               CUP$SintaxPrueba$act_num,
                               CUP$SintaxPrueba$parser,
                               CUP$SintaxPrueba$stack,
                               CUP$SintaxPrueba$top);
    }
}

}
