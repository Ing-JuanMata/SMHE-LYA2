
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analisis;

import java_cup.runtime.Symbol;
import codigo.FrmPrincipal;
import herramientas.ArbolSintactico;
import herramientas.NodoSintactico;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintaxPrueba extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public SintaxPrueba() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintaxPrueba(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintaxPrueba(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\312\000\002\002\004\000\002\036\002\000\002\037" +
    "\002\000\002\040\002\000\002\041\002\000\002\002\021" +
    "\000\002\042\002\000\002\043\002\000\002\002\011\000" +
    "\002\044\002\000\002\045\002\000\002\002\010\000\002" +
    "\014\004\000\002\046\002\000\002\014\005\000\002\047" +
    "\002\000\002\014\006\000\002\050\002\000\002\014\006" +
    "\000\002\051\002\000\002\052\002\000\002\013\013\000" +
    "\002\053\002\000\002\015\006\000\002\015\003\000\002" +
    "\015\002\000\002\054\002\000\002\003\007\000\002\055" +
    "\002\000\002\003\006\000\002\056\002\000\002\003\007" +
    "\000\002\057\002\000\002\003\006\000\002\060\002\000" +
    "\002\003\007\000\002\061\002\000\002\003\006\000\002" +
    "\062\002\000\002\003\007\000\002\063\002\000\002\003" +
    "\006\000\002\064\002\000\002\003\006\000\002\065\002" +
    "\000\002\003\005\000\002\066\002\000\002\003\007\000" +
    "\002\067\002\000\002\003\006\000\002\070\002\000\002" +
    "\003\006\000\002\071\002\000\002\003\005\000\002\072" +
    "\002\000\002\003\006\000\002\073\002\000\002\003\007" +
    "\000\002\074\002\000\002\003\006\000\002\075\002\000" +
    "\002\003\007\000\002\076\002\000\002\003\006\000\002" +
    "\077\002\000\002\003\006\000\002\100\002\000\002\003" +
    "\005\000\002\101\002\000\002\003\007\000\002\102\002" +
    "\000\002\003\006\000\002\103\002\000\002\003\007\000" +
    "\002\104\002\000\002\003\006\000\002\003\007\000\002" +
    "\105\002\000\002\003\007\000\002\106\002\000\002\003" +
    "\010\000\002\107\002\000\002\003\007\000\002\003\007" +
    "\000\002\110\002\000\002\003\007\000\002\111\002\000" +
    "\002\003\010\000\002\112\002\000\002\003\007\000\002" +
    "\003\007\000\002\113\002\000\002\003\007\000\002\114" +
    "\002\000\002\003\010\000\002\115\002\000\002\003\007" +
    "\000\002\003\007\000\002\116\002\000\002\003\007\000" +
    "\002\117\002\000\002\003\010\000\002\120\002\000\002" +
    "\003\007\000\002\003\006\000\002\121\002\000\002\003" +
    "\006\000\002\003\006\000\002\122\002\000\002\003\006" +
    "\000\002\123\002\000\002\003\005\000\002\003\002\000" +
    "\002\124\002\000\002\004\006\000\002\004\003\000\002" +
    "\125\002\000\002\005\006\000\002\005\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\126\002\000\002\016\006\000\002\127\002\000\002" +
    "\130\002\000\002\016\007\000\002\027\005\000\002\007" +
    "\004\000\002\131\002\000\002\007\005\000\002\025\004" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\132\002\000\002\020\005\000\002\133\002\000\002" +
    "\134\002\000\002\021\007\000\002\135\002\000\002\136" +
    "\002\000\002\021\007\000\002\021\002\000\002\137\002" +
    "\000\002\022\005\000\002\140\002\000\002\141\002\000" +
    "\002\023\007\000\002\142\002\000\002\143\002\000\002" +
    "\023\007\000\002\023\002\000\002\144\002\000\002\024" +
    "\006\000\002\145\002\000\002\024\004\000\002\146\002" +
    "\000\002\147\002\000\002\024\006\000\002\024\004\000" +
    "\002\024\004\000\002\024\003\000\002\017\003\000\002" +
    "\017\003\000\002\030\010\000\002\030\011\000\002\031" +
    "\003\000\002\031\005\000\002\031\005\000\002\031\003" +
    "\000\002\031\005\000\002\031\005\000\002\031\004\000" +
    "\002\031\006\000\002\031\006\000\002\031\003\000\002" +
    "\031\005\000\002\031\005\000\002\031\003\000\002\031" +
    "\005\000\002\031\005\000\002\031\003\000\002\031\005" +
    "\000\002\031\005\000\002\031\003\000\002\032\004\000" +
    "\002\033\006\000\002\034\005\000\002\034\005\000\002" +
    "\034\005\000\002\034\005\000\002\034\005\000\002\034" +
    "\005\000\002\035\005\000\002\035\006\000\002\010\012" +
    "\000\002\011\012" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0167\000\006\003\004\017\005\001\002\000\040\003" +
    "\ufff8\010\ufff8\012\ufff8\013\ufff8\015\ufff8\016\ufff8\027\ufff8" +
    "\030\ufff8\037\ufff8\040\ufff8\041\ufff8\062\ufff8\063\ufff8\070" +
    "\ufff8\075\ufff8\001\002\000\006\003\010\075\011\001\002" +
    "\000\004\002\007\001\002\000\004\002\001\001\002\000" +
    "\040\003\ufffb\010\ufffb\012\ufffb\013\ufffb\015\ufffb\016\ufffb" +
    "\027\ufffb\030\ufffb\037\ufffb\040\ufffb\041\ufffb\062\ufffb\063" +
    "\ufffb\070\ufffb\075\ufffb\001\002\000\004\067\000\001\002" +
    "\000\004\067\013\001\002\000\004\005\014\001\002\000" +
    "\004\065\015\001\002\000\006\003\uffff\022\uffff\001\002" +
    "\000\006\003\017\022\020\001\002\000\004\066\uff8e\001" +
    "\002\000\004\073\u015d\001\002\000\004\066\022\001\002" +
    "\000\004\067\023\001\002\000\040\003\ufffe\010\ufffe\012" +
    "\ufffe\013\ufffe\015\ufffe\016\ufffe\027\ufffe\030\ufffe\037\ufffe" +
    "\040\ufffe\041\ufffe\062\ufffe\063\ufffe\070\ufffe\075\ufffe\001" +
    "\002\000\040\003\037\010\045\012\042\013\035\015\032" +
    "\016\031\027\044\030\036\037\026\040\033\041\025\062" +
    "\040\063\041\070\uff91\075\043\001\002\000\006\003\227" +
    "\023\231\001\002\000\004\042\u0152\001\002\000\044\003" +
    "\uffd5\010\uffd5\012\uffd5\013\uffd5\015\uffd5\016\uffd5\027\uffd5" +
    "\030\uffd5\037\uffd5\040\uffd5\041\uffd5\062\uffd5\063\uffd5\064" +
    "\u0145\070\uffd5\071\uffd7\075\uffd5\001\002\000\004\070\u0126" +
    "\001\002\000\042\003\uffbf\010\uffbf\012\uffbf\013\uffbf\015" +
    "\uffbf\016\uffbf\027\uffbf\030\uffbf\037\uffbf\040\uffbf\041\uffbf" +
    "\062\uffbf\063\uffbf\070\uffbf\071\uffc1\075\uffbf\001\002\000" +
    "\006\003\227\023\231\001\002\000\004\042\u0116\001\002" +
    "\000\042\003\uffcd\010\uffcd\012\uffcd\013\uffcd\015\uffcd\016" +
    "\uffcd\027\uffcd\030\uffcd\037\uffcd\040\uffcd\041\uffcd\062\uffcd" +
    "\063\uffcd\070\uffcd\071\uffcf\075\uffcd\001\002\000\004\013" +
    "\u0104\001\002\000\006\031\353\032\354\001\002\000\042" +
    "\003\uff93\010\uff93\012\uff93\013\uff93\015\uff93\016\uff93\027" +
    "\uff93\030\uff93\037\uff93\040\uff93\041\uff93\062\uff93\063\uff93" +
    "\064\uff81\070\uff93\075\uff93\001\002\000\004\075\337\001" +
    "\002\000\004\075\331\001\002\000\004\012\313\001\002" +
    "\000\012\020\267\062\266\063\270\064\265\001\002\000" +
    "\006\031\224\032\225\001\002\000\004\065\047\001\002" +
    "\000\040\003\uffcb\010\uffcb\012\uffcb\013\uffcb\015\uffcb\016" +
    "\uffcb\027\uffcb\030\uffcb\037\uffcb\040\uffcb\041\uffcb\062\uffcb" +
    "\063\uffcb\070\uffcb\075\uffcb\001\002\000\014\003\054\043" +
    "\055\057\056\074\051\075\057\001\002\000\004\066\207" +
    "\001\002\000\012\060\204\061\203\066\uff56\072\uff56\001" +
    "\002\000\012\060\177\061\200\066\uff4a\072\uff4a\001\002" +
    "\000\012\060\173\061\174\066\uff47\072\uff47\001\002\000" +
    "\006\066\uff44\072\uff44\001\002\000\010\031\163\032\166" +
    "\042\164\001\002\000\006\065\160\075\157\001\002\000" +
    "\026\045\067\046\070\047\065\050\066\051\071\052\074" +
    "\060\073\061\072\066\uff53\072\uff53\001\002\000\012\060" +
    "\062\061\061\066\uff4d\072\uff4d\001\002\000\014\003\054" +
    "\043\055\057\056\074\051\075\057\001\002\000\014\003" +
    "\054\043\055\057\056\074\051\075\057\001\002\000\006" +
    "\066\uff4c\072\uff4c\001\002\000\006\066\uff4b\072\uff4b\001" +
    "\002\000\016\003\uff76\034\uff76\054\uff76\065\uff76\073\uff76" +
    "\075\uff76\001\002\000\016\003\uff76\034\uff76\054\uff76\065" +
    "\uff76\073\uff76\075\uff76\001\002\000\016\003\uff76\034\uff76" +
    "\054\uff76\065\uff76\073\uff76\075\uff76\001\002\000\016\003" +
    "\uff76\034\uff76\054\uff76\065\uff76\073\uff76\075\uff76\001\002" +
    "\000\016\003\uff76\034\uff76\054\uff76\065\uff76\073\uff76\075" +
    "\uff76\001\002\000\014\003\054\043\055\057\056\074\051" +
    "\075\057\001\002\000\014\003\054\043\055\057\056\074" +
    "\051\075\057\001\002\000\016\003\uff76\034\uff76\054\uff76" +
    "\065\uff76\073\uff76\075\uff76\001\002\000\012\060\uff3c\061" +
    "\uff3c\066\uff3c\072\uff3c\001\002\000\016\003\uff6d\034\uff6d" +
    "\054\uff6d\065\uff6d\073\uff6d\075\uff6d\001\002\000\056\003" +
    "\uff6e\010\uff6e\012\uff6e\013\uff6e\015\uff6e\016\uff6e\027\uff6e" +
    "\030\uff6e\037\uff6e\040\uff6e\041\uff6e\053\uff74\054\uff71\060" +
    "\uff6e\061\uff6e\062\uff6e\063\uff6e\066\uff6e\070\uff6e\071\uff6e" +
    "\072\uff6e\075\uff6e\001\002\000\016\003\105\034\101\054" +
    "\uff60\065\uff64\073\uff62\075\uff62\001\002\000\006\035\133" +
    "\036\134\001\002\000\006\073\111\075\112\001\002\000" +
    "\004\065\127\001\002\000\062\003\uff65\010\uff65\012\uff65" +
    "\013\uff65\015\uff65\016\uff65\027\uff65\030\uff65\037\uff65\040" +
    "\uff65\041\uff65\053\uff65\054\uff65\055\uff6b\056\uff68\060\uff65" +
    "\061\uff65\062\uff65\063\uff65\066\uff65\070\uff65\071\uff65\072" +
    "\uff65\075\uff65\001\002\000\062\003\uff5b\010\uff5b\012\uff5b" +
    "\013\uff5b\015\uff5b\016\uff5b\027\uff5b\030\uff5b\037\uff5b\040" +
    "\uff5b\041\uff5b\053\uff5b\054\uff5b\055\uff5b\056\uff5b\060\uff5b" +
    "\061\uff5b\062\uff5b\063\uff5b\066\uff5b\070\uff5b\071\uff5b\072" +
    "\uff5b\075\uff5b\001\002\000\004\054\107\001\002\000\006" +
    "\073\uff5f\075\uff5f\001\002\000\006\073\111\075\112\001" +
    "\002\000\062\003\uff5a\010\uff5a\012\uff5a\013\uff5a\015\uff5a" +
    "\016\uff5a\027\uff5a\030\uff5a\037\uff5a\040\uff5a\041\uff5a\053" +
    "\uff5a\054\uff5a\055\uff5a\056\uff5a\060\uff5a\061\uff5a\062\uff5a" +
    "\063\uff5a\066\uff5a\070\uff5a\071\uff5a\072\uff5a\075\uff5a\001" +
    "\002\000\062\003\uff59\010\uff59\012\uff59\013\uff59\015\uff59" +
    "\016\uff59\027\uff59\030\uff59\037\uff59\040\uff59\041\uff59\053" +
    "\uff59\054\uff59\055\uff59\056\uff59\060\uff59\061\uff59\062\uff59" +
    "\063\uff59\066\uff59\070\uff59\071\uff59\072\uff59\075\uff59\001" +
    "\002\000\062\003\uff5e\010\uff5e\012\uff5e\013\uff5e\015\uff5e" +
    "\016\uff5e\027\uff5e\030\uff5e\037\uff5e\040\uff5e\041\uff5e\053" +
    "\uff5e\054\uff5e\055\uff5e\056\uff5e\060\uff5e\061\uff5e\062\uff5e" +
    "\063\uff5e\066\uff5e\070\uff5e\071\uff5e\072\uff5e\075\uff5e\001" +
    "\002\000\004\056\123\001\002\000\056\003\uff6c\010\uff6c" +
    "\012\uff6c\013\uff6c\015\uff6c\016\uff6c\027\uff6c\030\uff6c\037" +
    "\uff6c\040\uff6c\041\uff6c\053\uff6c\054\uff6c\060\uff6c\061\uff6c" +
    "\062\uff6c\063\uff6c\066\uff6c\070\uff6c\071\uff6c\072\uff6c\075" +
    "\uff6c\001\002\000\004\055\117\001\002\000\016\003\uff6a" +
    "\034\uff6a\054\uff6a\065\uff6a\073\uff6a\075\uff6a\001\002\000" +
    "\016\003\105\034\101\054\uff60\065\uff64\073\uff62\075\uff62" +
    "\001\002\000\062\003\uff65\010\uff65\012\uff65\013\uff65\015" +
    "\uff65\016\uff65\027\uff65\030\uff65\037\uff65\040\uff65\041\uff65" +
    "\053\uff65\054\uff65\055\uff6b\056\uff68\060\uff65\061\uff65\062" +
    "\uff65\063\uff65\066\uff65\070\uff65\071\uff65\072\uff65\075\uff65" +
    "\001\002\000\056\003\uff69\010\uff69\012\uff69\013\uff69\015" +
    "\uff69\016\uff69\027\uff69\030\uff69\037\uff69\040\uff69\041\uff69" +
    "\053\uff69\054\uff69\060\uff69\061\uff69\062\uff69\063\uff69\066" +
    "\uff69\070\uff69\071\uff69\072\uff69\075\uff69\001\002\000\016" +
    "\003\uff67\034\uff67\054\uff67\065\uff67\073\uff67\075\uff67\001" +
    "\002\000\016\003\105\034\101\054\uff60\065\uff64\073\uff62" +
    "\075\uff62\001\002\000\062\003\uff65\010\uff65\012\uff65\013" +
    "\uff65\015\uff65\016\uff65\027\uff65\030\uff65\037\uff65\040\uff65" +
    "\041\uff65\053\uff65\054\uff65\055\uff6b\056\uff68\060\uff65\061" +
    "\uff65\062\uff65\063\uff65\066\uff65\070\uff65\071\uff65\072\uff65" +
    "\075\uff65\001\002\000\056\003\uff66\010\uff66\012\uff66\013" +
    "\uff66\015\uff66\016\uff66\027\uff66\030\uff66\037\uff66\040\uff66" +
    "\041\uff66\053\uff66\054\uff66\060\uff66\061\uff66\062\uff66\063" +
    "\uff66\066\uff66\070\uff66\071\uff66\072\uff66\075\uff66\001\002" +
    "\000\016\003\uff76\034\uff76\054\uff76\065\uff76\073\uff76\075" +
    "\uff76\001\002\000\004\066\131\001\002\000\062\003\uff63" +
    "\010\uff63\012\uff63\013\uff63\015\uff63\016\uff63\027\uff63\030" +
    "\uff63\037\uff63\040\uff63\041\uff63\053\uff63\054\uff63\055\uff63" +
    "\056\uff63\060\uff63\061\uff63\062\uff63\063\uff63\066\uff63\070" +
    "\uff63\071\uff63\072\uff63\075\uff63\001\002\000\062\003\uff61" +
    "\010\uff61\012\uff61\013\uff61\015\uff61\016\uff61\027\uff61\030" +
    "\uff61\037\uff61\040\uff61\041\uff61\053\uff61\054\uff61\055\uff61" +
    "\056\uff61\060\uff61\061\uff61\062\uff61\063\uff61\066\uff61\070" +
    "\uff61\071\uff61\072\uff61\075\uff61\001\002\000\062\003\uff5d" +
    "\010\uff5d\012\uff5d\013\uff5d\015\uff5d\016\uff5d\027\uff5d\030" +
    "\uff5d\037\uff5d\040\uff5d\041\uff5d\053\uff5d\054\uff5d\055\uff5d" +
    "\056\uff5d\060\uff5d\061\uff5d\062\uff5d\063\uff5d\066\uff5d\070" +
    "\uff5d\071\uff5d\072\uff5d\075\uff5d\001\002\000\062\003\uff5c" +
    "\010\uff5c\012\uff5c\013\uff5c\015\uff5c\016\uff5c\027\uff5c\030" +
    "\uff5c\037\uff5c\040\uff5c\041\uff5c\053\uff5c\054\uff5c\055\uff5c" +
    "\056\uff5c\060\uff5c\061\uff5c\062\uff5c\063\uff5c\066\uff5c\070" +
    "\uff5c\071\uff5c\072\uff5c\075\uff5c\001\002\000\052\003\uff75" +
    "\010\uff75\012\uff75\013\uff75\015\uff75\016\uff75\027\uff75\030" +
    "\uff75\037\uff75\040\uff75\041\uff75\060\uff75\061\uff75\062\uff75" +
    "\063\uff75\066\uff75\070\uff75\071\uff75\072\uff75\075\uff75\001" +
    "\002\000\004\054\144\001\002\000\004\053\140\001\002" +
    "\000\016\003\uff73\034\uff73\054\uff73\065\uff73\073\uff73\075" +
    "\uff73\001\002\000\016\003\uff6d\034\uff6d\054\uff6d\065\uff6d" +
    "\073\uff6d\075\uff6d\001\002\000\056\003\uff6e\010\uff6e\012" +
    "\uff6e\013\uff6e\015\uff6e\016\uff6e\027\uff6e\030\uff6e\037\uff6e" +
    "\040\uff6e\041\uff6e\053\uff74\054\uff71\060\uff6e\061\uff6e\062" +
    "\uff6e\063\uff6e\066\uff6e\070\uff6e\071\uff6e\072\uff6e\075\uff6e" +
    "\001\002\000\052\003\uff72\010\uff72\012\uff72\013\uff72\015" +
    "\uff72\016\uff72\027\uff72\030\uff72\037\uff72\040\uff72\041\uff72" +
    "\060\uff72\061\uff72\062\uff72\063\uff72\066\uff72\070\uff72\071" +
    "\uff72\072\uff72\075\uff72\001\002\000\016\003\uff70\034\uff70" +
    "\054\uff70\065\uff70\073\uff70\075\uff70\001\002\000\016\003" +
    "\uff6d\034\uff6d\054\uff6d\065\uff6d\073\uff6d\075\uff6d\001\002" +
    "\000\056\003\uff6e\010\uff6e\012\uff6e\013\uff6e\015\uff6e\016" +
    "\uff6e\027\uff6e\030\uff6e\037\uff6e\040\uff6e\041\uff6e\053\uff74" +
    "\054\uff71\060\uff6e\061\uff6e\062\uff6e\063\uff6e\066\uff6e\070" +
    "\uff6e\071\uff6e\072\uff6e\075\uff6e\001\002\000\052\003\uff6f" +
    "\010\uff6f\012\uff6f\013\uff6f\015\uff6f\016\uff6f\027\uff6f\030" +
    "\uff6f\037\uff6f\040\uff6f\041\uff6f\060\uff6f\061\uff6f\062\uff6f" +
    "\063\uff6f\066\uff6f\070\uff6f\071\uff6f\072\uff6f\075\uff6f\001" +
    "\002\000\006\066\uff52\072\uff52\001\002\000\006\066\uff51" +
    "\072\uff51\001\002\000\012\060\uff3d\061\uff3d\066\uff3d\072" +
    "\uff3d\001\002\000\012\060\uff40\061\uff40\066\uff40\072\uff40" +
    "\001\002\000\012\060\uff41\061\uff41\066\uff41\072\uff41\001" +
    "\002\000\012\060\uff3e\061\uff3e\066\uff3e\072\uff3e\001\002" +
    "\000\012\060\uff3f\061\uff3f\066\uff3f\072\uff3f\001\002\000" +
    "\012\060\uff43\061\uff43\066\uff43\072\uff43\001\002\000\014" +
    "\003\054\043\055\057\056\074\051\075\057\001\002\000" +
    "\004\066\162\001\002\000\012\060\uff42\061\uff42\066\uff42" +
    "\072\uff42\001\002\000\012\060\uff84\061\uff84\066\uff84\072" +
    "\uff84\001\002\000\012\060\uff86\061\uff86\066\uff86\072\uff86" +
    "\001\002\000\012\060\170\061\167\066\uff50\072\uff50\001" +
    "\002\000\012\060\uff85\061\uff85\066\uff85\072\uff85\001\002" +
    "\000\014\003\054\043\055\057\056\074\051\075\057\001" +
    "\002\000\014\003\054\043\055\057\056\074\051\075\057" +
    "\001\002\000\006\066\uff4f\072\uff4f\001\002\000\006\066" +
    "\uff4e\072\uff4e\001\002\000\014\003\054\043\055\057\056" +
    "\074\051\075\057\001\002\000\014\003\054\043\055\057" +
    "\056\074\051\075\057\001\002\000\006\066\uff45\072\uff45" +
    "\001\002\000\006\066\uff46\072\uff46\001\002\000\014\003" +
    "\054\043\055\057\056\074\051\075\057\001\002\000\014" +
    "\003\054\043\055\057\056\074\051\075\057\001\002\000" +
    "\006\066\uff48\072\uff48\001\002\000\006\066\uff49\072\uff49" +
    "\001\002\000\014\003\054\043\055\057\056\074\051\075" +
    "\057\001\002\000\014\003\054\043\055\057\056\074\051" +
    "\075\057\001\002\000\006\066\uff55\072\uff55\001\002\000" +
    "\006\066\uff54\072\uff54\001\002\000\004\067\210\001\002" +
    "\000\040\003\037\010\045\012\042\013\035\015\032\016" +
    "\031\027\044\030\036\037\026\040\033\041\025\062\040" +
    "\063\041\070\uff91\075\043\001\002\000\004\070\212\001" +
    "\002\000\042\003\uff58\010\uff58\011\214\012\uff58\013\uff58" +
    "\015\uff58\016\uff58\027\uff58\030\uff58\037\uff58\040\uff58\041" +
    "\uff58\062\uff58\063\uff58\070\uff58\075\uff58\001\002\000\040" +
    "\003\uff57\010\uff57\012\uff57\013\uff57\015\uff57\016\uff57\027" +
    "\uff57\030\uff57\037\uff57\040\uff57\041\uff57\062\uff57\063\uff57" +
    "\070\uff57\075\uff57\001\002\000\006\010\215\067\216\001" +
    "\002\000\004\065\047\001\002\000\040\003\037\010\045" +
    "\012\042\013\035\015\032\016\031\027\044\030\036\037" +
    "\026\040\033\041\025\062\040\063\041\070\uff91\075\043" +
    "\001\002\000\004\070\220\001\002\000\040\003\uff3a\010" +
    "\uff3a\012\uff3a\013\uff3a\015\uff3a\016\uff3a\027\uff3a\030\uff3a" +
    "\037\uff3a\040\uff3a\041\uff3a\062\uff3a\063\uff3a\070\uff3a\075" +
    "\uff3a\001\002\000\040\003\uff3b\010\uff3b\012\uff3b\013\uff3b" +
    "\015\uff3b\016\uff3b\027\uff3b\030\uff3b\037\uff3b\040\uff3b\041" +
    "\uff3b\062\uff3b\063\uff3b\070\uff3b\075\uff3b\001\002\000\040" +
    "\003\037\010\045\012\042\013\035\015\032\016\031\027" +
    "\044\030\036\037\026\040\033\041\025\062\040\063\041" +
    "\070\uff91\075\043\001\002\000\004\070\uffca\001\002\000" +
    "\010\003\227\023\231\033\253\001\002\000\010\003\227" +
    "\023\231\033\230\001\002\000\042\003\uffb4\010\uffb4\012" +
    "\uffb4\013\uffb4\015\uffb4\016\uffb4\027\uffb4\030\uffb4\037\uffb4" +
    "\040\uffb4\041\uffb4\062\uffb4\063\uffb4\070\uffb4\071\246\075" +
    "\uffb4\001\002\000\044\003\uff8b\010\uff8b\012\uff8b\013\uff8b" +
    "\015\uff8b\016\uff8b\027\uff8b\030\uff8b\037\uff8b\040\uff8b\041" +
    "\uff8b\062\uff8b\063\uff8b\070\uff8b\071\uff8b\072\uff8b\075\uff8b" +
    "\001\002\000\042\003\uffb0\010\uffb0\012\uffb0\013\uffb0\015" +
    "\uffb0\016\uffb0\027\uffb0\030\uffb0\037\uffb0\040\uffb0\041\uffb0" +
    "\062\uffb0\063\uffb0\070\uffb0\071\uffb2\075\uffb0\001\002\000" +
    "\004\073\232\001\002\000\012\003\uff8d\024\uff8d\025\uff8d" +
    "\026\uff8d\001\002\000\012\003\235\024\240\025\234\026" +
    "\236\001\002\000\046\003\uff89\010\uff89\012\uff89\013\uff89" +
    "\015\uff89\016\uff89\027\uff89\030\uff89\037\uff89\040\uff89\041" +
    "\uff89\062\uff89\063\uff89\066\uff89\070\uff89\071\uff89\072\uff89" +
    "\075\uff89\001\002\000\046\003\uff87\010\uff87\012\uff87\013" +
    "\uff87\015\uff87\016\uff87\027\uff87\030\uff87\037\uff87\040\uff87" +
    "\041\uff87\062\uff87\063\uff87\066\uff87\070\uff87\071\uff87\072" +
    "\uff87\075\uff87\001\002\000\046\003\uff88\010\uff88\012\uff88" +
    "\013\uff88\015\uff88\016\uff88\027\uff88\030\uff88\037\uff88\040" +
    "\uff88\041\uff88\062\uff88\063\uff88\066\uff88\070\uff88\071\uff88" +
    "\072\uff88\075\uff88\001\002\000\044\003\uff8c\010\uff8c\012" +
    "\uff8c\013\uff8c\015\uff8c\016\uff8c\027\uff8c\030\uff8c\037\uff8c" +
    "\040\uff8c\041\uff8c\062\uff8c\063\uff8c\070\uff8c\071\uff8c\072" +
    "\uff8c\075\uff8c\001\002\000\046\003\uff8a\010\uff8a\012\uff8a" +
    "\013\uff8a\015\uff8a\016\uff8a\027\uff8a\030\uff8a\037\uff8a\040" +
    "\uff8a\041\uff8a\062\uff8a\063\uff8a\066\uff8a\070\uff8a\071\uff8a" +
    "\072\uff8a\075\uff8a\001\002\000\040\003\037\010\045\012" +
    "\042\013\035\015\032\016\031\027\044\030\036\037\026" +
    "\040\033\041\025\062\040\063\041\070\uff91\075\043\001" +
    "\002\000\004\071\243\001\002\000\040\003\037\010\045" +
    "\012\042\013\035\015\032\016\031\027\044\030\036\037" +
    "\026\040\033\041\025\062\040\063\041\070\uff91\075\043" +
    "\001\002\000\004\070\uffb1\001\002\000\004\070\uffaf\001" +
    "\002\000\040\003\037\010\045\012\042\013\035\015\032" +
    "\016\031\027\044\030\036\037\026\040\033\041\025\062" +
    "\040\063\041\070\uff91\075\043\001\002\000\040\003\037" +
    "\010\045\012\042\013\035\015\032\016\031\027\044\030" +
    "\036\037\026\040\033\041\025\062\040\063\041\070\uff91" +
    "\075\043\001\002\000\004\070\uffb3\001\002\000\004\070" +
    "\uffb5\001\002\000\042\003\uffa6\010\uffa6\012\uffa6\013\uffa6" +
    "\015\uffa6\016\uffa6\027\uffa6\030\uffa6\037\uffa6\040\uffa6\041" +
    "\uffa6\062\uffa6\063\uffa6\070\uffa6\071\262\075\uffa6\001\002" +
    "\000\042\003\uffa2\010\uffa2\012\uffa2\013\uffa2\015\uffa2\016" +
    "\uffa2\027\uffa2\030\uffa2\037\uffa2\040\uffa2\041\uffa2\062\uffa2" +
    "\063\uffa2\070\uffa2\071\uffa4\075\uffa2\001\002\000\004\071" +
    "\257\001\002\000\040\003\037\010\045\012\042\013\035" +
    "\015\032\016\031\027\044\030\036\037\026\040\033\041" +
    "\025\062\040\063\041\070\uff91\075\043\001\002\000\004" +
    "\070\uffa1\001\002\000\040\003\037\010\045\012\042\013" +
    "\035\015\032\016\031\027\044\030\036\037\026\040\033" +
    "\041\025\062\040\063\041\070\uff91\075\043\001\002\000" +
    "\004\070\uffa3\001\002\000\040\003\037\010\045\012\042" +
    "\013\035\015\032\016\031\027\044\030\036\037\026\040" +
    "\033\041\025\062\040\063\041\070\uff91\075\043\001\002" +
    "\000\040\003\037\010\045\012\042\013\035\015\032\016" +
    "\031\027\044\030\036\037\026\040\033\041\025\062\040" +
    "\063\041\070\uff91\075\043\001\002\000\004\070\uffa7\001" +
    "\002\000\004\070\uffa5\001\002\000\016\003\uff83\034\uff83" +
    "\054\uff83\065\uff83\073\uff83\075\uff83\001\002\000\042\003" +
    "\uffe5\010\uffe5\012\uffe5\013\uffe5\015\uffe5\016\uffe5\027\uffe5" +
    "\030\uffe5\037\uffe5\040\uffe5\041\uffe5\062\uffe5\063\uffe5\070" +
    "\uffe5\071\304\075\uffe5\001\002\000\004\021\277\001\002" +
    "\000\042\003\uffe1\010\uffe1\012\uffe1\013\uffe1\015\uffe1\016" +
    "\uffe1\027\uffe1\030\uffe1\037\uffe1\040\uffe1\041\uffe1\062\uffe1" +
    "\063\uffe1\070\uffe1\071\272\075\uffe1\001\002\000\040\003" +
    "\037\010\045\012\042\013\035\015\032\016\031\027\044" +
    "\030\036\037\026\040\033\041\025\062\040\063\041\070" +
    "\uff91\075\043\001\002\000\040\003\uffe3\010\uffe3\012\uffe3" +
    "\013\uffe3\015\uffe3\016\uffe3\027\uffe3\030\uffe3\037\uffe3\040" +
    "\uffe3\041\uffe3\062\uffe3\063\uffe3\070\uffe3\075\uffe3\001\002" +
    "\000\040\003\037\010\045\012\042\013\035\015\032\016" +
    "\031\027\044\030\036\037\026\040\033\041\025\062\040" +
    "\063\041\070\uff91\075\043\001\002\000\004\070\uffe2\001" +
    "\002\000\004\070\uffe0\001\002\000\050\003\uff7e\010\uff7e" +
    "\012\uff7e\013\uff7e\015\uff7e\016\uff7e\027\uff7e\030\uff7e\037" +
    "\uff7e\040\uff7e\041\uff7e\062\uff7e\063\uff7e\064\uff7e\066\uff7e" +
    "\070\uff7e\071\uff7e\072\uff7e\075\uff7e\001\002\000\010\003" +
    "\301\006\303\007\302\001\002\000\050\003\uff7a\010\uff7a" +
    "\012\uff7a\013\uff7a\015\uff7a\016\uff7a\027\uff7a\030\uff7a\037" +
    "\uff7a\040\uff7a\041\uff7a\062\uff7a\063\uff7a\064\uff7a\066\uff7a" +
    "\070\uff7a\071\uff7a\072\uff7a\075\uff7a\001\002\000\050\003" +
    "\uff77\010\uff77\012\uff77\013\uff77\015\uff77\016\uff77\027\uff77" +
    "\030\uff77\037\uff77\040\uff77\041\uff77\062\uff77\063\uff77\064" +
    "\uff77\066\uff77\070\uff77\071\uff77\072\uff77\075\uff77\001\002" +
    "\000\050\003\uff78\010\uff78\012\uff78\013\uff78\015\uff78\016" +
    "\uff78\027\uff78\030\uff78\037\uff78\040\uff78\041\uff78\062\uff78" +
    "\063\uff78\064\uff78\066\uff78\070\uff78\071\uff78\072\uff78\075" +
    "\uff78\001\002\000\050\003\uff79\010\uff79\012\uff79\013\uff79" +
    "\015\uff79\016\uff79\027\uff79\030\uff79\037\uff79\040\uff79\041" +
    "\uff79\062\uff79\063\uff79\064\uff79\066\uff79\070\uff79\071\uff79" +
    "\072\uff79\075\uff79\001\002\000\040\003\uffe7\010\uffe7\012" +
    "\uffe7\013\uffe7\015\uffe7\016\uffe7\027\uffe7\030\uffe7\037\uffe7" +
    "\040\uffe7\041\uffe7\062\uffe7\063\uffe7\070\uffe7\075\uffe7\001" +
    "\002\000\040\003\037\010\045\012\042\013\035\015\032" +
    "\016\031\027\044\030\036\037\026\040\033\041\025\062" +
    "\040\063\041\070\uff91\075\043\001\002\000\004\070\uffe4" +
    "\001\002\000\040\003\037\010\045\012\042\013\035\015" +
    "\032\016\031\027\044\030\036\037\026\040\033\041\025" +
    "\062\040\063\041\070\uff91\075\043\001\002\000\004\070" +
    "\uffe6\001\002\000\016\003\uff76\034\uff76\054\uff76\065\uff76" +
    "\073\uff76\075\uff76\001\002\000\042\003\uff82\010\uff82\012" +
    "\uff82\013\uff82\015\uff82\016\uff82\027\uff82\030\uff82\037\uff82" +
    "\040\uff82\041\uff82\062\uff82\063\uff82\070\uff82\071\uff82\075" +
    "\uff82\001\002\000\004\065\322\001\002\000\042\003\uffc7" +
    "\010\uffc7\012\uffc7\013\uffc7\015\uffc7\016\uffc7\027\uffc7\030" +
    "\uffc7\037\uffc7\040\uffc7\041\uffc7\062\uffc7\063\uffc7\070\uffc7" +
    "\071\uffc9\075\uffc7\001\002\000\040\003\037\010\045\012" +
    "\042\013\035\015\032\016\031\027\044\030\036\037\026" +
    "\040\033\041\025\062\040\063\041\070\uff91\075\043\001" +
    "\002\000\004\071\317\001\002\000\040\003\037\010\045" +
    "\012\042\013\035\015\032\016\031\027\044\030\036\037" +
    "\026\040\033\041\025\062\040\063\041\070\uff91\075\043" +
    "\001\002\000\004\070\uffc8\001\002\000\004\070\uffc6\001" +
    "\002\000\006\003\227\023\231\001\002\000\004\072\324" +
    "\001\002\000\014\003\054\043\055\057\056\074\051\075" +
    "\057\001\002\000\004\072\326\001\002\000\014\003\054" +
    "\043\055\057\056\074\051\075\057\001\002\000\004\066" +
    "\330\001\002\000\042\003\uff39\010\uff39\012\uff39\013\uff39" +
    "\015\uff39\016\uff39\027\uff39\030\uff39\037\uff39\040\uff39\041" +
    "\uff39\062\uff39\063\uff39\070\uff39\071\uff39\075\uff39\001\002" +
    "\000\042\003\uffd9\010\uffd9\012\uffd9\013\uffd9\015\uffd9\016" +
    "\uffd9\027\uffd9\030\uffd9\037\uffd9\040\uffd9\041\uffd9\062\uffd9" +
    "\063\uffd9\070\uffd9\071\333\075\uffd9\001\002\000\040\003" +
    "\037\010\045\012\042\013\035\015\032\016\031\027\044" +
    "\030\036\037\026\040\033\041\025\062\040\063\041\070" +
    "\uff91\075\043\001\002\000\040\003\uffdb\010\uffdb\012\uffdb" +
    "\013\uffdb\015\uffdb\016\uffdb\027\uffdb\030\uffdb\037\uffdb\040" +
    "\uffdb\041\uffdb\062\uffdb\063\uffdb\070\uffdb\075\uffdb\001\002" +
    "\000\040\003\037\010\045\012\042\013\035\015\032\016" +
    "\031\027\044\030\036\037\026\040\033\041\025\062\040" +
    "\063\041\070\uff91\075\043\001\002\000\004\070\uffda\001" +
    "\002\000\004\070\uffd8\001\002\000\042\003\uffdd\010\uffdd" +
    "\012\uffdd\013\uffdd\015\uffdd\016\uffdd\027\uffdd\030\uffdd\037" +
    "\uffdd\040\uffdd\041\uffdd\062\uffdd\063\uffdd\070\uffdd\071\341" +
    "\075\uffdd\001\002\000\040\003\037\010\045\012\042\013" +
    "\035\015\032\016\031\027\044\030\036\037\026\040\033" +
    "\041\025\062\040\063\041\070\uff91\075\043\001\002\000" +
    "\040\003\uffdf\010\uffdf\012\uffdf\013\uffdf\015\uffdf\016\uffdf" +
    "\027\uffdf\030\uffdf\037\uffdf\040\uffdf\041\uffdf\062\uffdf\063" +
    "\uffdf\070\uffdf\075\uffdf\001\002\000\040\003\037\010\045" +
    "\012\042\013\035\015\032\016\031\027\044\030\036\037" +
    "\026\040\033\041\025\062\040\063\041\070\uff91\075\043" +
    "\001\002\000\004\070\uffde\001\002\000\004\070\uffdc\001" +
    "\002\000\004\064\350\001\002\000\040\003\037\010\045" +
    "\012\042\013\035\015\032\016\031\027\044\030\036\037" +
    "\026\040\033\041\025\062\040\063\041\070\uff91\075\043" +
    "\001\002\000\004\070\uff92\001\002\000\016\003\uff80\034" +
    "\uff80\054\uff80\065\uff80\073\uff80\075\uff80\001\002\000\016" +
    "\003\uff76\034\uff76\054\uff76\065\uff76\073\uff76\075\uff76\001" +
    "\002\000\042\003\uff7f\010\uff7f\012\uff7f\013\uff7f\015\uff7f" +
    "\016\uff7f\027\uff7f\030\uff7f\037\uff7f\040\uff7f\041\uff7f\062" +
    "\uff7f\063\uff7f\070\uff7f\071\uff7f\075\uff7f\001\002\000\010" +
    "\003\227\023\231\033\371\001\002\000\010\003\227\023" +
    "\231\033\356\001\002\000\042\003\uffad\010\uffad\012\uffad" +
    "\013\uffad\015\uffad\016\uffad\027\uffad\030\uffad\037\uffad\040" +
    "\uffad\041\uffad\062\uffad\063\uffad\070\uffad\071\365\075\uffad" +
    "\001\002\000\042\003\uffa9\010\uffa9\012\uffa9\013\uffa9\015" +
    "\uffa9\016\uffa9\027\uffa9\030\uffa9\037\uffa9\040\uffa9\041\uffa9" +
    "\062\uffa9\063\uffa9\070\uffa9\071\uffab\075\uffa9\001\002\000" +
    "\040\003\037\010\045\012\042\013\035\015\032\016\031" +
    "\027\044\030\036\037\026\040\033\041\025\062\040\063" +
    "\041\070\uff91\075\043\001\002\000\004\071\361\001\002" +
    "\000\040\003\037\010\045\012\042\013\035\015\032\016" +
    "\031\027\044\030\036\037\026\040\033\041\025\062\040" +
    "\063\041\070\uff91\075\043\001\002\000\004\070\uffaa\001" +
    "\002\000\004\070\uffa8\001\002\000\040\003\037\010\045" +
    "\012\042\013\035\015\032\016\031\027\044\030\036\037" +
    "\026\040\033\041\025\062\040\063\041\070\uff91\075\043" +
    "\001\002\000\040\003\037\010\045\012\042\013\035\015" +
    "\032\016\031\027\044\030\036\037\026\040\033\041\025" +
    "\062\040\063\041\070\uff91\075\043\001\002\000\004\070" +
    "\uffae\001\002\000\004\070\uffac\001\002\000\042\003\uff9f" +
    "\010\uff9f\012\uff9f\013\uff9f\015\uff9f\016\uff9f\027\uff9f\030" +
    "\uff9f\037\uff9f\040\uff9f\041\uff9f\062\uff9f\063\uff9f\070\uff9f" +
    "\071\377\075\uff9f\001\002\000\042\003\uff9b\010\uff9b\012" +
    "\uff9b\013\uff9b\015\uff9b\016\uff9b\027\uff9b\030\uff9b\037\uff9b" +
    "\040\uff9b\041\uff9b\062\uff9b\063\uff9b\070\uff9b\071\uff9d\075" +
    "\uff9b\001\002\000\004\071\375\001\002\000\040\003\037" +
    "\010\045\012\042\013\035\015\032\016\031\027\044\030" +
    "\036\037\026\040\033\041\025\062\040\063\041\070\uff91" +
    "\075\043\001\002\000\004\070\uff9a\001\002\000\040\003" +
    "\037\010\045\012\042\013\035\015\032\016\031\027\044" +
    "\030\036\037\026\040\033\041\025\062\040\063\041\070" +
    "\uff91\075\043\001\002\000\004\070\uff9c\001\002\000\040" +
    "\003\037\010\045\012\042\013\035\015\032\016\031\027" +
    "\044\030\036\037\026\040\033\041\025\062\040\063\041" +
    "\070\uff91\075\043\001\002\000\040\003\037\010\045\012" +
    "\042\013\035\015\032\016\031\027\044\030\036\037\026" +
    "\040\033\041\025\062\040\063\041\070\uff91\075\043\001" +
    "\002\000\004\070\uff9e\001\002\000\004\070\uffa0\001\002" +
    "\000\042\003\uffc3\010\uffc3\012\uffc3\013\uffc3\015\uffc3\016" +
    "\uffc3\027\uffc3\030\uffc3\037\uffc3\040\uffc3\041\uffc3\062\uffc3" +
    "\063\uffc3\070\uffc3\071\uffc5\075\uffc3\001\002\000\004\065" +
    "\u0105\001\002\000\014\003\054\043\055\057\056\074\051" +
    "\075\057\001\002\000\004\072\u0107\001\002\000\006\003" +
    "\227\023\231\001\002\000\004\072\u0109\001\002\000\014" +
    "\003\054\043\055\057\056\074\051\075\057\001\002\000" +
    "\004\066\u010b\001\002\000\042\003\uff38\010\uff38\012\uff38" +
    "\013\uff38\015\uff38\016\uff38\027\uff38\030\uff38\037\uff38\040" +
    "\uff38\041\uff38\062\uff38\063\uff38\070\uff38\071\uff38\075\uff38" +
    "\001\002\000\040\003\037\010\045\012\042\013\035\015" +
    "\032\016\031\027\044\030\036\037\026\040\033\041\025" +
    "\062\040\063\041\070\uff91\075\043\001\002\000\004\071" +
    "\u010e\001\002\000\040\003\037\010\045\012\042\013\035" +
    "\015\032\016\031\027\044\030\036\037\026\040\033\041" +
    "\025\062\040\063\041\070\uff91\075\043\001\002\000\004" +
    "\070\uffc4\001\002\000\004\070\uffc2\001\002\000\040\003" +
    "\037\010\045\012\042\013\035\015\032\016\031\027\044" +
    "\030\036\037\026\040\033\041\025\062\040\063\041\070" +
    "\uff91\075\043\001\002\000\004\071\u0113\001\002\000\040" +
    "\003\037\010\045\012\042\013\035\015\032\016\031\027" +
    "\044\030\036\037\026\040\033\041\025\062\040\063\041" +
    "\070\uff91\075\043\001\002\000\004\070\uffce\001\002\000" +
    "\004\070\uffcc\001\002\000\042\003\uffb7\010\uffb7\012\uffb7" +
    "\013\uffb7\015\uffb7\016\uffb7\027\uffb7\030\uffb7\037\uffb7\040" +
    "\uffb7\041\uffb7\062\uffb7\063\uffb7\070\uffb7\071\uffb9\075\uffb7" +
    "\001\002\000\040\003\037\010\045\012\042\013\035\015" +
    "\032\016\031\027\044\030\036\037\026\040\033\041\025" +
    "\062\040\063\041\070\uff91\075\043\001\002\000\004\071" +
    "\u0119\001\002\000\040\003\037\010\045\012\042\013\035" +
    "\015\032\016\031\027\044\030\036\037\026\040\033\041" +
    "\025\062\040\063\041\070\uff91\075\043\001\002\000\004" +
    "\070\uffb8\001\002\000\004\070\uffb6\001\002\000\042\003" +
    "\uff95\010\uff95\012\uff95\013\uff95\015\uff95\016\uff95\027\uff95" +
    "\030\uff95\037\uff95\040\uff95\041\uff95\062\uff95\063\uff95\070" +
    "\uff95\071\u011d\075\uff95\001\002\000\040\003\037\010\045" +
    "\012\042\013\035\015\032\016\031\027\044\030\036\037" +
    "\026\040\033\041\025\062\040\063\041\070\uff91\075\043" +
    "\001\002\000\040\003\037\010\045\012\042\013\035\015" +
    "\032\016\031\027\044\030\036\037\026\040\033\041\025" +
    "\062\040\063\041\070\uff91\075\043\001\002\000\004\070" +
    "\uff94\001\002\000\004\070\uff96\001\002\000\040\003\037" +
    "\010\045\012\042\013\035\015\032\016\031\027\044\030" +
    "\036\037\026\040\033\041\025\062\040\063\041\070\uff91" +
    "\075\043\001\002\000\004\071\u0123\001\002\000\040\003" +
    "\037\010\045\012\042\013\035\015\032\016\031\027\044" +
    "\030\036\037\026\040\033\041\025\062\040\063\041\070" +
    "\uff91\075\043\001\002\000\004\070\uffc0\001\002\000\004" +
    "\070\uffbe\001\002\000\010\003\ufffd\044\ufffd\070\ufffd\001" +
    "\002\000\010\003\u0129\044\u012a\070\u012b\001\002\000\004" +
    "\002\ufffc\001\002\000\006\004\ufff4\075\ufff0\001\002\000" +
    "\004\075\ufff2\001\002\000\004\004\u012c\001\002\000\004" +
    "\002\ufff5\001\002\000\004\075\u012e\001\002\000\004\065" +
    "\uffee\001\002\000\010\003\u0129\044\u012a\070\u012b\001\002" +
    "\000\004\002\ufff1\001\002\000\004\065\u0132\001\002\000" +
    "\006\066\uffe8\075\u0134\001\002\000\004\066\u0139\001\002" +
    "\000\004\020\267\001\002\000\006\066\uffe9\072\uffeb\001" +
    "\002\000\004\072\u0137\001\002\000\006\066\uffe8\075\u0134" +
    "\001\002\000\004\066\uffea\001\002\000\004\067\u013a\001" +
    "\002\000\040\003\uffed\010\uffed\012\uffed\013\uffed\015\uffed" +
    "\016\uffed\027\uffed\030\uffed\037\uffed\040\uffed\041\uffed\062" +
    "\uffed\063\uffed\070\uffed\075\uffed\001\002\000\040\003\037" +
    "\010\045\012\042\013\035\015\032\016\031\027\044\030" +
    "\036\037\026\040\033\041\025\062\040\063\041\070\uff91" +
    "\075\043\001\002\000\004\070\u013d\001\002\000\010\003" +
    "\uffec\044\uffec\070\uffec\001\002\000\004\075\u012e\001\002" +
    "\000\004\004\u0140\001\002\000\004\002\ufff3\001\002\000" +
    "\010\003\u0129\044\u012a\070\u012b\001\002\000\004\002\uffef" +
    "\001\002\000\004\071\u0150\001\002\000\042\003\uffd1\010" +
    "\uffd1\012\uffd1\013\uffd1\015\uffd1\016\uffd1\027\uffd1\030\uffd1" +
    "\037\uffd1\040\uffd1\041\uffd1\062\uffd1\063\uffd1\070\uffd1\071" +
    "\uffd3\075\uffd1\001\002\000\020\003\uff7c\034\uff7c\054\uff7c" +
    "\065\uff7c\073\uff7c\074\u0148\075\uff7c\001\002\000\040\003" +
    "\037\010\045\012\042\013\035\015\032\016\031\027\044" +
    "\030\036\037\026\040\033\041\025\062\040\063\041\070" +
    "\uff91\075\043\001\002\000\004\070\uffd4\001\002\000\042" +
    "\003\uff7d\010\uff7d\012\uff7d\013\uff7d\015\uff7d\016\uff7d\027" +
    "\uff7d\030\uff7d\037\uff7d\040\uff7d\041\uff7d\062\uff7d\063\uff7d" +
    "\070\uff7d\071\uff7d\075\uff7d\001\002\000\016\003\uff76\034" +
    "\uff76\054\uff76\065\uff76\073\uff76\075\uff76\001\002\000\042" +
    "\003\uff7b\010\uff7b\012\uff7b\013\uff7b\015\uff7b\016\uff7b\027" +
    "\uff7b\030\uff7b\037\uff7b\040\uff7b\041\uff7b\062\uff7b\063\uff7b" +
    "\070\uff7b\071\uff7b\075\uff7b\001\002\000\040\003\037\010" +
    "\045\012\042\013\035\015\032\016\031\027\044\030\036" +
    "\037\026\040\033\041\025\062\040\063\041\070\uff91\075" +
    "\043\001\002\000\004\071\u014d\001\002\000\040\003\037" +
    "\010\045\012\042\013\035\015\032\016\031\027\044\030" +
    "\036\037\026\040\033\041\025\062\040\063\041\070\uff91" +
    "\075\043\001\002\000\004\070\uffd2\001\002\000\004\070" +
    "\uffd0\001\002\000\040\003\037\010\045\012\042\013\035" +
    "\015\032\016\031\027\044\030\036\037\026\040\033\041" +
    "\025\062\040\063\041\070\uff91\075\043\001\002\000\004" +
    "\070\uffd6\001\002\000\042\003\uffbb\010\uffbb\012\uffbb\013" +
    "\uffbb\015\uffbb\016\uffbb\027\uffbb\030\uffbb\037\uffbb\040\uffbb" +
    "\041\uffbb\062\uffbb\063\uffbb\070\uffbb\071\uffbd\075\uffbb\001" +
    "\002\000\040\003\037\010\045\012\042\013\035\015\032" +
    "\016\031\027\044\030\036\037\026\040\033\041\025\062" +
    "\040\063\041\070\uff91\075\043\001\002\000\004\071\u0155" +
    "\001\002\000\040\003\037\010\045\012\042\013\035\015" +
    "\032\016\031\027\044\030\036\037\026\040\033\041\025" +
    "\062\040\063\041\070\uff91\075\043\001\002\000\004\070" +
    "\uffbc\001\002\000\004\070\uffba\001\002\000\042\003\uff98" +
    "\010\uff98\012\uff98\013\uff98\015\uff98\016\uff98\027\uff98\030" +
    "\uff98\037\uff98\040\uff98\041\uff98\062\uff98\063\uff98\070\uff98" +
    "\071\u0159\075\uff98\001\002\000\040\003\037\010\045\012" +
    "\042\013\035\015\032\016\031\027\044\030\036\037\026" +
    "\040\033\041\025\062\040\063\041\070\uff91\075\043\001" +
    "\002\000\040\003\037\010\045\012\042\013\035\015\032" +
    "\016\031\027\044\030\036\037\026\040\033\041\025\062" +
    "\040\063\041\070\uff91\075\043\001\002\000\004\070\uff97" +
    "\001\002\000\004\070\uff99\001\002\000\012\003\uff90\024" +
    "\uff90\025\uff90\026\uff90\001\002\000\012\003\235\024\240" +
    "\025\234\026\236\001\002\000\004\066\uff8f\001\002\000" +
    "\040\003\037\010\045\012\042\013\035\015\032\016\031" +
    "\027\044\030\036\037\026\040\033\041\025\062\040\063" +
    "\041\070\uff91\075\043\001\002\000\004\070\u0162\001\002" +
    "\000\010\003\ufffa\044\ufffa\070\ufffa\001\002\000\010\003" +
    "\u0129\044\u012a\070\u012b\001\002\000\004\002\ufff9\001\002" +
    "\000\040\003\037\010\045\012\042\013\035\015\032\016" +
    "\031\027\044\030\036\037\026\040\033\041\025\062\040" +
    "\063\041\070\uff91\075\043\001\002\000\004\070\u0167\001" +
    "\002\000\010\003\ufff7\044\ufff7\070\ufff7\001\002\000\010" +
    "\003\u0129\044\u012a\070\u012b\001\002\000\004\002\ufff6\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0167\000\004\002\005\001\001\000\004\044\u0164\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\042\u015f\001\001\000\004\036\011\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\037\015\001\001\000\004\004\020\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\040\023\001\001\000\010\003\027\016\033\027" +
    "\026\001\001\000\004\005\u0157\001\001\000\002\001\001" +
    "\000\010\007\u0143\064\u0142\065\u0145\001\001\000\002\001" +
    "\001\000\006\077\u0121\100\u0120\001\001\000\004\005\u011b" +
    "\001\001\000\002\001\001\000\006\070\u0111\071\u0110\001" +
    "\001\000\004\011\u0102\001\001\000\002\001\001\000\006" +
    "\123\345\127\344\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\313\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\030\045\001\001\000\004\072\221\001" +
    "\001\000\012\031\047\032\057\033\051\034\052\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\164\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\031\063\032\057\033\051\034\052\001\001\000\012" +
    "\031\062\032\057\033\051\034\052\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\020\155\132\075\001\001" +
    "\000\006\020\154\132\075\001\001\000\006\020\153\132" +
    "\075\001\001\000\006\020\152\132\075\001\001\000\006" +
    "\020\151\132\075\001\001\000\012\031\150\032\057\033" +
    "\051\034\052\001\001\000\012\031\147\032\057\033\051" +
    "\034\052\001\001\000\006\020\074\132\075\001\001\000" +
    "\002\001\001\000\006\022\076\137\077\001\001\000\010" +
    "\021\134\133\136\135\135\001\001\000\012\024\103\144" +
    "\102\145\101\146\105\001\001\000\002\001\001\000\004" +
    "\017\131\001\001\000\002\001\001\000\010\023\114\140" +
    "\115\142\113\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\147\107\001\001\000\004\017\112\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\141" +
    "\117\001\001\000\012\024\120\144\102\145\101\146\105" +
    "\001\001\000\010\023\121\140\115\142\113\001\001\000" +
    "\002\001\001\000\004\143\123\001\001\000\012\024\124" +
    "\144\102\145\101\146\105\001\001\000\010\023\125\140" +
    "\115\142\113\001\001\000\002\001\001\000\006\020\127" +
    "\132\075\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\134" +
    "\140\001\001\000\006\022\141\137\077\001\001\000\010" +
    "\021\142\133\136\135\135\001\001\000\002\001\001\000" +
    "\004\136\144\001\001\000\006\022\145\137\077\001\001" +
    "\000\010\021\146\133\136\135\135\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\031\160\032\057" +
    "\033\051\034\052\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\031\171\032\057\033\051\034" +
    "\052\001\001\000\012\031\170\032\057\033\051\034\052" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\031" +
    "\175\032\057\033\051\034\052\001\001\000\012\031\174" +
    "\032\057\033\051\034\052\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\031\201\032\057\033\051\034\052" +
    "\001\001\000\012\031\200\032\057\033\051\034\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\031\205" +
    "\032\057\033\051\034\052\001\001\000\012\031\204\032" +
    "\057\033\051\034\052\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\003\210\016\033\027" +
    "\026\001\001\000\002\001\001\000\004\035\212\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\030\220\001" +
    "\001\000\010\003\216\016\033\027\026\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\003" +
    "\222\016\033\027\026\001\001\000\002\001\001\000\004" +
    "\005\251\001\001\000\004\005\225\001\001\000\004\105" +
    "\246\001\001\000\002\001\001\000\006\106\241\107\240" +
    "\001\001\000\002\001\001\000\004\125\232\001\001\000" +
    "\004\006\236\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\003\244\016\033\027\026\001\001\000\002\001\001" +
    "\000\010\003\243\016\033\027\026\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\003\250\016\033\027\026" +
    "\001\001\000\010\003\247\016\033\027\026\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\113\260\001\001" +
    "\000\006\114\253\115\254\001\001\000\002\001\001\000" +
    "\010\003\255\016\033\027\026\001\001\000\002\001\001" +
    "\000\010\003\257\016\033\027\026\001\001\000\002\001" +
    "\001\000\010\003\263\016\033\027\026\001\001\000\010" +
    "\003\262\016\033\027\026\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\126\310\001\001\000\004\055\304" +
    "\001\001\000\004\025\275\001\001\000\004\057\270\001" +
    "\001\000\010\003\274\016\033\027\026\001\001\000\004" +
    "\056\272\001\001\000\010\003\273\016\033\027\026\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\026\277\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\054\306" +
    "\001\001\000\010\003\305\016\033\027\026\001\001\000" +
    "\002\001\001\000\010\003\307\016\033\027\026\001\001" +
    "\000\002\001\001\000\006\020\311\132\075\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\073\315\074\314" +
    "\001\001\000\010\003\320\016\033\027\026\001\001\000" +
    "\002\001\001\000\010\003\317\016\033\027\026\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\322\001" +
    "\001\000\002\001\001\000\012\031\324\032\057\033\051" +
    "\034\052\001\001\000\002\001\001\000\012\031\326\032" +
    "\057\033\051\034\052\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\063\331\001\001\000\010\003\335\016" +
    "\033\027\026\001\001\000\004\062\333\001\001\000\010" +
    "\003\334\016\033\027\026\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\061\337\001\001\000\010\003\343" +
    "\016\033\027\026\001\001\000\004\060\341\001\001\000" +
    "\010\003\342\016\033\027\026\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\003\346\016" +
    "\033\027\026\001\001\000\002\001\001\000\004\130\350" +
    "\001\001\000\006\020\351\132\075\001\001\000\002\001" +
    "\001\000\004\005\367\001\001\000\004\005\354\001\001" +
    "\000\004\110\363\001\001\000\006\111\357\112\356\001" +
    "\001\000\010\003\362\016\033\027\026\001\001\000\002" +
    "\001\001\000\010\003\361\016\033\027\026\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\003\366\016\033" +
    "\027\026\001\001\000\010\003\365\016\033\027\026\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\116\377" +
    "\001\001\000\006\117\371\120\372\001\001\000\002\001" +
    "\001\000\010\003\373\016\033\027\026\001\001\000\002" +
    "\001\001\000\010\003\375\016\033\027\026\001\001\000" +
    "\002\001\001\000\010\003\u0101\016\033\027\026\001\001" +
    "\000\010\003\u0100\016\033\027\026\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\075\u010c\076\u010b\001\001" +
    "\000\002\001\001\000\012\031\u0105\032\057\033\051\034" +
    "\052\001\001\000\002\001\001\000\004\005\u0107\001\001" +
    "\000\002\001\001\000\012\031\u0109\032\057\033\051\034" +
    "\052\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\003\u010f\016\033\027\026\001\001\000\002\001\001\000" +
    "\010\003\u010e\016\033\027\026\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\003\u0114\016\033\027\026\001" +
    "\001\000\002\001\001\000\010\003\u0113\016\033\027\026" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\103" +
    "\u0117\104\u0116\001\001\000\010\003\u011a\016\033\027\026" +
    "\001\001\000\002\001\001\000\010\003\u0119\016\033\027" +
    "\026\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\122\u011d\001\001\000\010\003\u011f\016\033\027\026\001" +
    "\001\000\010\003\u011e\016\033\027\026\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\003\u0124\016\033\027" +
    "\026\001\001\000\002\001\001\000\010\003\u0123\016\033" +
    "\027\026\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\041\u0126\001\001\000\004\014\u0127\001\001\000\002" +
    "\001\001\000\006\046\u013e\050\u013d\001\001\000\004\047" +
    "\u012c\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\u012e\001\001\000\004\051\u0130\001\001\000\004\014" +
    "\u012f\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\015\u0132\027\u0134\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\053\u0135\001\001\000\002\001\001\000\006" +
    "\015\u0137\027\u0134\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\052\u013a\001\001\000\010\003\u013b\016\033" +
    "\027\026\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\u0140\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\u0141\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\066\u014b\067\u014a\001\001\000\004\131\u0148" +
    "\001\001\000\010\003\u0146\016\033\027\026\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\020\u0149\132\075" +
    "\001\001\000\002\001\001\000\010\003\u014e\016\033\027" +
    "\026\001\001\000\002\001\001\000\010\003\u014d\016\033" +
    "\027\026\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\003\u0150\016\033\027\026\001\001\000\002\001\001" +
    "\000\006\101\u0153\102\u0152\001\001\000\010\003\u0156\016" +
    "\033\027\026\001\001\000\002\001\001\000\010\003\u0155" +
    "\016\033\027\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\121\u0159\001\001\000\010\003\u015b\016\033" +
    "\027\026\001\001\000\010\003\u015a\016\033\027\026\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\124\u015d" +
    "\001\001\000\004\006\u015e\001\001\000\002\001\001\000" +
    "\010\003\u0160\016\033\027\026\001\001\000\002\001\001" +
    "\000\004\043\u0162\001\001\000\004\014\u0163\001\001\000" +
    "\002\001\001\000\010\003\u0165\016\033\027\026\001\001" +
    "\000\002\001\001\000\004\045\u0167\001\001\000\004\014" +
    "\u0168\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintaxPrueba$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintaxPrueba$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintaxPrueba$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private String ambito;
    private Symbol s;
    public ArbolSintactico arbolSintactico;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    private void reportarError(String codigo, String encontrado){
        this.s = cur_token;
        FrmPrincipal.errores.agregarErrorSintactico(codigo, s.left + 1, sym.terminalNames[s.sym], encontrado);
    }

    public void report_fatal_error(String message, Object info){
        System.out.println(message + " " + sym.terminalNames[((Symbol) info).sym]);
    }

    public SintaxPrueba(Lexer lexer){
        super(lexer);
    }

    private void ponerValor(LlaveTabla identificador, Object valor){
        FrmPrincipal.tablaSimbolos.agregarValor(identificador, valor);
    }

    private Object getValor(LlaveTabla identificador){
        return FrmPrincipal.tablaSimbolos.getValor(identificador);
    }

    private void ponerTipoDato(LlaveTabla identificador, String tipo){
        FrmPrincipal.tablaSimbolos.agregarTipo(identificador, tipo);
    }

    private void ponerAmbito(LlaveTabla identificador){
        FrmPrincipal.tablaSimbolos.agregarAmbito(identificador, ambito);
    }

    private void agregarFuncion(LlaveTabla id){
        FrmPrincipal.tablaSimbolos.quitarDeTabla(id);
        FrmPrincipal.funciones.agregarFuncion(id.id);
    }

    private void agregarParametro(LlaveTabla parametro){
        FrmPrincipal.funciones.agregarParametro(ambito, parametro);
    }

    private void agregarHijos(Object... hijos){
        arbolSintactico.agregarHijos(hijos);
    }

    private void agregarHijo(Object hijo){
        arbolSintactico.agregarHijo(hijo);
    }

    private void agregarHijo(Object hijo, boolean moverse){
        arbolSintactico.agregarHijo(hijo, moverse);
    }

    private void retroceder(){
        arbolSintactico.retroceder();
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintaxPrueba$actions {
  private final SintaxPrueba parser;

  /** Constructor */
  CUP$SintaxPrueba$actions(SintaxPrueba parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintaxPrueba$do_action_part00000000(
    int                        CUP$SintaxPrueba$act_num,
    java_cup.runtime.lr_parser CUP$SintaxPrueba$parser,
    java.util.Stack            CUP$SintaxPrueba$stack,
    int                        CUP$SintaxPrueba$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintaxPrueba$result;

      /* select the action based on the action number */
      switch (CUP$SintaxPrueba$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		RESULT = start_val;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintaxPrueba$parser.done_parsing();
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		LlaveTabla i = (LlaveTabla)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;

            arbolSintactico=new ArbolSintactico("inicio"); 
            ambito = i.id;
            ponerAmbito(i);
            agregarFuncion(i);
        
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$0",28, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)).right;
		LlaveTabla i = (LlaveTabla)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)).value;

            agregarHijo("tiempo_cada", true);
        
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$1",29, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$2 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-8)).right;
		LlaveTabla i = (LlaveTabla)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-8)).value;

            agregarHijo("gramaticas", true);
        
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$2",30, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$3 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-11)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-11)).right;
		LlaveTabla i = (LlaveTabla)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-11)).value;
agregarHijo("inicio_fin", true);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$3",31, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // inicio ::= INICIO IDENTIFICADOR NT$0 LLAVE_ABIERTA COMIENZO PARENTESIS_ABIERTO NT$1 tiempo_cada PARENTESIS_CERRADO LLAVE_ABIERTA NT$2 gramaticas LLAVE_CERRADA NT$3 inicio_fin 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-13)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-13)).right;
		LlaveTabla i = (LlaveTabla)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-13)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-14)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$4 ::= 
            {
              Object RESULT =null;

            arbolSintactico=new ArbolSintactico("inicio");
            agregarHijo("error");
            agregarHijo("gramaticas", true);
            reportarError("ES1", null);
            ambito="rutina_principal";
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$4",32, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$5 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
agregarHijo("inicio_fin", true);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$5",33, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // inicio ::= INICIO error NT$4 gramaticas LLAVE_CERRADA NT$5 inicio_fin 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$6 ::= 
            {
              Object RESULT =null;

            arbolSintactico=new ArbolSintactico("inicio");
            agregarHijo("error");
            agregarHijo("gramaticas", true);
            reportarError("ES1", null);
            ambito = "rutina_principal";
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$6",34, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$7 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
agregarHijo("inicio_fin", true);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$7",35, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // inicio ::= error NT$6 gramaticas LLAVE_CERRADA NT$7 inicio_fin 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // inicio_fin ::= LLAVE_CERRADA FIN 
            {
              Object RESULT =null;
		
                    System.out.println("ANALISIS TERMINADO");
                    retroceder();
                
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("inicio_fin",10, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$8 ::= 
            {
              Object RESULT =null;
reportarError("ES1", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$8",36, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // inicio_fin ::= error NT$8 FIN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		
                    System.out.println("ANALISIS TERMINADO");
                    retroceder();
                
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("inicio_fin",10, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$9 ::= 
            {
              Object RESULT =null;

                    agregarHijo("funcion", true);
                
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$9",37, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // inicio_fin ::= FUNCION NT$9 funcion inicio_fin 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		retroceder();
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("inicio_fin",10, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$10 ::= 
            {
              Object RESULT =null;

                    reportarError("ES1", null);
                    agregarHijo("funcion", true);
                
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$10",38, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // inicio_fin ::= error NT$10 funcion inicio_fin 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		retroceder();
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("inicio_fin",10, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$11 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		LlaveTabla i = (LlaveTabla)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;

                                agregarFuncion(i);
                                ambito = i.id;
                            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$11",39, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$12 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-5)).right;
		LlaveTabla i = (LlaveTabla)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-5)).value;

                agregarHijo("gramaticas", true);
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$12",40, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // funcion ::= IDENTIFICADOR NT$11 PARENTESIS_ABIERTO parametros PARENTESIS_CERRADO LLAVE_ABIERTA NT$12 gramaticas LLAVE_CERRADA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-8)).right;
		LlaveTabla i = (LlaveTabla)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-8)).value;
		retroceder();
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("funcion",9, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-8)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$13 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		LlaveTabla i = (LlaveTabla)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
agregarParametro(i);retroceder();
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$13",41, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // parametros ::= declaracion_inicio NT$13 COMA parametros 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).right;
		LlaveTabla i = (LlaveTabla)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("parametros",11, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // parametros ::= declaracion_inicio 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		LlaveTabla i = (LlaveTabla)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		agregarParametro(i);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("parametros",11, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // parametros ::= 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("parametros",11, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$14 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).right;
		LlaveTabla i = (LlaveTabla)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;

                agregarHijo("incdec", true);
                agregarHijos(i, "INC", "PUNTO_COMA");
                retroceder();
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$14",42, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // gramaticas ::= IDENTIFICADOR INC PUNTO_COMA NT$14 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)).right;
		LlaveTabla i = (LlaveTabla)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$15 ::= 
            {
              Object RESULT =null;

                reportarError("ES7", null);
                agregarHijo("incdec", true);
                agregarHijos("IDENTIFICADOR", "INC", "error");
                retroceder();
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$15",43, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // gramaticas ::= IDENTIFICADOR INC NT$15 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NT$16 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).right;
		LlaveTabla i = (LlaveTabla)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;

                agregarHijo("incdec", true);
                agregarHijos(i, "DEC", "PUNTO_COMA");
                retroceder();
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$16",44, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // gramaticas ::= IDENTIFICADOR DEC PUNTO_COMA NT$16 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)).right;
		LlaveTabla i = (LlaveTabla)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$17 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).right;
		LlaveTabla i = (LlaveTabla)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

                agregarHijo("incdec", true);
                reportarError("ES7", null);
                agregarHijos(i, "DEC", "error");
                retroceder();
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$17",45, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // gramaticas ::= IDENTIFICADOR DEC NT$17 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).right;
		LlaveTabla i = (LlaveTabla)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NT$18 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).right;
		LlaveTabla i = (LlaveTabla)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

                agregarHijo("incdec", true);
                agregarHijos("INC", i, "PUNTO_COMA");
                retroceder();
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$18",46, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // gramaticas ::= INC IDENTIFICADOR PUNTO_COMA NT$18 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).right;
		LlaveTabla i = (LlaveTabla)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NT$19 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		LlaveTabla i = (LlaveTabla)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;

                reportarError("ES7", null);
                agregarHijo("incdec", true);
                agregarHijos("INC", i, "error");
                retroceder();
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$19",47, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // gramaticas ::= INC IDENTIFICADOR NT$19 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).right;
		LlaveTabla i = (LlaveTabla)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$20 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).right;
		LlaveTabla i = (LlaveTabla)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

                agregarHijo("incdec", true);
                agregarHijos("DEC", i, "PUNTO_COMA");
                retroceder();
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$20",48, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // gramaticas ::= DEC IDENTIFICADOR PUNTO_COMA NT$20 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).right;
		LlaveTabla i = (LlaveTabla)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NT$21 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		LlaveTabla i = (LlaveTabla)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;

                agregarHijo("incdec", true);
                reportarError("ES7", null);
                agregarHijos("DEC", i, "error");
                retroceder();
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$21",49, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // gramaticas ::= DEC IDENTIFICADOR NT$21 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).right;
		LlaveTabla i = (LlaveTabla)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NT$22 ::= 
            {
              Object RESULT =null;
retroceder();
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$22",50, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // gramaticas ::= declaracion_inicio NT$22 PUNTO_COMA gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NT$23 ::= 
            {
              Object RESULT =null;
reportarError("ES7", null); retroceder();
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$23",51, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // gramaticas ::= declaracion_inicio NT$23 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NT$24 ::= 
            {
              Object RESULT =null;
retroceder();
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$24",52, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // gramaticas ::= declaracion_inicio declaracion_valor NT$24 PUNTO_COMA gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$24
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // NT$25 ::= 
            {
              Object RESULT =null;

                reportarError("ES7", null);
                retroceder();
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$25",53, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // gramaticas ::= declaracion_inicio declaracion_valor NT$25 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$25
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // NT$26 ::= 
            {
              Object RESULT =null;
retroceder();
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$26",54, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // gramaticas ::= asignacion NT$26 PUNTO_COMA gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$26
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // NT$27 ::= 
            {
              Object RESULT =null;
reportarError("ES7", null); retroceder();
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$27",55, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // gramaticas ::= asignacion NT$27 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$27
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // NT$28 ::= 
            {
              Object RESULT =null;
retroceder();
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$28",56, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // gramaticas ::= CONDICION condicion NT$28 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$28
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // NT$29 ::= 
            {
              Object RESULT =null;
retroceder();
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$29",57, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // gramaticas ::= VENTILAR ventilar NT$29 PUNTO_COMA gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$29
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // NT$30 ::= 
            {
              Object RESULT =null;
reportarError("ES7", null);retroceder();
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$30",58, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // gramaticas ::= VENTILAR ventilar NT$30 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$30
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // NT$31 ::= 
            {
              Object RESULT =null;
retroceder();
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$31",59, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // gramaticas ::= ADMITIR admitir NT$31 PUNTO_COMA gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$31
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // NT$32 ::= 
            {
              Object RESULT =null;
reportarError("ES7", null); retroceder();
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$32",60, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // gramaticas ::= ADMITIR admitir NT$32 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$32
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // NT$33 ::= 
            {
              Object RESULT =null;
agregarHijo("SALIR");
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$33",61, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // gramaticas ::= SALIR NT$33 PUNTO_COMA gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$33
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // NT$34 ::= 
            {
              Object RESULT =null;
reportarError("ES7", null); agregarHijo("SALIR");
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$34",62, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // gramaticas ::= SALIR NT$34 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$34
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // NT$35 ::= 
            {
              Object RESULT =null;

                agregarHijo("accion", true);
                agregarHijos("APAGAR", "LUCES");
                retroceder();
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$35",63, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // gramaticas ::= APAGAR LUCES NT$35 PUNTO_COMA gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$35
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // NT$36 ::= 
            {
              Object RESULT =null;

                reportarError("ES7", null);
                agregarHijo("accion", true);
                agregarHijos("APAGAR", "LUCES");
                retroceder();
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$36",64, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // gramaticas ::= APAGAR LUCES NT$36 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$36
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // NT$37 ::= 
            {
              Object RESULT =null;

                agregarHijo("accion", true);
                agregarHijos("ENCENDER", "LUCES");
                retroceder();
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$37",65, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // gramaticas ::= ENCENDER LUCES NT$37 PUNTO_COMA gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$37
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // NT$38 ::= 
            {
              Object RESULT =null;

                reportarError("ES7", null);
                agregarHijo("accion", true);
                agregarHijos("ENCENDER", "LUCES");
                retroceder();
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$38",66, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // gramaticas ::= ENCENDER LUCES NT$38 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$38
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // gramaticas ::= ABRIR PUERTAS tiempo_por PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // NT$39 ::= 
            {
              Object RESULT =null;
reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$39",67, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // gramaticas ::= ABRIR PUERTAS tiempo_por NT$39 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$39
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // NT$40 ::= 
            {
              Object RESULT =null;

                agregarHijo("accion", true);
                agregarHijos("ABRIR", "PUERTAS", "MANTENER");
                retroceder();
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$40",68, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // gramaticas ::= ABRIR PUERTAS MANTENER NT$40 PUNTO_COMA gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$40
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // NT$41 ::= 
            {
              Object RESULT =null;

                reportarError("ES7", null);
                agregarHijo("accion", true);
                agregarHijos("ABRIR", "PUERTAS", "MANTENER");
                retroceder();
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$41",69, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // gramaticas ::= ABRIR PUERTAS MANTENER NT$41 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$41
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // gramaticas ::= CERRAR PUERTAS tiempo_por PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // NT$42 ::= 
            {
              Object RESULT =null;
reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$42",70, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // gramaticas ::= CERRAR PUERTAS tiempo_por NT$42 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$42
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // NT$43 ::= 
            {
              Object RESULT =null;

                agregarHijo("accion", true);
                agregarHijos("CERRAR", "PUERTAS", "MANTENER");
                retroceder();
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$43",71, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // gramaticas ::= CERRAR PUERTAS MANTENER NT$43 PUNTO_COMA gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$43
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // NT$44 ::= 
            {
              Object RESULT =null;

                reportarError("ES7", null);
                agregarHijo("accion", true);
                agregarHijos("CERRAR", "PUERTAS", "MANTENER");
                retroceder();
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$44",72, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // gramaticas ::= CERRAR PUERTAS MANTENER NT$44 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$44
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // gramaticas ::= ABRIR VENTANAS tiempo_por PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // NT$45 ::= 
            {
              Object RESULT =null;
reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$45",73, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // gramaticas ::= ABRIR VENTANAS tiempo_por NT$45 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$45
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // NT$46 ::= 
            {
              Object RESULT =null;

                agregarHijo("accion", true);
                agregarHijos("ABRIR", "VENTANAS", "MANTENER");
                retroceder();
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$46",74, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // gramaticas ::= ABRIR VENTANAS MANTENER NT$46 PUNTO_COMA gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$46
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // NT$47 ::= 
            {
              Object RESULT =null;

                reportarError("ES7", null);
                agregarHijo("accion", true);
                agregarHijos("ABRIR", "VENTANAS", "MANTENER");
                retroceder();
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$47",75, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // gramaticas ::= ABRIR VENTANAS MANTENER NT$47 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$47
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // gramaticas ::= CERRAR VENTANAS tiempo_por PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // NT$48 ::= 
            {
              Object RESULT =null;
reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$48",76, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // gramaticas ::= CERRAR VENTANAS tiempo_por NT$48 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$48
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // NT$49 ::= 
            {
              Object RESULT =null;

                agregarHijo("accion", true);
                agregarHijos("CERRAR", "VENTANAS", "MANTENER");
                retroceder();
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$49",77, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // gramaticas ::= CERRAR VENTANAS MANTENER NT$49 PUNTO_COMA gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$49
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // NT$50 ::= 
            {
              Object RESULT =null;

                reportarError("ES7", null);
                agregarHijo("accion", true);
                agregarHijos("CERRAR", "VENTANAS", "MANTENER");
                retroceder();
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$50",78, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // gramaticas ::= CERRAR VENTANAS MANTENER NT$50 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$50
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // gramaticas ::= SANITIZAR tiempo_por PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // NT$51 ::= 
            {
              Object RESULT =null;
reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$51",79, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // gramaticas ::= SANITIZAR tiempo_por NT$51 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$51
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // gramaticas ::= DISPENSAR tiempo_por PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // NT$52 ::= 
            {
              Object RESULT =null;
reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$52",80, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // gramaticas ::= DISPENSAR tiempo_por NT$52 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$52
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // NT$53 ::= 
            {
              Object RESULT =null;
reportarError("ES2", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$53",81, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // gramaticas ::= error NT$53 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$53
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // gramaticas ::= 
            {
              Object RESULT =null;
		retroceder();
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // NT$54 ::= 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;

                agregarHijos("CADA", n); 
                agregarHijo("unidad_tiempo", true);
                
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$54",82, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // tiempo_cada ::= CADA NUMERO NT$54 unidad_tiempo 
            {
              Object RESULT =null;
              // propagate RESULT from NT$54
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		retroceder();
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("tiempo_cada",2, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // tiempo_cada ::= error 
            {
              Object RESULT =null;
		agregarHijo("error"); retroceder();
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("tiempo_cada",2, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // NT$55 ::= 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;

                agregarHijo("tiempo_por", true);
                agregarHijos("POR", n);
                
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$55",83, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // tiempo_por ::= POR NUMERO NT$55 unidad_tiempo 
            {
              Object RESULT =null;
              // propagate RESULT from NT$55
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		retroceder();
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("tiempo_por",3, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // tiempo_por ::= error 
            {
              Object RESULT =null;
		
                    agregarHijo("tiempo_por", true);
                    agregarHijo("error");
                    retroceder();
                
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("tiempo_por",3, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // unidad_tiempo ::= SEG 
            {
              Object RESULT =null;
		agregarHijo("SEG");
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("unidad_tiempo",4, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // unidad_tiempo ::= MIN 
            {
              Object RESULT =null;
		agregarHijo("MIN");
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("unidad_tiempo",4, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // unidad_tiempo ::= HR 
            {
              Object RESULT =null;
		agregarHijo("HR");
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("unidad_tiempo",4, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // unidad_tiempo ::= error 
            {
              Object RESULT =null;
		
                reportarError("ES3", null); 
                agregarHijo("error");
                
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("unidad_tiempo",4, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // estado ::= LUCES 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("estado",8, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // estado ::= PUERTAS 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("estado",8, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // estado ::= VENTANAS 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("estado",8, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // NT$56 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).right;
		LlaveTabla i = (LlaveTabla)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

                agregarHijo("asignacion", true);
                agregarHijos(i, "ASIGNACION");
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$56",84, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // asignacion ::= IDENTIFICADOR ASIGNACION NT$56 op_aritmetica 
            {
              Object RESULT =null;
              // propagate RESULT from NT$56
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).right;
		LlaveTabla i = (LlaveTabla)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("asignacion",12, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // NT$57 ::= 
            {
              Object RESULT =null;

                System.out.println("Error de asignacion");
                agregarHijo("asignacion", true);
                agregarHijo("error");
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$57",85, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // NT$58 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

                agregarHijos(i, "ASIGNACION");
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$58",86, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // asignacion ::= error NT$57 ASIGNACION NT$58 op_aritmetica 
            {
              Object RESULT =null;
              // propagate RESULT from NT$58
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("asignacion",12, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // declaracion_inicio ::= IDENTIFICADOR DECLARAR declaracion_tipo_dato 
            {
              LlaveTabla RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).right;
		LlaveTabla i = (LlaveTabla)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		String td = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		
                        ponerAmbito(i);
                        ponerTipoDato(i,td);
                        agregarHijo("declaracion", true);
                        agregarHijo(i);
                        RESULT=i;
                    
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("declaracion_inicio",21, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // declaracion_valor ::= ASIGNACION OP_BOOLEANO 
            {
              Object RESULT =null;
		int obleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int obright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Boolean ob = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		agregarHijos("ASIGNACION", ob);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("declaracion_valor",5, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // NT$59 ::= 
            {
              Object RESULT =null;
agregarHijo("ASIGNACION");
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$59",87, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // declaracion_valor ::= ASIGNACION NT$59 op_aritmetica 
            {
              Object RESULT =null;
              // propagate RESULT from NT$59
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("declaracion_valor",5, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // declaracion_tipo_dato ::= COMO tipo_dato 
            {
              String RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		String td = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT = td;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("declaracion_tipo_dato",19, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // tipo_dato ::= ENTERO 
            {
              String RESULT =null;
		RESULT = "entero";
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("tipo_dato",20, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // tipo_dato ::= LOGICO 
            {
              String RESULT =null;
		RESULT = "logico";
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("tipo_dato",20, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // tipo_dato ::= error 
            {
              String RESULT =null;
		reportarError("ES4", null); RESULT = "error";
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("tipo_dato",20, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // NT$60 ::= 
            {
              Object RESULT =null;
agregarHijo("op_aritmetica", true);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$60",88, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // op_aritmetica ::= NT$60 op2 op1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$60
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		retroceder();
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op_aritmetica",14, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // NT$61 ::= 
            {
              Object RESULT =null;
agregarHijo("op1", true);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$61",89, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // NT$62 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
agregarHijo("AR_SUMA");
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$62",90, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // op1 ::= NT$61 AR_SUMA NT$62 op2 op1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$62
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		retroceder();
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op1",15, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // NT$63 ::= 
            {
              Object RESULT =null;
agregarHijo("op1", true);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$63",91, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // NT$64 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
agregarHijo("AR_RESTA");
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$64",92, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // op1 ::= NT$63 AR_RESTA NT$64 op2 op1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$64
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		retroceder();
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op1",15, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // op1 ::= 
            {
              Object RESULT =null;
		retroceder();
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op1",15, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // NT$65 ::= 
            {
              Object RESULT =null;
agregarHijo("op2", true);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$65",93, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // op2 ::= NT$65 op4 op3 
            {
              Object RESULT =null;
              // propagate RESULT from NT$65
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		retroceder();
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op2",16, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // NT$66 ::= 
            {
              Object RESULT =null;
agregarHijo("op3", true);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$66",94, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // NT$67 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
agregarHijo("AR_MULTIPLICACION");
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$67",95, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // op3 ::= NT$66 AR_MULTIPLICACION NT$67 op4 op3 
            {
              Object RESULT =null;
              // propagate RESULT from NT$67
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		retroceder();
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op3",17, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // NT$68 ::= 
            {
              Object RESULT =null;
agregarHijo("op3", true);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$68",96, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // NT$69 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
agregarHijo("AR_DIVISION");
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$69",97, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // op3 ::= NT$68 AR_DIVISION NT$69 op4 op3 
            {
              Object RESULT =null;
              // propagate RESULT from NT$69
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		retroceder();
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op3",17, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // op3 ::= 
            {
              Object RESULT =null;
		retroceder();
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op3",17, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // NT$70 ::= 
            {
              Object RESULT =null;
agregarHijo("op4", true);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$70",98, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // op4 ::= NT$70 PARENTESIS_ABIERTO op_aritmetica PARENTESIS_CERRADO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$70
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).value;
		retroceder();
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op4",18, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // NT$71 ::= 
            {
              Object RESULT =null;
agregarHijo("op4", true);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$71",99, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // op4 ::= NT$71 valores 
            {
              Object RESULT =null;
              // propagate RESULT from NT$71
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		retroceder();
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op4",18, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // NT$72 ::= 
            {
              Object RESULT =null;
agregarHijo("op4", true);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$72",100, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // NT$73 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
agregarHijos("AR_RESTA");
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$73",101, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // op4 ::= NT$72 AR_RESTA NT$73 valores 
            {
              Object RESULT =null;
              // propagate RESULT from NT$73
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		retroceder();
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op4",18, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // op4 ::= OBTENER TEMPERATURA 
            {
              Object RESULT =null;
		agregarHijo("sistema"); retroceder();
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op4",18, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // op4 ::= OBTENER PERSONAS 
            {
              Object RESULT =null;
		agregarHijo("sistema"); retroceder();
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op4",18, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // op4 ::= error 
            {
              Object RESULT =null;
		reportarError("ES6", null); agregarHijo("error"); retroceder();
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op4",18, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // valores ::= NUMERO 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		agregarHijo(n);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("valores",13, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // valores ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		LlaveTabla i = (LlaveTabla)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		agregarHijo(i);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("valores",13, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // condicion ::= PARENTESIS_ABIERTO sentencia_booleana PARENTESIS_CERRADO LLAVE_ABIERTA gramaticas LLAVE_CERRADA 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("condicion",22, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // condicion ::= PARENTESIS_ABIERTO sentencia_booleana PARENTESIS_CERRADO LLAVE_ABIERTA gramaticas LLAVE_CERRADA sino 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("condicion",22, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // sentencia_booleana ::= OP_BOOLEANO 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("sentencia_booleana",23, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // sentencia_booleana ::= OP_BOOLEANO LOGICO_AND sentencia_booleana 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("sentencia_booleana",23, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // sentencia_booleana ::= OP_BOOLEANO LOGICO_OR sentencia_booleana 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("sentencia_booleana",23, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // sentencia_booleana ::= IDENTIFICADOR 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("sentencia_booleana",23, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // sentencia_booleana ::= IDENTIFICADOR LOGICO_AND sentencia_booleana 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("sentencia_booleana",23, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // sentencia_booleana ::= IDENTIFICADOR LOGICO_OR sentencia_booleana 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("sentencia_booleana",23, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // sentencia_booleana ::= ESTADO estado 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("sentencia_booleana",23, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // sentencia_booleana ::= ESTADO estado LOGICO_AND sentencia_booleana 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("sentencia_booleana",23, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // sentencia_booleana ::= ESTADO estado LOGICO_OR sentencia_booleana 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("sentencia_booleana",23, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // sentencia_booleana ::= negacion_identificador 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("sentencia_booleana",23, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // sentencia_booleana ::= negacion_identificador LOGICO_AND sentencia_booleana 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("sentencia_booleana",23, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // sentencia_booleana ::= negacion_identificador LOGICO_OR sentencia_booleana 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("sentencia_booleana",23, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // sentencia_booleana ::= negacion_booleana 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("sentencia_booleana",23, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // sentencia_booleana ::= negacion_booleana LOGICO_AND sentencia_booleana 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("sentencia_booleana",23, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // sentencia_booleana ::= negacion_booleana LOGICO_OR sentencia_booleana 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("sentencia_booleana",23, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // sentencia_booleana ::= relacional_booleana 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("sentencia_booleana",23, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // sentencia_booleana ::= relacional_booleana LOGICO_AND sentencia_booleana 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("sentencia_booleana",23, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // sentencia_booleana ::= relacional_booleana LOGICO_OR sentencia_booleana 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("sentencia_booleana",23, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // sentencia_booleana ::= error 
            {
              Boolean RESULT =null;
		reportarError("ES5", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("sentencia_booleana",23, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // negacion_identificador ::= NEGACION IDENTIFICADOR 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("negacion_identificador",24, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // negacion_booleana ::= NEGACION PARENTESIS_ABIERTO sentencia_booleana PARENTESIS_CERRADO 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("negacion_booleana",25, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // relacional_booleana ::= IDENTIFICADOR REL_MENOR op_aritmetica 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("relacional_booleana",26, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // relacional_booleana ::= IDENTIFICADOR REL_MAYOR op_aritmetica 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("relacional_booleana",26, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // relacional_booleana ::= IDENTIFICADOR REL_MENOR_IGUAL op_aritmetica 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("relacional_booleana",26, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // relacional_booleana ::= IDENTIFICADOR REL_MAYOR_IGUAL op_aritmetica 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("relacional_booleana",26, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // relacional_booleana ::= IDENTIFICADOR REL_DIFERENTE op_aritmetica 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("relacional_booleana",26, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // relacional_booleana ::= IDENTIFICADOR REL_IGUAL op_aritmetica 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("relacional_booleana",26, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // sino ::= SINO CONDICION condicion 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("sino",27, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // sino ::= SINO LLAVE_ABIERTA gramaticas LLAVE_CERRADA 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("sino",27, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // ventilar ::= VENTILAR PARENTESIS_ABIERTO tiempo_por COMA sentencia_booleana COMA sentencia_booleana PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("ventilar",6, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // admitir ::= ADMITIR PARENTESIS_ABIERTO sentencia_booleana COMA tiempo_por COMA sentencia_booleana PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("admitir",7, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintaxPrueba$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintaxPrueba$do_action(
    int                        CUP$SintaxPrueba$act_num,
    java_cup.runtime.lr_parser CUP$SintaxPrueba$parser,
    java.util.Stack            CUP$SintaxPrueba$stack,
    int                        CUP$SintaxPrueba$top)
    throws java.lang.Exception
    {
              return CUP$SintaxPrueba$do_action_part00000000(
                               CUP$SintaxPrueba$act_num,
                               CUP$SintaxPrueba$parser,
                               CUP$SintaxPrueba$stack,
                               CUP$SintaxPrueba$top);
    }
}

}
