
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analisis;

import java_cup.runtime.Symbol;
import codigo.FrmPrincipal;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintaxPrueba extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public SintaxPrueba() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintaxPrueba(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintaxPrueba(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\271\000\002\002\004\000\002\042\002\000\002\002" +
    "\016\000\002\043\002\000\002\002\010\000\002\044\002" +
    "\000\002\002\007\000\002\014\004\000\002\045\002\000" +
    "\002\014\005\000\002\014\005\000\002\046\002\000\002" +
    "\014\006\000\002\047\002\000\002\013\012\000\002\050" +
    "\002\000\002\015\006\000\002\015\003\000\002\015\002" +
    "\000\002\051\002\000\002\003\007\000\002\052\002\000" +
    "\002\003\006\000\002\053\002\000\002\003\007\000\002" +
    "\054\002\000\002\003\006\000\002\055\002\000\002\003" +
    "\007\000\002\056\002\000\002\003\006\000\002\057\002" +
    "\000\002\003\007\000\002\060\002\000\002\003\006\000" +
    "\002\003\005\000\002\061\002\000\002\003\005\000\002" +
    "\062\002\000\002\003\007\000\002\063\002\000\002\003" +
    "\006\000\002\003\005\000\002\064\002\000\002\003\005" +
    "\000\002\003\005\000\002\003\006\000\002\065\002\000" +
    "\002\003\006\000\002\003\006\000\002\066\002\000\002" +
    "\003\006\000\002\003\007\000\002\067\002\000\002\003" +
    "\007\000\002\003\007\000\002\070\002\000\002\003\007" +
    "\000\002\003\007\000\002\071\002\000\002\003\007\000" +
    "\002\003\007\000\002\072\002\000\002\003\007\000\002" +
    "\003\007\000\002\073\002\000\002\003\007\000\002\003" +
    "\007\000\002\074\002\000\002\003\007\000\002\003\007" +
    "\000\002\075\002\000\002\003\007\000\002\003\007\000" +
    "\002\076\002\000\002\003\007\000\002\003\006\000\002" +
    "\077\002\000\002\003\006\000\002\003\006\000\002\100" +
    "\002\000\002\003\006\000\002\003\005\000\002\101\002" +
    "\000\002\003\005\000\002\003\004\000\002\003\003\000" +
    "\002\102\002\000\002\003\005\000\002\103\002\000\002" +
    "\003\006\000\002\003\002\000\002\104\002\000\002\021" +
    "\010\000\002\021\004\000\002\021\004\000\002\105\002" +
    "\000\002\020\006\000\002\020\003\000\002\020\002\000" +
    "\002\004\005\000\002\005\005\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\017\004" +
    "\000\002\017\004\000\002\017\003\000\002\106\002\000" +
    "\002\016\006\000\002\107\002\000\002\032\006\000\002" +
    "\007\004\000\002\030\004\000\002\031\003\000\002\031" +
    "\003\000\002\031\003\000\002\110\002\000\002\023\005" +
    "\000\002\111\002\000\002\112\002\000\002\024\007\000" +
    "\002\113\002\000\002\114\002\000\002\024\007\000\002" +
    "\024\002\000\002\115\002\000\002\025\005\000\002\116" +
    "\002\000\002\117\002\000\002\026\007\000\002\120\002" +
    "\000\002\121\002\000\002\026\007\000\002\026\002\000" +
    "\002\027\003\000\002\027\004\000\002\027\003\000\002" +
    "\022\003\000\002\022\003\000\002\022\004\000\002\022" +
    "\004\000\002\022\005\000\002\033\011\000\002\033\012" +
    "\000\002\122\002\000\002\034\005\000\002\123\002\000" +
    "\002\034\005\000\002\124\002\000\002\125\002\000\002" +
    "\037\007\000\002\126\002\000\002\127\002\000\002\037" +
    "\007\000\002\130\002\000\002\131\002\000\002\037\007" +
    "\000\002\132\002\000\002\133\002\000\002\037\007\000" +
    "\002\037\002\000\002\134\002\000\002\135\002\000\002" +
    "\035\010\000\002\040\004\000\002\040\004\000\002\040" +
    "\004\000\002\040\004\000\002\040\004\000\002\040\004" +
    "\000\002\041\003\000\002\041\003\000\002\041\005\000" +
    "\002\041\004\000\002\041\004\000\002\041\003\000\002" +
    "\036\005\000\002\036\006\000\002\010\014\000\002\011" +
    "\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0156\000\006\003\004\016\005\001\002\000\036\003" +
    "\ufffc\010\ufffc\014\ufffc\015\ufffc\026\ufffc\027\ufffc\036\ufffc" +
    "\037\ufffc\040\ufffc\046\ufffc\064\ufffc\065\ufffc\072\ufffc\101" +
    "\ufffc\001\002\000\006\003\010\101\011\001\002\000\004" +
    "\002\007\001\002\000\004\002\001\001\002\000\036\003" +
    "\ufffe\010\ufffe\014\ufffe\015\ufffe\026\ufffe\027\ufffe\036\ufffe" +
    "\037\ufffe\040\ufffe\046\ufffe\064\ufffe\065\ufffe\072\ufffe\101" +
    "\ufffe\001\002\000\004\071\000\001\002\000\004\071\013" +
    "\001\002\000\004\005\014\001\002\000\004\067\015\001" +
    "\002\000\004\021\016\001\002\000\004\077\u014f\001\002" +
    "\000\004\070\020\001\002\000\004\071\021\001\002\000" +
    "\036\003\034\010\041\014\026\015\030\026\042\027\032" +
    "\036\023\037\027\040\022\046\033\064\036\065\037\072" +
    "\uffa6\101\040\001\002\000\004\022\046\001\002\000\004" +
    "\041\u0145\001\002\000\042\003\uffdd\010\uffdd\014\uffdd\015" +
    "\uffdd\026\uffdd\027\uffdd\036\uffdd\037\uffdd\040\uffdd\046\uffdd" +
    "\064\uffdd\065\uffdd\066\u013a\072\uffdd\075\u013b\101\uffdd\001" +
    "\002\000\004\072\u011f\001\002\000\004\022\046\001\002" +
    "\000\004\041\u0115\001\002\000\006\072\uffab\075\u0114\001" +
    "\002\000\040\003\uffd6\010\uffd6\014\uffd6\015\uffd6\026\uffd6" +
    "\027\uffd6\036\uffd6\037\uffd6\040\uffd6\046\uffd6\064\uffd6\065" +
    "\uffd6\072\uffd6\075\u0111\101\uffd6\001\002\000\006\030\372" +
    "\031\373\001\002\000\010\012\337\013\342\101\340\001" +
    "\002\000\040\003\uffaa\010\uffaa\014\uffaa\015\uffaa\026\uffaa" +
    "\027\uffaa\036\uffaa\037\uffaa\040\uffaa\046\uffaa\064\uffaa\065" +
    "\uffaa\072\uffaa\075\uffa8\101\uffaa\001\002\000\040\003\uffae" +
    "\010\uffae\014\uffae\015\uffae\026\uffae\027\uffae\036\uffae\037" +
    "\uffae\040\uffae\046\uffae\064\uffae\065\uffae\072\uffae\075\326" +
    "\101\uffae\001\002\000\004\101\317\001\002\000\004\101" +
    "\311\001\002\000\012\017\uff8f\064\255\065\256\066\uff91" +
    "\001\002\000\004\067\147\001\002\000\006\030\043\031" +
    "\044\001\002\000\006\022\046\032\135\001\002\000\006" +
    "\022\046\032\047\001\002\000\040\003\uffcc\010\uffcc\014" +
    "\uffcc\015\uffcc\026\uffcc\027\uffcc\036\uffcc\037\uffcc\040\uffcc" +
    "\046\uffcc\064\uffcc\065\uffcc\072\uffcc\075\131\101\uffcc\001" +
    "\002\000\016\003\060\033\055\056\061\067\062\077\057" +
    "\101\064\001\002\000\040\003\uffc9\010\uffc9\014\uffc9\015" +
    "\uffc9\026\uffc9\027\uffc9\036\uffc9\037\uffc9\040\uffc9\046\uffc9" +
    "\064\uffc9\065\uffc9\072\uffc9\075\051\101\uffc9\001\002\000" +
    "\036\003\034\010\041\014\026\015\030\026\042\027\032" +
    "\036\023\037\027\040\022\046\033\064\036\065\037\072" +
    "\uffa6\101\040\001\002\000\036\003\034\010\041\014\026" +
    "\015\030\026\042\027\032\036\023\037\027\040\022\046" +
    "\033\064\036\065\037\072\uffa6\101\040\001\002\000\004" +
    "\072\uffca\001\002\000\004\072\uffc8\001\002\000\012\003" +
    "\124\023\127\024\123\025\125\001\002\000\006\034\121" +
    "\035\122\001\002\000\100\003\uff76\010\uff76\014\uff76\015" +
    "\uff76\023\uff76\024\uff76\025\uff76\026\uff76\027\uff76\036\uff76" +
    "\037\uff76\040\uff76\046\uff76\047\uff76\050\uff76\051\uff76\052" +
    "\uff76\053\uff76\054\uff76\055\uff76\056\uff76\057\uff76\060\uff76" +
    "\064\uff76\065\uff76\070\uff76\072\uff76\074\uff76\075\uff76\076" +
    "\uff76\101\uff76\001\002\000\100\003\uff73\010\uff73\014\uff73" +
    "\015\uff73\023\uff73\024\uff73\025\uff73\026\uff73\027\uff73\036" +
    "\uff73\037\uff73\040\uff73\046\uff73\047\uff73\050\uff73\051\uff73" +
    "\052\uff73\053\uff73\054\uff73\055\uff73\056\uff73\057\uff73\060" +
    "\uff73\064\uff73\065\uff73\070\uff73\072\uff73\074\uff73\075\uff73" +
    "\076\uff73\101\uff73\001\002\000\100\003\uff74\010\uff74\014" +
    "\uff74\015\uff74\023\uff74\024\uff74\025\uff74\026\uff74\027\uff74" +
    "\036\uff74\037\uff74\040\uff74\046\uff74\047\uff74\050\uff74\051" +
    "\uff74\052\uff74\053\uff74\054\uff74\055\uff74\056\uff74\057\uff74" +
    "\060\uff74\064\uff74\065\uff74\070\uff74\072\uff74\074\uff74\075" +
    "\uff74\076\uff74\101\uff74\001\002\000\012\033\055\067\062" +
    "\077\057\101\064\001\002\000\016\003\060\033\055\056" +
    "\061\067\062\077\057\101\064\001\002\000\100\003\uff7f" +
    "\010\uff7f\014\uff7f\015\uff7f\023\uff7f\024\uff7f\025\uff7f\026" +
    "\uff7f\027\uff7f\036\uff7f\037\uff7f\040\uff7f\046\uff7f\047\uff7f" +
    "\050\uff7f\051\uff7f\052\uff7f\053\uff7f\054\uff7f\055\uff7f\056" +
    "\uff7f\057\uff7f\060\uff7f\064\uff7f\065\uff7f\070\uff7f\072\uff7f" +
    "\074\uff7f\075\uff7f\076\uff7f\101\uff7f\001\002\000\100\003" +
    "\uff72\010\uff72\014\uff72\015\uff72\023\uff72\024\uff72\025\uff72" +
    "\026\uff72\027\uff72\036\uff72\037\uff72\040\uff72\046\uff72\047" +
    "\uff72\050\uff72\051\uff72\052\uff72\053\uff72\054\uff72\055\uff72" +
    "\056\uff72\057\uff72\060\uff72\064\uff72\065\uff72\070\uff72\072" +
    "\uff72\074\uff72\075\uff72\076\uff72\101\uff72\001\002\000\074" +
    "\003\uff88\010\uff88\014\uff88\015\uff88\023\uff88\024\uff88\025" +
    "\uff88\026\uff88\027\uff88\036\uff88\037\uff88\040\uff88\046\uff88" +
    "\047\uff88\050\uff88\051\uff88\052\uff88\053\uff88\054\uff88\055" +
    "\uff88\056\uff88\064\uff88\065\uff88\070\uff88\072\uff88\074\uff88" +
    "\075\uff88\076\uff88\101\uff88\001\002\000\074\003\uff80\010" +
    "\uff80\014\uff80\015\uff80\023\uff80\024\uff80\025\uff80\026\uff80" +
    "\027\uff80\036\uff80\037\uff80\040\uff80\046\uff80\047\uff80\050" +
    "\uff80\051\uff80\052\uff80\053\uff80\054\uff80\055\071\056\067" +
    "\064\uff80\065\uff80\070\uff80\072\uff80\074\uff80\075\uff80\076" +
    "\uff80\101\uff80\001\002\000\016\003\uff83\033\uff83\056\uff83" +
    "\067\uff83\077\uff83\101\uff83\001\002\000\070\003\uff87\010" +
    "\uff87\014\uff87\015\uff87\023\uff87\024\uff87\025\uff87\026\uff87" +
    "\027\uff87\036\uff87\037\uff87\040\uff87\046\uff87\047\uff87\050" +
    "\uff87\051\uff87\052\uff87\053\uff87\054\uff87\064\uff87\065\uff87" +
    "\070\uff87\072\uff87\074\uff87\075\uff87\076\uff87\101\uff87\001" +
    "\002\000\016\003\uff86\033\uff86\056\uff86\067\uff86\077\uff86" +
    "\101\uff86\001\002\000\016\003\060\033\055\056\061\067" +
    "\062\077\057\101\064\001\002\000\074\003\uff85\010\uff85" +
    "\014\uff85\015\uff85\023\uff85\024\uff85\025\uff85\026\uff85\027" +
    "\uff85\036\uff85\037\uff85\040\uff85\046\uff85\047\uff85\050\uff85" +
    "\051\uff85\052\uff85\053\uff85\054\uff85\055\uff85\056\uff85\064" +
    "\uff85\065\uff85\070\uff85\072\uff85\074\uff85\075\uff85\076\uff85" +
    "\101\uff85\001\002\000\074\003\uff80\010\uff80\014\uff80\015" +
    "\uff80\023\uff80\024\uff80\025\uff80\026\uff80\027\uff80\036\uff80" +
    "\037\uff80\040\uff80\046\uff80\047\uff80\050\uff80\051\uff80\052" +
    "\uff80\053\uff80\054\uff80\055\071\056\067\064\uff80\065\uff80" +
    "\070\uff80\072\uff80\074\uff80\075\uff80\076\uff80\101\uff80\001" +
    "\002\000\070\003\uff84\010\uff84\014\uff84\015\uff84\023\uff84" +
    "\024\uff84\025\uff84\026\uff84\027\uff84\036\uff84\037\uff84\040" +
    "\uff84\046\uff84\047\uff84\050\uff84\051\uff84\052\uff84\053\uff84" +
    "\054\uff84\064\uff84\065\uff84\070\uff84\072\uff84\074\uff84\075" +
    "\uff84\076\uff84\101\uff84\001\002\000\016\003\060\033\055" +
    "\056\061\067\062\077\057\101\064\001\002\000\074\003" +
    "\uff82\010\uff82\014\uff82\015\uff82\023\uff82\024\uff82\025\uff82" +
    "\026\uff82\027\uff82\036\uff82\037\uff82\040\uff82\046\uff82\047" +
    "\uff82\050\uff82\051\uff82\052\uff82\053\uff82\054\uff82\055\uff82" +
    "\056\uff82\064\uff82\065\uff82\070\uff82\072\uff82\074\uff82\075" +
    "\uff82\076\uff82\101\uff82\001\002\000\074\003\uff80\010\uff80" +
    "\014\uff80\015\uff80\023\uff80\024\uff80\025\uff80\026\uff80\027" +
    "\uff80\036\uff80\037\uff80\040\uff80\046\uff80\047\uff80\050\uff80" +
    "\051\uff80\052\uff80\053\uff80\054\uff80\055\071\056\067\064" +
    "\uff80\065\uff80\070\uff80\072\uff80\074\uff80\075\uff80\076\uff80" +
    "\101\uff80\001\002\000\070\003\uff81\010\uff81\014\uff81\015" +
    "\uff81\023\uff81\024\uff81\025\uff81\026\uff81\027\uff81\036\uff81" +
    "\037\uff81\040\uff81\046\uff81\047\uff81\050\uff81\051\uff81\052" +
    "\uff81\053\uff81\054\uff81\064\uff81\065\uff81\070\uff81\072\uff81" +
    "\074\uff81\075\uff81\076\uff81\101\uff81\001\002\000\100\003" +
    "\uff77\010\uff77\014\uff77\015\uff77\023\uff77\024\uff77\025\uff77" +
    "\026\uff77\027\uff77\036\uff77\037\uff77\040\uff77\046\uff77\047" +
    "\uff77\050\uff77\051\uff77\052\uff77\053\uff77\054\uff77\055\uff77" +
    "\056\uff77\057\105\060\104\064\uff77\065\uff77\070\uff77\072" +
    "\uff77\074\uff77\075\uff77\076\uff77\101\uff77\001\002\000\074" +
    "\003\uff7e\010\uff7e\014\uff7e\015\uff7e\023\uff7e\024\uff7e\025" +
    "\uff7e\026\uff7e\027\uff7e\036\uff7e\037\uff7e\040\uff7e\046\uff7e" +
    "\047\uff7e\050\uff7e\051\uff7e\052\uff7e\053\uff7e\054\uff7e\055" +
    "\uff7e\056\uff7e\064\uff7e\065\uff7e\070\uff7e\072\uff7e\074\uff7e" +
    "\075\uff7e\076\uff7e\101\uff7e\001\002\000\016\003\uff7a\033" +
    "\uff7a\056\uff7a\067\uff7a\077\uff7a\101\uff7a\001\002\000\016" +
    "\003\uff7d\033\uff7d\056\uff7d\067\uff7d\077\uff7d\101\uff7d\001" +
    "\002\000\016\003\060\033\055\056\061\067\062\077\057" +
    "\101\064\001\002\000\100\003\uff7c\010\uff7c\014\uff7c\015" +
    "\uff7c\023\uff7c\024\uff7c\025\uff7c\026\uff7c\027\uff7c\036\uff7c" +
    "\037\uff7c\040\uff7c\046\uff7c\047\uff7c\050\uff7c\051\uff7c\052" +
    "\uff7c\053\uff7c\054\uff7c\055\uff7c\056\uff7c\057\uff7c\060\uff7c" +
    "\064\uff7c\065\uff7c\070\uff7c\072\uff7c\074\uff7c\075\uff7c\076" +
    "\uff7c\101\uff7c\001\002\000\100\003\uff77\010\uff77\014\uff77" +
    "\015\uff77\023\uff77\024\uff77\025\uff77\026\uff77\027\uff77\036" +
    "\uff77\037\uff77\040\uff77\046\uff77\047\uff77\050\uff77\051\uff77" +
    "\052\uff77\053\uff77\054\uff77\055\uff77\056\uff77\057\105\060" +
    "\104\064\uff77\065\uff77\070\uff77\072\uff77\074\uff77\075\uff77" +
    "\076\uff77\101\uff77\001\002\000\074\003\uff7b\010\uff7b\014" +
    "\uff7b\015\uff7b\023\uff7b\024\uff7b\025\uff7b\026\uff7b\027\uff7b" +
    "\036\uff7b\037\uff7b\040\uff7b\046\uff7b\047\uff7b\050\uff7b\051" +
    "\uff7b\052\uff7b\053\uff7b\054\uff7b\055\uff7b\056\uff7b\064\uff7b" +
    "\065\uff7b\070\uff7b\072\uff7b\074\uff7b\075\uff7b\076\uff7b\101" +
    "\uff7b\001\002\000\016\003\060\033\055\056\061\067\062" +
    "\077\057\101\064\001\002\000\100\003\uff79\010\uff79\014" +
    "\uff79\015\uff79\023\uff79\024\uff79\025\uff79\026\uff79\027\uff79" +
    "\036\uff79\037\uff79\040\uff79\046\uff79\047\uff79\050\uff79\051" +
    "\uff79\052\uff79\053\uff79\054\uff79\055\uff79\056\uff79\057\uff79" +
    "\060\uff79\064\uff79\065\uff79\070\uff79\072\uff79\074\uff79\075" +
    "\uff79\076\uff79\101\uff79\001\002\000\100\003\uff77\010\uff77" +
    "\014\uff77\015\uff77\023\uff77\024\uff77\025\uff77\026\uff77\027" +
    "\uff77\036\uff77\037\uff77\040\uff77\046\uff77\047\uff77\050\uff77" +
    "\051\uff77\052\uff77\053\uff77\054\uff77\055\uff77\056\uff77\057" +
    "\105\060\104\064\uff77\065\uff77\070\uff77\072\uff77\074\uff77" +
    "\075\uff77\076\uff77\101\uff77\001\002\000\074\003\uff78\010" +
    "\uff78\014\uff78\015\uff78\023\uff78\024\uff78\025\uff78\026\uff78" +
    "\027\uff78\036\uff78\037\uff78\040\uff78\046\uff78\047\uff78\050" +
    "\uff78\051\uff78\052\uff78\053\uff78\054\uff78\055\uff78\056\uff78" +
    "\064\uff78\065\uff78\070\uff78\072\uff78\074\uff78\075\uff78\076" +
    "\uff78\101\uff78\001\002\000\004\070\117\001\002\000\100" +
    "\003\uff6f\010\uff6f\014\uff6f\015\uff6f\023\uff6f\024\uff6f\025" +
    "\uff6f\026\uff6f\027\uff6f\036\uff6f\037\uff6f\040\uff6f\046\uff6f" +
    "\047\uff6f\050\uff6f\051\uff6f\052\uff6f\053\uff6f\054\uff6f\055" +
    "\uff6f\056\uff6f\057\uff6f\060\uff6f\064\uff6f\065\uff6f\070\uff6f" +
    "\072\uff6f\074\uff6f\075\uff6f\076\uff6f\101\uff6f\001\002\000" +
    "\100\003\uff75\010\uff75\014\uff75\015\uff75\023\uff75\024\uff75" +
    "\025\uff75\026\uff75\027\uff75\036\uff75\037\uff75\040\uff75\046" +
    "\uff75\047\uff75\050\uff75\051\uff75\052\uff75\053\uff75\054\uff75" +
    "\055\uff75\056\uff75\057\uff75\060\uff75\064\uff75\065\uff75\070" +
    "\uff75\072\uff75\074\uff75\075\uff75\076\uff75\101\uff75\001\002" +
    "\000\100\003\uff71\010\uff71\014\uff71\015\uff71\023\uff71\024" +
    "\uff71\025\uff71\026\uff71\027\uff71\036\uff71\037\uff71\040\uff71" +
    "\046\uff71\047\uff71\050\uff71\051\uff71\052\uff71\053\uff71\054" +
    "\uff71\055\uff71\056\uff71\057\uff71\060\uff71\064\uff71\065\uff71" +
    "\070\uff71\072\uff71\074\uff71\075\uff71\076\uff71\101\uff71\001" +
    "\002\000\100\003\uff70\010\uff70\014\uff70\015\uff70\023\uff70" +
    "\024\uff70\025\uff70\026\uff70\027\uff70\036\uff70\037\uff70\040" +
    "\uff70\046\uff70\047\uff70\050\uff70\051\uff70\052\uff70\053\uff70" +
    "\054\uff70\055\uff70\056\uff70\057\uff70\060\uff70\064\uff70\065" +
    "\uff70\070\uff70\072\uff70\074\uff70\075\uff70\076\uff70\101\uff70" +
    "\001\002\000\044\003\uff9a\010\uff9a\014\uff9a\015\uff9a\026" +
    "\uff9a\027\uff9a\036\uff9a\037\uff9a\040\uff9a\046\uff9a\064\uff9a" +
    "\065\uff9a\070\uff9a\072\uff9a\075\uff9a\076\uff9a\101\uff9a\001" +
    "\002\000\044\003\uff98\010\uff98\014\uff98\015\uff98\026\uff98" +
    "\027\uff98\036\uff98\037\uff98\040\uff98\046\uff98\064\uff98\065" +
    "\uff98\070\uff98\072\uff98\075\uff98\076\uff98\101\uff98\001\002" +
    "\000\044\003\uff99\010\uff99\014\uff99\015\uff99\026\uff99\027" +
    "\uff99\036\uff99\037\uff99\040\uff99\046\uff99\064\uff99\065\uff99" +
    "\070\uff99\072\uff99\075\uff99\076\uff99\101\uff99\001\002\000" +
    "\044\003\uff9c\010\uff9c\014\uff9c\015\uff9c\026\uff9c\027\uff9c" +
    "\036\uff9c\037\uff9c\040\uff9c\046\uff9c\064\uff9c\065\uff9c\070" +
    "\uff9c\072\uff9c\075\uff9c\076\uff9c\101\uff9c\001\002\000\044" +
    "\003\uff9b\010\uff9b\014\uff9b\015\uff9b\026\uff9b\027\uff9b\036" +
    "\uff9b\037\uff9b\040\uff9b\046\uff9b\064\uff9b\065\uff9b\070\uff9b" +
    "\072\uff9b\075\uff9b\076\uff9b\101\uff9b\001\002\000\036\003" +
    "\034\010\041\014\026\015\030\026\042\027\032\036\023" +
    "\037\027\040\022\046\033\064\036\065\037\072\uffa6\101" +
    "\040\001\002\000\036\003\034\010\041\014\026\015\030" +
    "\026\042\027\032\036\023\037\027\040\022\046\033\064" +
    "\036\065\037\072\uffa6\101\040\001\002\000\004\072\uffcd" +
    "\001\002\000\004\072\uffcb\001\002\000\040\003\uffc0\010" +
    "\uffc0\014\uffc0\015\uffc0\026\uffc0\027\uffc0\036\uffc0\037\uffc0" +
    "\040\uffc0\046\uffc0\064\uffc0\065\uffc0\072\uffc0\075\142\101" +
    "\uffc0\001\002\000\040\003\uffbd\010\uffbd\014\uffbd\015\uffbd" +
    "\026\uffbd\027\uffbd\036\uffbd\037\uffbd\040\uffbd\046\uffbd\064" +
    "\uffbd\065\uffbd\072\uffbd\075\136\101\uffbd\001\002\000\036" +
    "\003\034\010\041\014\026\015\030\026\042\027\032\036" +
    "\023\037\027\040\022\046\033\064\036\065\037\072\uffa6" +
    "\101\040\001\002\000\036\003\034\010\041\014\026\015" +
    "\030\026\042\027\032\036\023\037\027\040\022\046\033" +
    "\064\036\065\037\072\uffa6\101\040\001\002\000\004\072" +
    "\uffbc\001\002\000\004\072\uffbe\001\002\000\036\003\034" +
    "\010\041\014\026\015\030\026\042\027\032\036\023\037" +
    "\027\040\022\046\033\064\036\065\037\072\uffa6\101\040" +
    "\001\002\000\036\003\034\010\041\014\026\015\030\026" +
    "\042\027\032\036\023\037\027\040\022\046\033\064\036" +
    "\065\037\072\uffa6\101\040\001\002\000\004\072\uffbf\001" +
    "\002\000\004\072\uffc1\001\002\000\036\003\034\010\041" +
    "\014\026\015\030\026\042\027\032\036\023\037\027\040" +
    "\022\046\033\064\036\065\037\072\uffa6\101\040\001\002" +
    "\000\004\045\150\001\002\000\020\003\155\042\160\061" +
    "\161\067\156\073\157\100\153\101\162\001\002\000\050" +
    "\003\uff6c\010\uff6c\014\uff6c\015\uff6c\026\uff6c\027\uff6c\036" +
    "\uff6c\037\uff6c\040\uff6c\046\uff6c\062\uff6c\063\uff6c\064\uff6c" +
    "\065\uff6c\070\uff6c\072\uff6c\075\uff6c\076\uff6c\101\uff6c\001" +
    "\002\000\004\070\237\001\002\000\050\003\uff51\010\uff51" +
    "\014\uff51\015\uff51\026\uff51\027\uff51\036\uff51\037\uff51\040" +
    "\uff51\046\uff51\062\uff51\063\uff51\064\uff51\065\uff51\070\uff51" +
    "\072\uff51\075\uff51\076\uff51\101\uff51\001\002\000\050\003" +
    "\uff6a\010\uff6a\014\uff6a\015\uff6a\026\uff6a\027\uff6a\036\uff6a" +
    "\037\uff6a\040\uff6a\046\uff6a\062\uff6a\063\uff6a\064\uff6a\065" +
    "\uff6a\070\uff6a\072\uff6a\075\uff6a\076\uff6a\101\uff6a\001\002" +
    "\000\050\003\uff4d\010\uff4d\014\uff4d\015\uff4d\026\uff4d\027" +
    "\uff4d\036\uff4d\037\uff4d\040\uff4d\046\uff4d\062\uff4d\063\uff4d" +
    "\064\uff4d\065\uff4d\070\uff4d\072\uff4d\075\uff4d\076\uff4d\101" +
    "\uff4d\001\002\000\020\003\155\042\160\061\161\067\156" +
    "\073\157\100\153\101\162\001\002\000\016\003\060\033" +
    "\055\056\061\067\062\077\057\101\064\001\002\000\010" +
    "\030\164\031\167\041\165\001\002\000\016\003\155\042" +
    "\160\061\161\067\156\100\153\101\162\001\002\000\050" +
    "\003\uff52\010\uff52\014\uff52\015\uff52\026\uff52\027\uff52\036" +
    "\uff52\037\uff52\040\uff52\046\uff52\062\uff52\063\uff52\064\uff52" +
    "\065\uff52\070\uff52\072\uff52\075\uff52\076\uff52\101\uff52\001" +
    "\002\000\050\003\uff4e\010\uff4e\014\uff4e\015\uff4e\026\uff4e" +
    "\027\uff4e\036\uff4e\037\uff4e\040\uff4e\046\uff4e\062\uff4e\063" +
    "\uff4e\064\uff4e\065\uff4e\070\uff4e\072\uff4e\075\uff4e\076\uff4e" +
    "\101\uff4e\001\002\000\050\003\uff95\010\uff95\014\uff95\015" +
    "\uff95\026\uff95\027\uff95\036\uff95\037\uff95\040\uff95\046\uff95" +
    "\062\uff95\063\uff95\064\uff95\065\uff95\070\uff95\072\uff95\075" +
    "\uff95\076\uff95\101\uff95\001\002\000\050\003\uff97\010\uff97" +
    "\014\uff97\015\uff97\026\uff97\027\uff97\036\uff97\037\uff97\040" +
    "\uff97\046\uff97\062\uff97\063\uff97\064\uff97\065\uff97\070\uff97" +
    "\072\uff97\075\uff97\076\uff97\101\uff97\001\002\000\050\003" +
    "\uff4f\010\uff4f\014\uff4f\015\uff4f\026\uff4f\027\uff4f\036\uff4f" +
    "\037\uff4f\040\uff4f\046\uff4f\062\uff4f\063\uff4f\064\uff4f\065" +
    "\uff4f\070\uff4f\072\uff4f\075\uff4f\076\uff4f\101\uff4f\001\002" +
    "\000\050\003\uff96\010\uff96\014\uff96\015\uff96\026\uff96\027" +
    "\uff96\036\uff96\037\uff96\040\uff96\046\uff96\062\uff96\063\uff96" +
    "\064\uff96\065\uff96\070\uff96\072\uff96\075\uff96\076\uff96\101" +
    "\uff96\001\002\000\016\047\uff5b\050\uff5b\051\uff5b\052\uff5b" +
    "\053\uff5b\054\uff5b\001\002\000\016\047\174\050\175\051" +
    "\172\052\173\053\176\054\200\001\002\000\016\003\060" +
    "\033\055\056\061\067\062\077\057\101\064\001\002\000" +
    "\016\003\060\033\055\056\061\067\062\077\057\101\064" +
    "\001\002\000\016\003\060\033\055\056\061\067\062\077" +
    "\057\101\064\001\002\000\016\003\060\033\055\056\061" +
    "\067\062\077\057\101\064\001\002\000\016\003\060\033" +
    "\055\056\061\067\062\077\057\101\064\001\002\000\004" +
    "\074\uff5a\001\002\000\016\003\060\033\055\056\061\067" +
    "\062\077\057\101\064\001\002\000\004\074\uff53\001\002" +
    "\000\004\074\203\001\002\000\050\003\uff59\010\uff59\014" +
    "\uff59\015\uff59\026\uff59\027\uff59\036\uff59\037\uff59\040\uff59" +
    "\046\uff59\062\uff59\063\uff59\064\uff59\065\uff59\070\uff59\072" +
    "\uff59\075\uff59\076\uff59\101\uff59\001\002\000\004\074\uff54" +
    "\001\002\000\004\074\uff57\001\002\000\004\074\uff58\001" +
    "\002\000\004\074\uff55\001\002\000\004\074\uff56\001\002" +
    "\000\004\070\212\001\002\000\050\003\uff50\010\uff50\014" +
    "\uff50\015\uff50\026\uff50\027\uff50\036\uff50\037\uff50\040\uff50" +
    "\046\uff50\062\uff50\063\uff50\064\uff50\065\uff50\070\uff50\072" +
    "\uff50\075\uff50\076\uff50\101\uff50\001\002\000\050\003\uff5c" +
    "\010\uff5c\014\uff5c\015\uff5c\026\uff5c\027\uff5c\036\uff5c\037" +
    "\uff5c\040\uff5c\046\uff5c\062\215\063\216\064\uff5c\065\uff5c" +
    "\070\uff5c\072\uff5c\075\uff5c\076\uff5c\101\uff5c\001\002\000" +
    "\044\003\uff69\010\uff69\014\uff69\015\uff69\026\uff69\027\uff69" +
    "\036\uff69\037\uff69\040\uff69\046\uff69\064\uff69\065\uff69\070" +
    "\uff69\072\uff69\075\uff69\076\uff69\101\uff69\001\002\000\020" +
    "\003\uff68\042\uff68\061\uff68\067\uff68\073\uff62\100\uff68\101" +
    "\uff68\001\002\000\020\003\uff65\042\uff65\061\uff65\067\uff65" +
    "\073\uff5f\100\uff65\101\uff65\001\002\000\004\073\157\001" +
    "\002\000\016\003\155\042\160\061\161\067\156\100\153" +
    "\101\162\001\002\000\050\003\uff64\010\uff64\014\uff64\015" +
    "\uff64\026\uff64\027\uff64\036\uff64\037\uff64\040\uff64\046\uff64" +
    "\062\uff64\063\uff64\064\uff64\065\uff64\070\uff64\072\uff64\075" +
    "\uff64\076\uff64\101\uff64\001\002\000\050\003\uff5c\010\uff5c" +
    "\014\uff5c\015\uff5c\026\uff5c\027\uff5c\036\uff5c\037\uff5c\040" +
    "\uff5c\046\uff5c\062\215\063\216\064\uff5c\065\uff5c\070\uff5c" +
    "\072\uff5c\075\uff5c\076\uff5c\101\uff5c\001\002\000\044\003" +
    "\uff63\010\uff63\014\uff63\015\uff63\026\uff63\027\uff63\036\uff63" +
    "\037\uff63\040\uff63\046\uff63\064\uff63\065\uff63\070\uff63\072" +
    "\uff63\075\uff63\076\uff63\101\uff63\001\002\000\050\003\uff5e" +
    "\010\uff5e\014\uff5e\015\uff5e\026\uff5e\027\uff5e\036\uff5e\037" +
    "\uff5e\040\uff5e\046\uff5e\062\uff5e\063\uff5e\064\uff5e\065\uff5e" +
    "\070\uff5e\072\uff5e\075\uff5e\076\uff5e\101\uff5e\001\002\000" +
    "\050\003\uff5c\010\uff5c\014\uff5c\015\uff5c\026\uff5c\027\uff5c" +
    "\036\uff5c\037\uff5c\040\uff5c\046\uff5c\062\215\063\216\064" +
    "\uff5c\065\uff5c\070\uff5c\072\uff5c\075\uff5c\076\uff5c\101\uff5c" +
    "\001\002\000\044\003\uff5d\010\uff5d\014\uff5d\015\uff5d\026" +
    "\uff5d\027\uff5d\036\uff5d\037\uff5d\040\uff5d\046\uff5d\064\uff5d" +
    "\065\uff5d\070\uff5d\072\uff5d\075\uff5d\076\uff5d\101\uff5d\001" +
    "\002\000\004\073\157\001\002\000\016\003\155\042\160" +
    "\061\161\067\156\100\153\101\162\001\002\000\050\003" +
    "\uff67\010\uff67\014\uff67\015\uff67\026\uff67\027\uff67\036\uff67" +
    "\037\uff67\040\uff67\046\uff67\062\uff67\063\uff67\064\uff67\065" +
    "\uff67\070\uff67\072\uff67\075\uff67\076\uff67\101\uff67\001\002" +
    "\000\050\003\uff5c\010\uff5c\014\uff5c\015\uff5c\026\uff5c\027" +
    "\uff5c\036\uff5c\037\uff5c\040\uff5c\046\uff5c\062\215\063\216" +
    "\064\uff5c\065\uff5c\070\uff5c\072\uff5c\075\uff5c\076\uff5c\101" +
    "\uff5c\001\002\000\044\003\uff66\010\uff66\014\uff66\015\uff66" +
    "\026\uff66\027\uff66\036\uff66\037\uff66\040\uff66\046\uff66\064" +
    "\uff66\065\uff66\070\uff66\072\uff66\075\uff66\076\uff66\101\uff66" +
    "\001\002\000\050\003\uff61\010\uff61\014\uff61\015\uff61\026" +
    "\uff61\027\uff61\036\uff61\037\uff61\040\uff61\046\uff61\062\uff61" +
    "\063\uff61\064\uff61\065\uff61\070\uff61\072\uff61\075\uff61\076" +
    "\uff61\101\uff61\001\002\000\050\003\uff5c\010\uff5c\014\uff5c" +
    "\015\uff5c\026\uff5c\027\uff5c\036\uff5c\037\uff5c\040\uff5c\046" +
    "\uff5c\062\215\063\216\064\uff5c\065\uff5c\070\uff5c\072\uff5c" +
    "\075\uff5c\076\uff5c\101\uff5c\001\002\000\044\003\uff60\010" +
    "\uff60\014\uff60\015\uff60\026\uff60\027\uff60\036\uff60\037\uff60" +
    "\040\uff60\046\uff60\064\uff60\065\uff60\070\uff60\072\uff60\075" +
    "\uff60\076\uff60\101\uff60\001\002\000\004\071\240\001\002" +
    "\000\036\003\034\010\041\014\026\015\030\026\042\027" +
    "\032\036\023\037\027\040\022\046\033\064\036\065\037" +
    "\072\uffa6\101\040\001\002\000\004\072\242\001\002\000" +
    "\040\003\uff6e\010\uff6e\011\244\014\uff6e\015\uff6e\026\uff6e" +
    "\027\uff6e\036\uff6e\037\uff6e\040\uff6e\046\uff6e\064\uff6e\065" +
    "\uff6e\072\uff6e\101\uff6e\001\002\000\036\003\uff6d\010\uff6d" +
    "\014\uff6d\015\uff6d\026\uff6d\027\uff6d\036\uff6d\037\uff6d\040" +
    "\uff6d\046\uff6d\064\uff6d\065\uff6d\072\uff6d\101\uff6d\001\002" +
    "\000\006\010\245\071\246\001\002\000\004\067\147\001" +
    "\002\000\036\003\034\010\041\014\026\015\030\026\042" +
    "\027\032\036\023\037\027\040\022\046\033\064\036\065" +
    "\037\072\uffa6\101\040\001\002\000\004\072\250\001\002" +
    "\000\036\003\uff4b\010\uff4b\014\uff4b\015\uff4b\026\uff4b\027" +
    "\uff4b\036\uff4b\037\uff4b\040\uff4b\046\uff4b\064\uff4b\065\uff4b" +
    "\072\uff4b\101\uff4b\001\002\000\036\003\uff4c\010\uff4c\014" +
    "\uff4c\015\uff4c\026\uff4c\027\uff4c\036\uff4c\037\uff4c\040\uff4c" +
    "\046\uff4c\064\uff4c\065\uff4c\072\uff4c\101\uff4c\001\002\000" +
    "\050\003\uff5c\010\uff5c\014\uff5c\015\uff5c\026\uff5c\027\uff5c" +
    "\036\uff5c\037\uff5c\040\uff5c\046\uff5c\062\215\063\216\064" +
    "\uff5c\065\uff5c\070\uff5c\072\uff5c\075\uff5c\076\uff5c\101\uff5c" +
    "\001\002\000\044\003\uff6b\010\uff6b\014\uff6b\015\uff6b\026" +
    "\uff6b\027\uff6b\036\uff6b\037\uff6b\040\uff6b\046\uff6b\064\uff6b" +
    "\065\uff6b\070\uff6b\072\uff6b\075\uff6b\076\uff6b\101\uff6b\001" +
    "\002\000\004\072\uffd4\001\002\000\040\003\uffec\010\uffec" +
    "\014\uffec\015\uffec\026\uffec\027\uffec\036\uffec\037\uffec\040" +
    "\uffec\046\uffec\064\uffec\065\uffec\072\uffec\075\uffee\101\uffec" +
    "\001\002\000\040\003\uffe8\010\uffe8\014\uffe8\015\uffe8\026" +
    "\uffe8\027\uffe8\036\uffe8\037\uffe8\040\uffe8\046\uffe8\064\uffe8" +
    "\065\uffe8\072\uffe8\075\uffea\101\uffe8\001\002\000\004\017" +
    "\270\001\002\000\004\066\261\001\002\000\010\003\263" +
    "\044\262\045\264\001\002\000\016\003\060\033\055\056" +
    "\061\067\062\077\057\101\064\001\002\000\044\003\uff92" +
    "\010\uff92\014\uff92\015\uff92\026\uff92\027\uff92\036\uff92\037" +
    "\uff92\040\uff92\046\uff92\064\uff92\065\uff92\070\uff92\072\uff92" +
    "\075\uff92\076\uff92\101\uff92\001\002\000\020\003\155\042" +
    "\160\061\161\067\156\073\157\100\153\101\162\001\002" +
    "\000\040\003\uff90\010\uff90\014\uff90\015\uff90\026\uff90\027" +
    "\uff90\036\uff90\037\uff90\040\uff90\046\uff90\064\uff90\065\uff90" +
    "\072\uff90\075\uff90\101\uff90\001\002\000\044\003\uff93\010" +
    "\uff93\014\uff93\015\uff93\026\uff93\027\uff93\036\uff93\037\uff93" +
    "\040\uff93\046\uff93\064\uff93\065\uff93\070\uff93\072\uff93\075" +
    "\uff93\076\uff93\101\uff93\001\002\000\044\003\uff94\010\uff94" +
    "\014\uff94\015\uff94\026\uff94\027\uff94\036\uff94\037\uff94\040" +
    "\uff94\046\uff94\064\uff94\065\uff94\070\uff94\072\uff94\075\uff94" +
    "\076\uff94\101\uff94\001\002\000\004\020\272\001\002\000" +
    "\046\003\uff8e\010\uff8e\014\uff8e\015\uff8e\026\uff8e\027\uff8e" +
    "\036\uff8e\037\uff8e\040\uff8e\046\uff8e\064\uff8e\065\uff8e\066" +
    "\uff8e\070\uff8e\072\uff8e\075\uff8e\076\uff8e\101\uff8e\001\002" +
    "\000\010\003\274\006\276\007\275\001\002\000\046\003" +
    "\uff8c\010\uff8c\014\uff8c\015\uff8c\026\uff8c\027\uff8c\036\uff8c" +
    "\037\uff8c\040\uff8c\046\uff8c\064\uff8c\065\uff8c\066\uff8c\070" +
    "\uff8c\072\uff8c\075\uff8c\076\uff8c\101\uff8c\001\002\000\046" +
    "\003\uff89\010\uff89\014\uff89\015\uff89\026\uff89\027\uff89\036" +
    "\uff89\037\uff89\040\uff89\046\uff89\064\uff89\065\uff89\066\uff89" +
    "\070\uff89\072\uff89\075\uff89\076\uff89\101\uff89\001\002\000" +
    "\046\003\uff8a\010\uff8a\014\uff8a\015\uff8a\026\uff8a\027\uff8a" +
    "\036\uff8a\037\uff8a\040\uff8a\046\uff8a\064\uff8a\065\uff8a\066" +
    "\uff8a\070\uff8a\072\uff8a\075\uff8a\076\uff8a\101\uff8a\001\002" +
    "\000\046\003\uff8b\010\uff8b\014\uff8b\015\uff8b\026\uff8b\027" +
    "\uff8b\036\uff8b\037\uff8b\040\uff8b\046\uff8b\064\uff8b\065\uff8b" +
    "\066\uff8b\070\uff8b\072\uff8b\075\uff8b\076\uff8b\101\uff8b\001" +
    "\002\000\036\003\034\010\041\014\026\015\030\026\042" +
    "\027\032\036\023\037\027\040\022\046\033\064\036\065" +
    "\037\072\uffa6\101\040\001\002\000\004\075\301\001\002" +
    "\000\036\003\034\010\041\014\026\015\030\026\042\027" +
    "\032\036\023\037\027\040\022\046\033\064\036\065\037" +
    "\072\uffa6\101\040\001\002\000\004\072\uffe9\001\002\000" +
    "\004\072\uffe7\001\002\000\036\003\034\010\041\014\026" +
    "\015\030\026\042\027\032\036\023\037\027\040\022\046" +
    "\033\064\036\065\037\072\uffa6\101\040\001\002\000\004" +
    "\075\306\001\002\000\036\003\034\010\041\014\026\015" +
    "\030\026\042\027\032\036\023\037\027\040\022\046\033" +
    "\064\036\065\037\072\uffa6\101\040\001\002\000\004\072" +
    "\uffed\001\002\000\004\072\uffeb\001\002\000\040\003\uffe0" +
    "\010\uffe0\014\uffe0\015\uffe0\026\uffe0\027\uffe0\036\uffe0\037" +
    "\uffe0\040\uffe0\046\uffe0\064\uffe0\065\uffe0\072\uffe0\075\uffe2" +
    "\101\uffe0\001\002\000\036\003\034\010\041\014\026\015" +
    "\030\026\042\027\032\036\023\037\027\040\022\046\033" +
    "\064\036\065\037\072\uffa6\101\040\001\002\000\004\075" +
    "\314\001\002\000\036\003\034\010\041\014\026\015\030" +
    "\026\042\027\032\036\023\037\027\040\022\046\033\064" +
    "\036\065\037\072\uffa6\101\040\001\002\000\004\072\uffe1" +
    "\001\002\000\004\072\uffdf\001\002\000\040\003\uffe4\010" +
    "\uffe4\014\uffe4\015\uffe4\026\uffe4\027\uffe4\036\uffe4\037\uffe4" +
    "\040\uffe4\046\uffe4\064\uffe4\065\uffe4\072\uffe4\075\uffe6\101" +
    "\uffe4\001\002\000\036\003\034\010\041\014\026\015\030" +
    "\026\042\027\032\036\023\037\027\040\022\046\033\064" +
    "\036\065\037\072\uffa6\101\040\001\002\000\004\075\322" +
    "\001\002\000\036\003\034\010\041\014\026\015\030\026" +
    "\042\027\032\036\023\037\027\040\022\046\033\064\036" +
    "\065\037\072\uffa6\101\040\001\002\000\004\072\uffe5\001" +
    "\002\000\004\072\uffe3\001\002\000\036\003\034\010\041" +
    "\014\026\015\030\026\042\027\032\036\023\037\027\040" +
    "\022\046\033\064\036\065\037\072\uffa6\101\040\001\002" +
    "\000\036\003\034\010\041\014\026\015\030\026\042\027" +
    "\032\036\023\037\027\040\022\046\033\064\036\065\037" +
    "\072\uffa6\101\040\001\002\000\004\072\uffaf\001\002\000" +
    "\004\072\uffad\001\002\000\004\075\334\001\002\000\036" +
    "\003\034\010\041\014\026\015\030\026\042\027\032\036" +
    "\023\037\027\040\022\046\033\064\036\065\037\072\uffa6" +
    "\101\040\001\002\000\004\072\uffa9\001\002\000\036\003" +
    "\034\010\041\014\026\015\030\026\042\027\032\036\023" +
    "\037\027\040\022\046\033\064\036\065\037\072\uffa6\101" +
    "\040\001\002\000\004\072\uffa7\001\002\000\040\003\uffa3" +
    "\010\uffa3\014\uffa3\015\uffa3\026\uffa3\027\uffa3\036\uffa3\037" +
    "\uffa3\040\uffa3\046\uffa3\064\uffa3\065\uffa3\072\uffa3\075\uffa3" +
    "\101\uffa3\001\002\000\004\067\361\001\002\000\004\067" +
    "\uffa5\001\002\000\040\003\uffa2\010\uffa2\014\uffa2\015\uffa2" +
    "\026\uffa2\027\uffa2\036\uffa2\037\uffa2\040\uffa2\046\uffa2\064" +
    "\uffa2\065\uffa2\072\uffa2\075\uffa2\101\uffa2\001\002\000\004" +
    "\067\343\001\002\000\004\045\344\001\002\000\020\003" +
    "\155\042\160\061\161\067\156\073\157\100\153\101\162" +
    "\001\002\000\004\076\346\001\002\000\004\022\046\001" +
    "\002\000\004\070\350\001\002\000\040\003\uff49\010\uff49" +
    "\014\uff49\015\uff49\026\uff49\027\uff49\036\uff49\037\uff49\040" +
    "\uff49\046\uff49\064\uff49\065\uff49\072\uff49\075\uff49\101\uff49" +
    "\001\002\000\004\067\352\001\002\000\012\003\263\044" +
    "\262\045\264\070\uff9e\001\002\000\004\070\360\001\002" +
    "\000\006\070\uff9f\076\uffa1\001\002\000\004\076\356\001" +
    "\002\000\012\003\263\044\262\045\264\070\uff9e\001\002" +
    "\000\004\070\uffa0\001\002\000\040\003\uffa4\010\uffa4\014" +
    "\uffa4\015\uffa4\026\uffa4\027\uffa4\036\uffa4\037\uffa4\040\uffa4" +
    "\046\uffa4\064\uffa4\065\uffa4\072\uffa4\075\uffa4\101\uffa4\001" +
    "\002\000\004\022\046\001\002\000\004\076\363\001\002" +
    "\000\004\045\364\001\002\000\020\003\155\042\160\061" +
    "\161\067\156\073\157\100\153\101\162\001\002\000\004" +
    "\076\366\001\002\000\004\045\367\001\002\000\020\003" +
    "\155\042\160\061\161\067\156\073\157\100\153\101\162" +
    "\001\002\000\004\070\371\001\002\000\040\003\uff4a\010" +
    "\uff4a\014\uff4a\015\uff4a\026\uff4a\027\uff4a\036\uff4a\037\uff4a" +
    "\040\uff4a\046\uff4a\064\uff4a\065\uff4a\072\uff4a\075\uff4a\101" +
    "\uff4a\001\002\000\006\022\046\032\u0107\001\002\000\006" +
    "\022\046\032\375\001\002\000\040\003\uffc6\010\uffc6\014" +
    "\uffc6\015\uffc6\026\uffc6\027\uffc6\036\uffc6\037\uffc6\040\uffc6" +
    "\046\uffc6\064\uffc6\065\uffc6\072\uffc6\075\u0102\101\uffc6\001" +
    "\002\000\040\003\uffc3\010\uffc3\014\uffc3\015\uffc3\026\uffc3" +
    "\027\uffc3\036\uffc3\037\uffc3\040\uffc3\046\uffc3\064\uffc3\065" +
    "\uffc3\072\uffc3\075\376\101\uffc3\001\002\000\036\003\034" +
    "\010\041\014\026\015\030\026\042\027\032\036\023\037" +
    "\027\040\022\046\033\064\036\065\037\072\uffa6\101\040" +
    "\001\002\000\036\003\034\010\041\014\026\015\030\026" +
    "\042\027\032\036\023\037\027\040\022\046\033\064\036" +
    "\065\037\072\uffa6\101\040\001\002\000\004\072\uffc2\001" +
    "\002\000\004\072\uffc4\001\002\000\036\003\034\010\041" +
    "\014\026\015\030\026\042\027\032\036\023\037\027\040" +
    "\022\046\033\064\036\065\037\072\uffa6\101\040\001\002" +
    "\000\036\003\034\010\041\014\026\015\030\026\042\027" +
    "\032\036\023\037\027\040\022\046\033\064\036\065\037" +
    "\072\uffa6\101\040\001\002\000\004\072\uffc5\001\002\000" +
    "\004\072\uffc7\001\002\000\040\003\uffba\010\uffba\014\uffba" +
    "\015\uffba\026\uffba\027\uffba\036\uffba\037\uffba\040\uffba\046" +
    "\uffba\064\uffba\065\uffba\072\uffba\075\u010c\101\uffba\001\002" +
    "\000\040\003\uffb7\010\uffb7\014\uffb7\015\uffb7\026\uffb7\027" +
    "\uffb7\036\uffb7\037\uffb7\040\uffb7\046\uffb7\064\uffb7\065\uffb7" +
    "\072\uffb7\075\u0108\101\uffb7\001\002\000\036\003\034\010" +
    "\041\014\026\015\030\026\042\027\032\036\023\037\027" +
    "\040\022\046\033\064\036\065\037\072\uffa6\101\040\001" +
    "\002\000\036\003\034\010\041\014\026\015\030\026\042" +
    "\027\032\036\023\037\027\040\022\046\033\064\036\065" +
    "\037\072\uffa6\101\040\001\002\000\004\072\uffb6\001\002" +
    "\000\004\072\uffb8\001\002\000\036\003\034\010\041\014" +
    "\026\015\030\026\042\027\032\036\023\037\027\040\022" +
    "\046\033\064\036\065\037\072\uffa6\101\040\001\002\000" +
    "\036\003\034\010\041\014\026\015\030\026\042\027\032" +
    "\036\023\037\027\040\022\046\033\064\036\065\037\072" +
    "\uffa6\101\040\001\002\000\004\072\uffb9\001\002\000\004" +
    "\072\uffbb\001\002\000\036\003\034\010\041\014\026\015" +
    "\030\026\042\027\032\036\023\037\027\040\022\046\033" +
    "\064\036\065\037\072\uffa6\101\040\001\002\000\036\003" +
    "\034\010\041\014\026\015\030\026\042\027\032\036\023" +
    "\037\027\040\022\046\033\064\036\065\037\072\uffa6\101" +
    "\040\001\002\000\004\072\uffd7\001\002\000\004\072\uffd5" +
    "\001\002\000\004\072\uffac\001\002\000\040\003\uffcf\010" +
    "\uffcf\014\uffcf\015\uffcf\026\uffcf\027\uffcf\036\uffcf\037\uffcf" +
    "\040\uffcf\046\uffcf\064\uffcf\065\uffcf\072\uffcf\075\u0117\101" +
    "\uffcf\001\002\000\036\003\034\010\041\014\026\015\030" +
    "\026\042\027\032\036\023\037\027\040\022\046\033\064" +
    "\036\065\037\072\uffa6\101\040\001\002\000\036\003\034" +
    "\010\041\014\026\015\030\026\042\027\032\036\023\037" +
    "\027\040\022\046\033\064\036\065\037\072\uffa6\101\040" +
    "\001\002\000\004\072\uffd0\001\002\000\004\072\uffce\001" +
    "\002\000\040\003\uffb1\010\uffb1\014\uffb1\015\uffb1\026\uffb1" +
    "\027\uffb1\036\uffb1\037\uffb1\040\uffb1\046\uffb1\064\uffb1\065" +
    "\uffb1\072\uffb1\075\u011c\101\uffb1\001\002\000\036\003\034" +
    "\010\041\014\026\015\030\026\042\027\032\036\023\037" +
    "\027\040\022\046\033\064\036\065\037\072\uffa6\101\040" +
    "\001\002\000\036\003\034\010\041\014\026\015\030\026" +
    "\042\027\032\036\023\037\027\040\022\046\033\064\036" +
    "\065\037\072\uffa6\101\040\001\002\000\004\072\uffb2\001" +
    "\002\000\004\072\uffb0\001\002\000\010\003\u0121\043\u0122" +
    "\072\u0123\001\002\000\004\002\uffff\001\002\000\006\004" +
    "\ufff9\101\ufff6\001\002\000\004\101\u0125\001\002\000\004" +
    "\004\u0124\001\002\000\004\002\ufffa\001\002\000\004\067" +
    "\ufff4\001\002\000\010\003\u0121\043\u0122\072\u0123\001\002" +
    "\000\004\002\ufff7\001\002\000\004\067\u0129\001\002\000" +
    "\006\070\uffef\101\u012b\001\002\000\004\070\u0130\001\002" +
    "\000\004\017\uff8f\001\002\000\006\070\ufff0\076\ufff2\001" +
    "\002\000\004\076\u012e\001\002\000\006\070\uffef\101\u012b" +
    "\001\002\000\004\070\ufff1\001\002\000\004\071\u0131\001" +
    "\002\000\036\003\034\010\041\014\026\015\030\026\042" +
    "\027\032\036\023\037\027\040\022\046\033\064\036\065" +
    "\037\072\uffa6\101\040\001\002\000\004\072\u0133\001\002" +
    "\000\010\003\ufff3\043\ufff3\072\ufff3\001\002\000\004\004" +
    "\u0138\001\002\000\004\101\u0125\001\002\000\010\003\u0121" +
    "\043\u0122\072\u0123\001\002\000\004\002\ufff5\001\002\000" +
    "\004\002\ufff8\001\002\000\040\003\uffd9\010\uffd9\014\uffd9" +
    "\015\uffd9\026\uffd9\027\uffd9\036\uffd9\037\uffd9\040\uffd9\046" +
    "\uffd9\064\uffd9\065\uffd9\072\uffd9\075\uffdb\101\uffd9\001\002" +
    "\000\010\003\263\044\262\045\264\001\002\000\036\003" +
    "\034\010\041\014\026\015\030\026\042\027\032\036\023" +
    "\037\027\040\022\046\033\064\036\065\037\072\uffa6\101" +
    "\040\001\002\000\036\003\034\010\041\014\026\015\030" +
    "\026\042\027\032\036\023\037\027\040\022\046\033\064" +
    "\036\065\037\072\uffa6\101\040\001\002\000\004\072\uffdc" +
    "\001\002\000\004\072\uffde\001\002\000\040\003\uff8d\010" +
    "\uff8d\014\uff8d\015\uff8d\026\uff8d\027\uff8d\036\uff8d\037\uff8d" +
    "\040\uff8d\046\uff8d\064\uff8d\065\uff8d\072\uff8d\075\uff8d\101" +
    "\uff8d\001\002\000\036\003\034\010\041\014\026\015\030" +
    "\026\042\027\032\036\023\037\027\040\022\046\033\064" +
    "\036\065\037\072\uffa6\101\040\001\002\000\004\075\u0142" +
    "\001\002\000\036\003\034\010\041\014\026\015\030\026" +
    "\042\027\032\036\023\037\027\040\022\046\033\064\036" +
    "\065\037\072\uffa6\101\040\001\002\000\004\072\uffda\001" +
    "\002\000\004\072\uffd8\001\002\000\040\003\uffd2\010\uffd2" +
    "\014\uffd2\015\uffd2\026\uffd2\027\uffd2\036\uffd2\037\uffd2\040" +
    "\uffd2\046\uffd2\064\uffd2\065\uffd2\072\uffd2\075\u0147\101\uffd2" +
    "\001\002\000\036\003\034\010\041\014\026\015\030\026" +
    "\042\027\032\036\023\037\027\040\022\046\033\064\036" +
    "\065\037\072\uffa6\101\040\001\002\000\036\003\034\010" +
    "\041\014\026\015\030\026\042\027\032\036\023\037\027" +
    "\040\022\046\033\064\036\065\037\072\uffa6\101\040\001" +
    "\002\000\004\072\uffd3\001\002\000\004\072\uffd1\001\002" +
    "\000\040\003\uffb4\010\uffb4\014\uffb4\015\uffb4\026\uffb4\027" +
    "\uffb4\036\uffb4\037\uffb4\040\uffb4\046\uffb4\064\uffb4\065\uffb4" +
    "\072\uffb4\075\u014c\101\uffb4\001\002\000\036\003\034\010" +
    "\041\014\026\015\030\026\042\027\032\036\023\037\027" +
    "\040\022\046\033\064\036\065\037\072\uffa6\101\040\001" +
    "\002\000\036\003\034\010\041\014\026\015\030\026\042" +
    "\027\032\036\023\037\027\040\022\046\033\064\036\065" +
    "\037\072\uffa6\101\040\001\002\000\004\072\uffb5\001\002" +
    "\000\004\072\uffb3\001\002\000\012\003\124\023\127\024" +
    "\123\025\125\001\002\000\004\070\uff9d\001\002\000\036" +
    "\003\034\010\041\014\026\015\030\026\042\027\032\036" +
    "\023\037\027\040\022\046\033\064\036\065\037\072\uffa6" +
    "\101\040\001\002\000\004\072\u0153\001\002\000\010\003" +
    "\u0121\043\u0122\072\u0123\001\002\000\004\002\ufffd\001\002" +
    "\000\036\003\034\010\041\014\026\015\030\026\042\027" +
    "\032\036\023\037\027\040\022\046\033\064\036\065\037" +
    "\072\uffa6\101\040\001\002\000\004\072\u0157\001\002\000" +
    "\010\003\u0121\043\u0122\072\u0123\001\002\000\004\002\ufffb" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0156\000\004\002\005\001\001\000\004\044\u0154\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\043\u0150\001\001\000\004\042\011\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\004\016\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\003\024\016\030\021\034\032\023" +
    "\001\001\000\004\005\u0149\001\001\000\002\001\001\000" +
    "\006\007\u0138\061\u013b\001\001\000\002\001\001\000\004" +
    "\005\u0119\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\064\u010f\001\001\000\002\001\001\000\006\010\340" +
    "\011\335\001\001\000\006\102\331\103\330\001\001\000" +
    "\004\101\324\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\106\257\107\256\001\001\000\004\033\145\001" +
    "\001\000\002\001\001\000\004\005\133\001\001\000\004" +
    "\005\044\001\001\000\004\067\127\001\001\000\012\022" +
    "\055\023\053\025\064\027\062\001\001\000\004\070\047" +
    "\001\001\000\012\003\052\016\030\021\034\032\023\001" +
    "\001\000\012\003\051\016\030\021\034\032\023\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\125\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\022\117\001\001\000\012\022" +
    "\055\023\115\025\064\027\062\001\001\000\004\115\101" +
    "\001\001\000\002\001\001\000\004\110\065\001\001\000" +
    "\004\024\067\001\001\000\004\113\075\001\001\000\002" +
    "\001\001\000\004\111\071\001\001\000\010\022\055\025" +
    "\072\027\062\001\001\000\004\112\073\001\001\000\004" +
    "\024\074\001\001\000\002\001\001\000\010\022\055\025" +
    "\076\027\062\001\001\000\004\114\077\001\001\000\004" +
    "\024\100\001\001\000\002\001\001\000\004\026\102\001" +
    "\001\000\002\001\001\000\004\120\111\001\001\000\004" +
    "\116\105\001\001\000\006\022\055\027\106\001\001\000" +
    "\004\117\107\001\001\000\004\026\110\001\001\000\002" +
    "\001\001\000\006\022\055\027\112\001\001\000\004\121" +
    "\113\001\001\000\004\026\114\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\003\132\016\030\021\034\032\023\001\001" +
    "\000\012\003\131\016\030\021\034\032\023\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\073\142\001\001" +
    "\000\004\074\136\001\001\000\012\003\140\016\030\021" +
    "\034\032\023\001\001\000\012\003\137\016\030\021\034" +
    "\032\023\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\003\144\016\030\021\034\032\023\001\001\000\012" +
    "\003\143\016\030\021\034\032\023\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\003\253\016\030\021\034" +
    "\032\023\001\001\000\002\001\001\000\010\034\151\035" +
    "\153\041\150\001\001\000\004\122\251\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\123\212\001\001\000" +
    "\002\001\001\000\010\034\210\035\153\041\150\001\001" +
    "\000\012\022\055\023\167\025\064\027\062\001\001\000" +
    "\004\012\165\001\001\000\004\041\162\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\134\170" +
    "\001\001\000\004\040\176\001\001\000\012\022\055\023" +
    "\207\025\064\027\062\001\001\000\012\022\055\023\206" +
    "\025\064\027\062\001\001\000\012\022\055\023\205\025" +
    "\064\027\062\001\001\000\012\022\055\023\204\025\064" +
    "\027\062\001\001\000\012\022\055\023\203\025\064\027" +
    "\062\001\001\000\004\135\201\001\001\000\012\022\055" +
    "\023\200\025\064\027\062\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\037\213" +
    "\001\001\000\002\001\001\000\006\124\227\130\226\001" +
    "\001\000\006\126\217\132\216\001\001\000\004\035\223" +
    "\001\001\000\004\041\220\001\001\000\004\127\221\001" +
    "\001\000\004\037\222\001\001\000\002\001\001\000\004" +
    "\133\224\001\001\000\004\037\225\001\001\000\002\001" +
    "\001\000\004\035\233\001\001\000\004\041\230\001\001" +
    "\000\004\125\231\001\001\000\004\037\232\001\001\000" +
    "\002\001\001\000\004\131\234\001\001\000\004\037\235" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\003" +
    "\240\016\030\021\034\032\023\001\001\000\002\001\001" +
    "\000\004\036\242\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\033\250\001\001\000\012\003\246\016\030" +
    "\021\034\032\023\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\037\252\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\051\304\052\303\001" +
    "\001\000\006\053\277\054\276\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\264\001\001\000\012\022" +
    "\055\023\266\025\064\027\062\001\001\000\002\001\001" +
    "\000\010\034\265\035\153\041\150\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\030\270" +
    "\001\001\000\002\001\001\000\004\031\272\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\003\302\016\030\021\034\032\023\001" +
    "\001\000\002\001\001\000\012\003\301\016\030\021\034" +
    "\032\023\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\003\307\016\030\021\034\032\023\001\001\000\002" +
    "\001\001\000\012\003\306\016\030\021\034\032\023\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\057\312" +
    "\060\311\001\001\000\012\003\315\016\030\021\034\032" +
    "\023\001\001\000\002\001\001\000\012\003\314\016\030" +
    "\021\034\032\023\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\055\320\056\317\001\001\000\012\003\323" +
    "\016\030\021\034\032\023\001\001\000\002\001\001\000" +
    "\012\003\322\016\030\021\034\032\023\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\003\327\016\030\021" +
    "\034\032\023\001\001\000\012\003\326\016\030\021\034" +
    "\032\023\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\003\332\016\030\021\034\032\023" +
    "\001\001\000\002\001\001\000\012\003\334\016\030\021" +
    "\034\032\023\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\104\350\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\034\344" +
    "\035\153\041\150\001\001\000\002\001\001\000\004\005" +
    "\346\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\017\353\020\352\001\001\000\002\001" +
    "\001\000\004\105\354\001\001\000\002\001\001\000\006" +
    "\017\353\020\356\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\361\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\034\364\035\153\041\150\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\034\367\035\153" +
    "\041\150\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\u0105\001\001\000\004\005\373\001\001\000\004" +
    "\071\u0102\001\001\000\004\072\376\001\001\000\012\003" +
    "\u0100\016\030\021\034\032\023\001\001\000\012\003\377" +
    "\016\030\021\034\032\023\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\003\u0104\016\030\021\034\032\023" +
    "\001\001\000\012\003\u0103\016\030\021\034\032\023\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\075\u010c" +
    "\001\001\000\004\076\u0108\001\001\000\012\003\u010a\016" +
    "\030\021\034\032\023\001\001\000\012\003\u0109\016\030" +
    "\021\034\032\023\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\003\u010e\016\030\021\034\032\023\001\001" +
    "\000\012\003\u010d\016\030\021\034\032\023\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\003\u0112\016\030" +
    "\021\034\032\023\001\001\000\012\003\u0111\016\030\021" +
    "\034\032\023\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\066\u0115\001\001\000\012\003" +
    "\u0118\016\030\021\034\032\023\001\001\000\012\003\u0117" +
    "\016\030\021\034\032\023\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\100\u011a\001\001\000\012\003\u011d" +
    "\016\030\021\034\032\023\001\001\000\012\003\u011c\016" +
    "\030\021\034\032\023\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\014\u011f\001\001\000\002\001\001\000" +
    "\006\045\u0133\046\u0134\001\001\000\004\013\u0125\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\047\u0127\001" +
    "\001\000\004\014\u0126\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\015\u0129\032\u012b\001\001\000\002\001" +
    "\001\000\004\107\256\001\001\000\004\050\u012c\001\001" +
    "\000\002\001\001\000\006\015\u012e\032\u012b\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\003\u0131\016\030" +
    "\021\034\032\023\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\u0135\001\001\000\004" +
    "\014\u0136\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\062\u0140\063\u013f\001\001\000\004\017\u013e\001\001" +
    "\000\012\003\u013d\016\030\021\034\032\023\001\001\000" +
    "\012\003\u013c\016\030\021\034\032\023\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\003" +
    "\u0143\016\030\021\034\032\023\001\001\000\002\001\001" +
    "\000\012\003\u0142\016\030\021\034\032\023\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\065\u0145\001\001" +
    "\000\012\003\u0148\016\030\021\034\032\023\001\001\000" +
    "\012\003\u0147\016\030\021\034\032\023\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\077\u014a\001\001\000" +
    "\012\003\u014d\016\030\021\034\032\023\001\001\000\012" +
    "\003\u014c\016\030\021\034\032\023\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\u014f\001\001\000\002" +
    "\001\001\000\012\003\u0151\016\030\021\034\032\023\001" +
    "\001\000\002\001\001\000\004\014\u0153\001\001\000\002" +
    "\001\001\000\012\003\u0155\016\030\021\034\032\023\001" +
    "\001\000\002\001\001\000\004\014\u0157\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintaxPrueba$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintaxPrueba$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintaxPrueba$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private String ambito;
    private Symbol s;
    private int valActual = 0, valAux1 = 0, valAux2 = 0, relActual = 0;
    private boolean logActual = false, logAux = false;
    private herramientas.Funcion funcionActual;
    private java.util.ArrayList<herramientas.Funcion> funcionesLlamadas = new java.util.ArrayList<>();
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    private void reportarError(String codigo, String encontrado){
        if(this.s == null) this.s = cur_token;
        FrmPrincipal.errores.agregarErrorSintactico(codigo, s.left + 1, sym.terminalNames[s.sym], encontrado);
    }

    private void reportarErrorSemantico(String codigo, String... valores){
        if(this.s == null) this.s = cur_token;
        FrmPrincipal.errores.agregarErrorSemantico(codigo, s.left + 1, valores);
    }

    public void report_fatal_error(String message, Object info){
        reportarError("ES8", null);
    }

    public SintaxPrueba(Lexer lexer){
        super(lexer);
    }

    private void ponerValor(String identificador, Object valor){
        String tipo = getTipo(identificador);
        if(tipo == null) {
            reportarErrorSemantico("ESM1", identificador);
            return;
        }

        if(tipo.equals("error")){
            reportarErrorSemantico("ESM6", identificador);
            return;
        }

        if(tipo.equals("logico") && !valor.getClass().getName().equals("java.lang.Boolean")){
            reportarErrorSemantico("ESM5", "entero", identificador, "logico");
            return;
        }

        if(tipo.equals("entero") && !valor.getClass().getName().equals("java.lang.Integer")){
            reportarErrorSemantico("ESM5", "logico", identificador, "entero");
            return;
        }
        FrmPrincipal.tablaSimbolos.agregarValor(new LlaveTabla(identificador, ambito), valor);
    }

    private void verificarIdentificador(String id, boolean declarando){
        if(!FrmPrincipal.tablaSimbolos.existe(new LlaveTabla(id, ambito)) && !declarando){
            reportarErrorSemantico("ESM1", id);
            agregarSimbolo(id, -1);
        }
        if(FrmPrincipal.tablaSimbolos.existe(new LlaveTabla(id, ambito)) && declarando){
            reportarErrorSemantico("ESM4", id);
        }
        if(FrmPrincipal.funciones.existe(id)){
            reportarErrorSemantico("ESM4", id);
        }
    }

    private Object getValor(String identificador){
        return FrmPrincipal.tablaSimbolos.getValor(new LlaveTabla(identificador, ambito));
    }

    private String getTipo(String identificador){
        return FrmPrincipal.tablaSimbolos.getTipo(new LlaveTabla(identificador, ambito));
    }

    private void ponerTipoDato(String identificador, String tipo){
        FrmPrincipal.tablaSimbolos.agregarTipo(new LlaveTabla(identificador, ambito), tipo);
    }

    private void agregarSimbolo(String identificador, int linea){
        FrmPrincipal.tablaSimbolos.agregarSimbolo(new LlaveTabla(identificador, ambito), linea);
    }

    private void agregarFuncion(String id){
        verificarIdentificador(id, true);
        FrmPrincipal.funciones.agregarFuncion(id);
    }

    private void agregarParametro(String parametro){
        FrmPrincipal.funciones.agregarParametro(ambito, new LlaveTabla(parametro, ambito));
    }

    private Integer validarEntero(String id){
        switch(getTipo(id)){
            case "logico" -> {
                reportarErrorSemantico("ESM2", id, "logico");
                return 0;
            }
            case "entero" -> {
                Object valor = getValor(id);
                if(valor == null){
                    reportarErrorSemantico("ESM3", id);
                    return 0;
                }
                return (int) valor;
            }
            default -> {
                reportarErrorSemantico("ESM2", id, "sin tipo");
                return 0;
            }
        }
    }

    private boolean validarLogico(String id){
        switch(getTipo(id)){
            case "entero" -> {
                reportarErrorSemantico("ESM2", id, "entero");
                return false;
            }
            case "logico" -> {
                Object valor = getValor(id);
                if(valor == null){
                    reportarErrorSemantico("ESM3", id);
                    return false;
                }
                return (boolean) valor;
            }
            default -> {
                reportarErrorSemantico("ESM2", id, "sin tipo");
                return false;
            }
        }
    }

    private void agregarExpresion(Object expresion){
        funcionActual.agregarParametro(expresion);
    }
    private void comprobarFunciones(){
        funcionesLlamadas.forEach(funcion -> funcion.comprobarParametros());
    }

    private void guardarFuncion(){
        funcionesLlamadas.add(funcionActual);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintaxPrueba$actions {
  private final SintaxPrueba parser;

  /** Constructor */
  CUP$SintaxPrueba$actions(SintaxPrueba parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintaxPrueba$do_action_part00000000(
    int                        CUP$SintaxPrueba$act_num,
    java_cup.runtime.lr_parser CUP$SintaxPrueba$parser,
    java.util.Stack            CUP$SintaxPrueba$stack,
    int                        CUP$SintaxPrueba$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintaxPrueba$result;

      /* select the action based on the action number */
      switch (CUP$SintaxPrueba$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		RESULT = start_val;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintaxPrueba$parser.done_parsing();
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;

            ambito = i;
            agregarFuncion(i);
        
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$0",32, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= INICIO IDENTIFICADOR NT$0 LLAVE_ABIERTA COMIENZO PARENTESIS_ABIERTO tiempo_cada PARENTESIS_CERRADO LLAVE_ABIERTA gramaticas LLAVE_CERRADA inicio_fin 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-9)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-10)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-10)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-10)).value;
		comprobarFunciones();
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-11)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$1 ::= 
            {
              Object RESULT =null;

            reportarError("ES1", null);
            ambito="rutina_principal";
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$1",33, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // inicio ::= INICIO error NT$1 gramaticas LLAVE_CERRADA inicio_fin 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).value;
		comprobarFunciones();
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$2 ::= 
            {
              Object RESULT =null;

            reportarError("ES1", null);
            ambito = "rutina_principal";
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$2",34, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // inicio ::= error NT$2 gramaticas LLAVE_CERRADA inicio_fin 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).value;
		comprobarFunciones();
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // inicio_fin ::= LLAVE_CERRADA FIN 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("inicio_fin",10, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$3 ::= 
            {
              Object RESULT =null;
reportarError("ES1", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$3",35, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // inicio_fin ::= error NT$3 FIN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("inicio_fin",10, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // inicio_fin ::= FUNCION funcion inicio_fin 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("inicio_fin",10, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$4 ::= 
            {
              Object RESULT =null;
reportarError("ES1", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$4",36, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // inicio_fin ::= error NT$4 funcion inicio_fin 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("inicio_fin",10, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$5 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;

                                s = cur_token;
                                agregarFuncion(i);
                                ambito = i;
                            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$5",37, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // funcion ::= IDENTIFICADOR NT$5 PARENTESIS_ABIERTO parametros PARENTESIS_CERRADO LLAVE_ABIERTA gramaticas LLAVE_CERRADA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-7)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("funcion",9, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$6 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
agregarParametro(i);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$6",38, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // parametros ::= declaracion_inicio NT$6 COMA parametros 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("parametros",11, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // parametros ::= declaracion_inicio 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		agregarParametro(i);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("parametros",11, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // parametros ::= 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("parametros",11, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$7 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

                verificarIdentificador(i, false);
                ponerValor(i, validarEntero(i) + 1);
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$7",39, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // gramaticas ::= IDENTIFICADOR INC NT$7 PUNTO_COMA gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$8 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

                reportarError("ES7", null);
                verificarIdentificador(i, false);
                ponerValor(i, validarEntero(i) + 1);
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$8",40, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // gramaticas ::= IDENTIFICADOR INC NT$8 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$9 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

                verificarIdentificador(i, false);
                ponerValor(i, validarEntero(i) - 1);
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$9",41, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // gramaticas ::= IDENTIFICADOR DEC NT$9 PUNTO_COMA gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$10 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

                reportarError("ES7", null);
                verificarIdentificador(i, false);
                ponerValor(i, validarEntero(i) - 1);
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$10",42, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // gramaticas ::= IDENTIFICADOR DEC NT$10 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$11 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;

                verificarIdentificador(i, false);
                ponerValor(i, validarEntero(i) + 1);
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$11",43, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // gramaticas ::= INC IDENTIFICADOR NT$11 PUNTO_COMA gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$12 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;

                reportarError("ES7", null);
                verificarIdentificador(i, false);
                ponerValor(i, validarEntero(i) + 1);
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$12",44, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // gramaticas ::= INC IDENTIFICADOR NT$12 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NT$13 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;

                verificarIdentificador(i, false);
                ponerValor(i, validarEntero(i) - 1);
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$13",45, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // gramaticas ::= DEC IDENTIFICADOR NT$13 PUNTO_COMA gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NT$14 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;

                reportarError("ES7", null);
                verificarIdentificador(i, false);
                ponerValor(i, validarEntero(i) - 1);
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$14",46, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // gramaticas ::= DEC IDENTIFICADOR NT$14 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // gramaticas ::= declaracion_inicio PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NT$15 ::= 
            {
              Object RESULT =null;
s=cur_token;reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$15",47, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // gramaticas ::= declaracion_inicio NT$15 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$16 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
ponerValor(i,v);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$16",48, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // gramaticas ::= declaracion_inicio declaracion_valor NT$16 PUNTO_COMA gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NT$17 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
reportarError("ES7", null);ponerValor(i,v);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$17",49, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // gramaticas ::= declaracion_inicio declaracion_valor NT$17 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // gramaticas ::= asignacion PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$18 ::= 
            {
              Object RESULT =null;
s=cur_token;reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$18",50, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // gramaticas ::= asignacion NT$18 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // gramaticas ::= CONDICION condicion gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // gramaticas ::= APAGAR LUCES PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // NT$19 ::= 
            {
              Object RESULT =null;
s=cur_token;reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$19",51, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // gramaticas ::= APAGAR LUCES NT$19 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // gramaticas ::= ENCENDER LUCES PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // NT$20 ::= 
            {
              Object RESULT =null;
s=cur_token;reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$20",52, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // gramaticas ::= ENCENDER LUCES NT$20 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // gramaticas ::= ABRIR PUERTAS tiempo_por PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // NT$21 ::= 
            {
              Object RESULT =null;
s=cur_token;reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$21",53, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // gramaticas ::= ABRIR PUERTAS tiempo_por NT$21 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // gramaticas ::= ABRIR PUERTAS MANTENER PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // NT$22 ::= 
            {
              Object RESULT =null;
s=cur_token;reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$22",54, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // gramaticas ::= ABRIR PUERTAS MANTENER NT$22 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // gramaticas ::= CERRAR PUERTAS tiempo_por PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // NT$23 ::= 
            {
              Object RESULT =null;
s=cur_token;reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$23",55, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // gramaticas ::= CERRAR PUERTAS tiempo_por NT$23 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // gramaticas ::= CERRAR PUERTAS MANTENER PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // NT$24 ::= 
            {
              Object RESULT =null;
s=cur_token;reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$24",56, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // gramaticas ::= CERRAR PUERTAS MANTENER NT$24 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$24
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // gramaticas ::= ABRIR VENTANAS tiempo_por PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // NT$25 ::= 
            {
              Object RESULT =null;
s=cur_token;reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$25",57, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // gramaticas ::= ABRIR VENTANAS tiempo_por NT$25 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$25
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // gramaticas ::= ABRIR VENTANAS MANTENER PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // NT$26 ::= 
            {
              Object RESULT =null;
s=cur_token;reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$26",58, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // gramaticas ::= ABRIR VENTANAS MANTENER NT$26 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$26
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // gramaticas ::= CERRAR VENTANAS tiempo_por PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // NT$27 ::= 
            {
              Object RESULT =null;
s=cur_token;reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$27",59, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // gramaticas ::= CERRAR VENTANAS tiempo_por NT$27 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$27
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // gramaticas ::= CERRAR VENTANAS MANTENER PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // NT$28 ::= 
            {
              Object RESULT =null;
s=cur_token;reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$28",60, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // gramaticas ::= CERRAR VENTANAS MANTENER NT$28 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$28
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // gramaticas ::= SANITIZAR tiempo_por PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // NT$29 ::= 
            {
              Object RESULT =null;
s=cur_token;reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$29",61, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // gramaticas ::= SANITIZAR tiempo_por NT$29 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$29
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // gramaticas ::= DISPENSAR tiempo_por PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // NT$30 ::= 
            {
              Object RESULT =null;
s=cur_token;reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$30",62, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // gramaticas ::= DISPENSAR tiempo_por NT$30 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$30
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // gramaticas ::= usar PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // NT$31 ::= 
            {
              Object RESULT =null;
s=cur_token;reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$31",63, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // gramaticas ::= usar NT$31 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$31
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // gramaticas ::= SALIR PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // gramaticas ::= SALIR 
            {
              Object RESULT =null;
		s=cur_token;reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // NT$32 ::= 
            {
              Object RESULT =null;
reportarError("ES2", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$32",64, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // gramaticas ::= error NT$32 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$32
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // NT$33 ::= 
            {
              Object RESULT =null;
reportarError("ES2", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$33",65, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // gramaticas ::= error NT$33 PUNTO_COMA gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$33
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // gramaticas ::= 
            {
              Object RESULT =null;
		s=cur_token;reportarError("ES10", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // NT$34 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
funcionActual = new herramientas.Funcion(i, cur_token.left+1);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$34",66, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // usar ::= USAR IDENTIFICADOR NT$34 PARENTESIS_ABIERTO parametros_llamar PARENTESIS_CERRADO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$34
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("usar",15, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // usar ::= USAR admitir 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("usar",15, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // usar ::= USAR ventilar 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("usar",15, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // NT$35 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
agregarExpresion(e);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$35",67, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // parametros_llamar ::= expresion NT$35 COMA parametros_llamar 
            {
              Object RESULT =null;
              // propagate RESULT from NT$35
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("parametros_llamar",14, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // parametros_llamar ::= expresion 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		agregarExpresion(e);guardarFuncion();
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("parametros_llamar",14, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // parametros_llamar ::= 
            {
              Object RESULT =null;
		guardarFuncion();
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("parametros_llamar",14, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // tiempo_cada ::= CADA NUMERO unidad_tiempo 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("tiempo_cada",2, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // tiempo_por ::= POR op_aritmetica unidad_tiempo 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("tiempo_por",3, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // unidad_tiempo ::= SEG 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("unidad_tiempo",4, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // unidad_tiempo ::= MIN 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("unidad_tiempo",4, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // unidad_tiempo ::= HR 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("unidad_tiempo",4, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // unidad_tiempo ::= error 
            {
              Object RESULT =null;
		reportarError("ES3", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("unidad_tiempo",4, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // estado ::= LUCES 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("estado",8, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // estado ::= PUERTAS 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("estado",8, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // estado ::= VENTANAS 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("estado",8, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // expresion ::= A op_aritmetica 
            {
              Object RESULT =null;
		int oaleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int oaright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Integer oa = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=oa;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // expresion ::= B sentencia_booleana 
            {
              Object RESULT =null;
		int sbleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int sbright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Boolean sb = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=sb;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // expresion ::= error 
            {
              Object RESULT =null;
		s=cur_token;reportarError("ES9", null);RESULT = 0;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // NT$36 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;

                s = cur_token;
                verificarIdentificador(i, false);
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$36",68, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // asignacion ::= IDENTIFICADOR NT$36 ASIGNACION expresion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$36
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		ponerValor(i,e);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("asignacion",12, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // NT$37 ::= 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
s=cur_token;verificarIdentificador(i, true);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$37",69, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // declaracion_inicio ::= IDENTIFICADOR NT$37 DECLARAR declaracion_tipo_dato 
            {
              String RESULT =null;
              // propagate RESULT from NT$37
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		String td = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		
                        agregarSimbolo(i, cur_token.left+1);
                        ponerTipoDato(i,td);
                        RESULT=i;
                    
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("declaracion_inicio",24, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // declaracion_valor ::= ASIGNACION expresion 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=e;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("declaracion_valor",5, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // declaracion_tipo_dato ::= COMO tipo_dato 
            {
              String RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		String td = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT = td;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("declaracion_tipo_dato",22, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // tipo_dato ::= ENTERO 
            {
              String RESULT =null;
		RESULT = "entero";
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("tipo_dato",23, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // tipo_dato ::= LOGICO 
            {
              String RESULT =null;
		RESULT = "logico";
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("tipo_dato",23, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // tipo_dato ::= error 
            {
              String RESULT =null;
		reportarError("ES4", null); RESULT = "error";
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("tipo_dato",23, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // NT$38 ::= 
            {
              Integer RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Integer v1 = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
valActual = v1;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$38",70, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // op_aritmetica ::= op2 NT$38 op1 
            {
              Integer RESULT =null;
              // propagate RESULT from NT$38
                RESULT = (Integer) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).right;
		Integer v1 = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Integer v2 = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=v2;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op_aritmetica",17, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // NT$39 ::= 
            {
              Integer RESULT =null;
valAux1=valActual;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$39",71, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // NT$40 ::= 
            {
              Integer RESULT =(Integer) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Integer v = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
valActual=valAux1+v;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$40",72, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // op1 ::= AR_SUMA NT$39 op2 NT$40 op1 
            {
              Integer RESULT =null;
              // propagate RESULT from NT$40
                RESULT = (Integer) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).right;
		Integer v = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Integer r = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=r;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op1",18, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // NT$41 ::= 
            {
              Integer RESULT =null;
valAux1=valActual;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$41",73, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // NT$42 ::= 
            {
              Integer RESULT =(Integer) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Integer v = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
valActual=valAux1-v;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$42",74, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // op1 ::= AR_RESTA NT$41 op2 NT$42 op1 
            {
              Integer RESULT =null;
              // propagate RESULT from NT$42
                RESULT = (Integer) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).right;
		Integer v = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Integer r = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=r;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op1",18, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // op1 ::= 
            {
              Integer RESULT =null;
		RESULT=valActual;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op1",18, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // NT$43 ::= 
            {
              Integer RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Integer v1 = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
valActual=v1;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$43",75, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // op2 ::= op4 NT$43 op3 
            {
              Integer RESULT =null;
              // propagate RESULT from NT$43
                RESULT = (Integer) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).right;
		Integer v1 = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Integer v2 = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=v2;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op2",19, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // NT$44 ::= 
            {
              Integer RESULT =null;
valAux2=valActual;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$44",76, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // NT$45 ::= 
            {
              Integer RESULT =(Integer) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Integer v = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
valActual=valAux2*v;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$45",77, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // op3 ::= AR_MULTIPLICACION NT$44 op4 NT$45 op3 
            {
              Integer RESULT =null;
              // propagate RESULT from NT$45
                RESULT = (Integer) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).right;
		Integer v = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Integer r = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=r;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op3",20, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // NT$46 ::= 
            {
              Integer RESULT =null;
valAux2=valActual;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$46",78, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // NT$47 ::= 
            {
              Integer RESULT =(Integer) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Integer v = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
valActual=valAux2/v;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$47",79, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // op3 ::= AR_DIVISION NT$46 op4 NT$47 op3 
            {
              Integer RESULT =null;
              // propagate RESULT from NT$47
                RESULT = (Integer) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).right;
		Integer v = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Integer r = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=r;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op3",20, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // op3 ::= 
            {
              Integer RESULT =null;
		RESULT=valActual;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op3",20, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // op4 ::= valores 
            {
              Integer RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Integer v = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=v;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op4",21, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // op4 ::= AR_RESTA valores 
            {
              Integer RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Integer v = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=-v;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op4",21, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // op4 ::= error 
            {
              Integer RESULT =null;
		
                reportarError("ES6", null);
                reportarErrorSemantico("ESM10", "aritmetica");
                RESULT=0;
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op4",21, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // valores ::= NUMERO 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=n;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("valores",16, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // valores ::= IDENTIFICADOR 
            {
              Integer RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		s=cur_token;verificarIdentificador(i, false);RESULT=validarEntero(i);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("valores",16, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // valores ::= OBTENER TEMPERATURA 
            {
              Integer RESULT =null;
		RESULT=0;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("valores",16, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // valores ::= OBTENER PERSONAS 
            {
              Integer RESULT =null;
		RESULT=0;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("valores",16, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // valores ::= PARENTESIS_ABIERTO op_aritmetica PARENTESIS_CERRADO 
            {
              Integer RESULT =null;
		int oaleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).left;
		int oaright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).right;
		Integer oa = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		RESULT=oa;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("valores",16, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // condicion ::= PARENTESIS_ABIERTO B sentencia_booleana PARENTESIS_CERRADO LLAVE_ABIERTA gramaticas LLAVE_CERRADA 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("condicion",25, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // condicion ::= PARENTESIS_ABIERTO B sentencia_booleana PARENTESIS_CERRADO LLAVE_ABIERTA gramaticas LLAVE_CERRADA sino 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("condicion",25, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // NT$48 ::= 
            {
              Boolean RESULT =null;
		int tlleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Boolean tl = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
logActual=tl;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$48",80, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // sentencia_booleana ::= terminal_logico NT$48 sb2 
            {
              Boolean RESULT =null;
              // propagate RESULT from NT$48
                RESULT = (Boolean) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int tlleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).right;
		Boolean tl = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Boolean r = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=r;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("sentencia_booleana",26, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // NT$49 ::= 
            {
              Boolean RESULT =null;
		int rbleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int rbright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Boolean rb = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
logActual=rb;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$49",81, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // sentencia_booleana ::= relacional_booleana NT$49 sb2 
            {
              Boolean RESULT =null;
              // propagate RESULT from NT$49
                RESULT = (Boolean) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int rbleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).left;
		int rbright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).right;
		Boolean rb = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Boolean r = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=r;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("sentencia_booleana",26, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // NT$50 ::= 
            {
              Boolean RESULT =null;
logAux = logActual;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$50",82, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // NT$51 ::= 
            {
              Boolean RESULT =(Boolean) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int tlleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Boolean tl = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
logActual=logAux&&tl;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$51",83, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // sb2 ::= LOGICO_AND NT$50 terminal_logico NT$51 sb2 
            {
              Boolean RESULT =null;
              // propagate RESULT from NT$51
                RESULT = (Boolean) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int tlleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).right;
		Boolean tl = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int sbleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int sbright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Boolean sb = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=sb;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("sb2",29, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // NT$52 ::= 
            {
              Boolean RESULT =null;
logAux = logActual;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$52",84, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // NT$53 ::= 
            {
              Boolean RESULT =(Boolean) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int tlleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Boolean tl = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
logActual=logAux||tl;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$53",85, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // sb2 ::= LOGICO_OR NT$52 terminal_logico NT$53 sb2 
            {
              Boolean RESULT =null;
              // propagate RESULT from NT$53
                RESULT = (Boolean) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int tlleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).right;
		Boolean tl = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int sbleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int sbright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Boolean sb = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=sb;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("sb2",29, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // NT$54 ::= 
            {
              Boolean RESULT =null;
logAux = logActual;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$54",86, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // NT$55 ::= 
            {
              Boolean RESULT =(Boolean) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int rbleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int rbright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Boolean rb = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
logActual=logAux&&rb;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$55",87, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // sb2 ::= LOGICO_AND NT$54 relacional_booleana NT$55 sb2 
            {
              Boolean RESULT =null;
              // propagate RESULT from NT$55
                RESULT = (Boolean) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int rbleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).left;
		int rbright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).right;
		Boolean rb = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int sbleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int sbright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Boolean sb = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=sb;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("sb2",29, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // NT$56 ::= 
            {
              Boolean RESULT =null;
logAux = logActual;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$56",88, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // NT$57 ::= 
            {
              Boolean RESULT =(Boolean) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int rbleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int rbright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Boolean rb = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
logActual=logAux||rb;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$57",89, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // sb2 ::= LOGICO_OR NT$56 relacional_booleana NT$57 sb2 
            {
              Boolean RESULT =null;
              // propagate RESULT from NT$57
                RESULT = (Boolean) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int rbleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).left;
		int rbright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).right;
		Boolean rb = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int sbleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int sbright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Boolean sb = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=sb;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("sb2",29, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // sb2 ::= 
            {
              Boolean RESULT =null;
		RESULT=logActual;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("sb2",29, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // NT$58 ::= 
            {
              Boolean RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Integer v = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
relActual=v;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$58",90, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // NT$59 ::= 
            {
              Boolean RESULT =(Boolean) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).right;
		Integer v = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Boolean r = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
RESULT=r;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$59",91, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // relacional_booleana ::= CORCHETE_ABIERTO op_aritmetica NT$58 rb2 NT$59 CORCHETE_CERRADO 
            {
              Boolean RESULT =null;
              // propagate RESULT from NT$59
                RESULT = (Boolean) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)).right;
		Integer v = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).right;
		Boolean r = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("relacional_booleana",27, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // rb2 ::= REL_MENOR op_aritmetica 
            {
              Boolean RESULT =null;
		int oaleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int oaright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Integer oa = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=relActual<oa;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("rb2",30, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // rb2 ::= REL_MAYOR op_aritmetica 
            {
              Boolean RESULT =null;
		int oaleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int oaright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Integer oa = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=relActual>oa;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("rb2",30, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // rb2 ::= REL_MENOR_IGUAL op_aritmetica 
            {
              Boolean RESULT =null;
		int oaleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int oaright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Integer oa = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=relActual<=oa;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("rb2",30, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // rb2 ::= REL_MAYOR_IGUAL op_aritmetica 
            {
              Boolean RESULT =null;
		int oaleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int oaright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Integer oa = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=relActual>=oa;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("rb2",30, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // rb2 ::= REL_DIFERENTE op_aritmetica 
            {
              Boolean RESULT =null;
		int oaleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int oaright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Integer oa = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=relActual!=oa;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("rb2",30, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // rb2 ::= REL_IGUAL op_aritmetica 
            {
              Boolean RESULT =null;
		int oaleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int oaright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Integer oa = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=relActual==oa;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("rb2",30, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // terminal_logico ::= IDENTIFICADOR 
            {
              Boolean RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		s=cur_token;verificarIdentificador(i, false);RESULT=validarLogico(i);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("terminal_logico",31, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // terminal_logico ::= OP_BOOLEANO 
            {
              Boolean RESULT =null;
		int obleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int obright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Boolean ob = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=ob;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("terminal_logico",31, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // terminal_logico ::= PARENTESIS_ABIERTO sentencia_booleana PARENTESIS_CERRADO 
            {
              Boolean RESULT =null;
		int sbleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).left;
		int sbright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).right;
		Boolean sb = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		RESULT=sb;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("terminal_logico",31, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // terminal_logico ::= ESTADO estado 
            {
              Boolean RESULT =null;
		RESULT=false;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("terminal_logico",31, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // terminal_logico ::= NEGACION terminal_logico 
            {
              Boolean RESULT =null;
		int tlleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Boolean tl = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT = !tl;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("terminal_logico",31, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // terminal_logico ::= error 
            {
              Boolean RESULT =null;
		
                    reportarError("ES5", null);
                    reportarErrorSemantico("ESM10", "logica");
                    RESULT=false;
                
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("terminal_logico",31, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // sino ::= SINO CONDICION condicion 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("sino",28, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // sino ::= SINO LLAVE_ABIERTA gramaticas LLAVE_CERRADA 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("sino",28, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // ventilar ::= VENTILAR PARENTESIS_ABIERTO tiempo_por COMA B sentencia_booleana COMA B sentencia_booleana PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("ventilar",6, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-9)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // admitir ::= ADMITIR PARENTESIS_ABIERTO B sentencia_booleana COMA tiempo_por PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("admitir",7, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintaxPrueba$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintaxPrueba$do_action(
    int                        CUP$SintaxPrueba$act_num,
    java_cup.runtime.lr_parser CUP$SintaxPrueba$parser,
    java.util.Stack            CUP$SintaxPrueba$stack,
    int                        CUP$SintaxPrueba$top)
    throws java.lang.Exception
    {
              return CUP$SintaxPrueba$do_action_part00000000(
                               CUP$SintaxPrueba$act_num,
                               CUP$SintaxPrueba$parser,
                               CUP$SintaxPrueba$stack,
                               CUP$SintaxPrueba$top);
    }
}

}
