
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analisis;

import java_cup.runtime.Symbol;
import codigo.FrmPrincipal;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintaxPrueba extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public SintaxPrueba() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintaxPrueba(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintaxPrueba(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\302\000\002\002\004\000\002\042\002\000\002\002" +
    "\016\000\002\014\004\000\002\014\005\000\002\043\002" +
    "\000\002\013\012\000\002\044\002\000\002\015\006\000" +
    "\002\015\003\000\002\015\002\000\002\045\002\000\002" +
    "\003\007\000\002\046\002\000\002\003\006\000\002\047" +
    "\002\000\002\003\007\000\002\050\002\000\002\003\006" +
    "\000\002\051\002\000\002\003\007\000\002\052\002\000" +
    "\002\003\006\000\002\053\002\000\002\003\007\000\002" +
    "\054\002\000\002\003\006\000\002\003\005\000\002\055" +
    "\002\000\002\003\005\000\002\056\002\000\002\003\007" +
    "\000\002\057\002\000\002\003\006\000\002\003\005\000" +
    "\002\060\002\000\002\003\005\000\002\003\005\000\002" +
    "\003\006\000\002\061\002\000\002\003\006\000\002\003" +
    "\006\000\002\062\002\000\002\003\006\000\002\003\007" +
    "\000\002\063\002\000\002\003\007\000\002\003\007\000" +
    "\002\064\002\000\002\003\007\000\002\003\007\000\002" +
    "\065\002\000\002\003\007\000\002\003\007\000\002\066" +
    "\002\000\002\003\007\000\002\003\006\000\002\067\002" +
    "\000\002\003\006\000\002\003\006\000\002\070\002\000" +
    "\002\003\006\000\002\003\005\000\002\071\002\000\002" +
    "\003\005\000\002\003\004\000\002\003\003\000\002\003" +
    "\004\000\002\003\005\000\002\072\002\000\002\003\006" +
    "\000\002\073\002\000\002\003\007\000\002\074\002\000" +
    "\002\003\007\000\002\075\002\000\002\003\007\000\002" +
    "\076\002\000\002\003\007\000\002\077\002\000\002\003" +
    "\006\000\002\100\002\000\002\003\007\000\002\101\002" +
    "\000\002\003\007\000\002\102\002\000\002\003\007\000" +
    "\002\103\002\000\002\003\010\000\002\104\002\000\002" +
    "\003\010\000\002\105\002\000\002\003\007\000\002\003" +
    "\002\000\002\033\003\000\002\033\003\000\002\033\003" +
    "\000\002\021\004\000\002\021\004\000\002\021\004\000" +
    "\002\021\004\000\002\021\004\000\002\021\004\000\002" +
    "\106\002\000\002\034\007\000\002\107\002\000\002\034" +
    "\007\000\002\110\002\000\002\020\006\000\002\020\003" +
    "\000\002\020\002\000\002\004\005\000\002\111\002\000" +
    "\002\005\006\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\112\002" +
    "\000\002\016\006\000\002\113\002\000\002\016\006\000" +
    "\002\114\002\000\002\016\005\000\002\115\002\000\002" +
    "\037\006\000\002\007\004\000\002\035\004\000\002\036" +
    "\003\000\002\036\003\000\002\036\003\000\002\116\002" +
    "\000\002\017\005\000\002\117\002\000\002\120\002\000" +
    "\002\023\007\000\002\121\002\000\002\122\002\000\002" +
    "\023\007\000\002\023\002\000\002\123\002\000\002\024" +
    "\005\000\002\124\002\000\002\025\005\000\002\125\002" +
    "\000\002\025\005\000\002\126\002\000\002\025\005\000" +
    "\002\127\002\000\002\025\005\000\002\130\002\000\002" +
    "\025\005\000\002\131\002\000\002\025\005\000\002\025" +
    "\002\000\002\132\002\000\002\026\005\000\002\133\002" +
    "\000\002\134\002\000\002\027\007\000\002\135\002\000" +
    "\002\136\002\000\002\027\007\000\002\027\002\000\002" +
    "\137\002\000\002\030\005\000\002\140\002\000\002\141" +
    "\002\000\002\031\007\000\002\142\002\000\002\143\002" +
    "\000\002\031\007\000\002\031\002\000\002\032\003\000" +
    "\002\032\004\000\002\032\004\000\002\032\003\000\002" +
    "\022\003\000\002\022\003\000\002\022\004\000\002\022" +
    "\004\000\002\022\003\000\002\022\004\000\002\022\005" +
    "\000\002\040\010\000\002\040\011\000\002\041\005\000" +
    "\002\041\006\000\002\010\012\000\002\011\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u015c\000\004\016\004\001\002\000\004\075\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\067\000\001\002\000\004\067\011\001\002\000" +
    "\004\005\012\001\002\000\004\065\013\001\002\000\004" +
    "\021\014\001\002\000\004\073\u015d\001\002\000\004\066" +
    "\016\001\002\000\004\067\017\001\002\000\036\003\032" +
    "\010\037\014\024\015\025\026\040\027\030\036\021\037" +
    "\026\040\020\044\031\062\034\063\035\070\uffa4\075\036" +
    "\001\002\000\004\022\046\001\002\000\006\003\u014f\041" +
    "\u0150\001\002\000\042\003\uffe5\010\uffe5\014\uffe5\015\uffe5" +
    "\026\uffe5\027\uffe5\036\uffe5\037\uffe5\040\uffe5\044\uffe5\062" +
    "\uffe5\063\uffe5\064\u0144\070\uffe5\071\u0145\075\uffe5\001\002" +
    "\000\004\070\u012f\001\002\000\004\022\046\001\002\000" +
    "\010\003\u0127\070\uffbf\071\u0128\001\002\000\006\003\u011e" +
    "\041\u011f\001\002\000\040\003\uffde\010\uffde\014\uffde\015" +
    "\uffde\026\uffde\027\uffde\036\uffde\037\uffde\040\uffde\044\uffde" +
    "\062\uffde\063\uffde\070\uffde\071\u011a\075\uffde\001\002\000" +
    "\006\030\u010e\031\u010f\001\002\000\012\003\323\012\326" +
    "\013\322\075\330\001\002\000\034\003\323\012\326\013" +
    "\322\022\uffa6\030\uffa8\031\uffaa\041\uffb0\062\uffba\063\uffb8" +
    "\064\uff85\065\uffb2\071\uffbc\075\330\001\002\000\040\003" +
    "\uffc2\010\uffc2\014\uffc2\015\uffc2\026\uffc2\027\uffc2\036\uffc2" +
    "\037\uffc2\040\uffc2\044\uffc2\062\uffc2\063\uffc2\070\uffc2\071" +
    "\305\075\uffc2\001\002\000\006\003\273\075\274\001\002" +
    "\000\006\003\261\075\262\001\002\000\034\003\uff83\017" +
    "\uff81\033\uff83\042\uff83\054\uff83\057\uff83\062\232\063\234" +
    "\064\uff87\065\uff83\073\uff83\074\uff83\075\uff83\001\002\000" +
    "\004\065\212\001\002\000\006\030\041\031\042\001\002" +
    "\000\010\003\045\022\046\032\047\001\002\000\010\003" +
    "\045\022\046\032\047\001\002\000\040\003\uffd4\010\uffd4" +
    "\014\uffd4\015\uffd4\026\uffd4\027\uffd4\036\uffd4\037\uffd4\040" +
    "\uffd4\044\uffd4\062\uffd4\063\uffd4\070\uffd4\071\201\075\uffd4" +
    "\001\002\000\040\003\uffa2\010\uffa2\014\uffa2\015\uffa2\026" +
    "\uffa2\027\uffa2\036\uffa2\037\uffa2\040\uffa2\044\uffa2\062\uffa2" +
    "\063\uffa2\070\uffa2\071\uffa2\075\uffa2\001\002\000\040\003" +
    "\uffa1\010\uffa1\014\uffa1\015\uffa1\026\uffa1\027\uffa1\036\uffa1" +
    "\037\uffa1\040\uffa1\044\uffa1\062\uffa1\063\uffa1\070\uffa1\071" +
    "\uffa1\075\uffa1\001\002\000\024\003\056\033\050\042\063" +
    "\054\055\057\064\065\060\073\053\074\052\075\065\001" +
    "\002\000\040\003\uffa3\010\uffa3\014\uffa3\015\uffa3\026\uffa3" +
    "\027\uffa3\036\uffa3\037\uffa3\040\uffa3\044\uffa3\062\uffa3\063" +
    "\uffa3\070\uffa3\071\uffa3\075\uffa3\001\002\000\006\034\176" +
    "\035\177\001\002\000\102\003\uff50\010\uff50\014\uff50\015" +
    "\uff50\023\uff50\024\uff50\025\uff50\026\uff50\027\uff50\036\uff50" +
    "\037\uff50\040\uff50\044\uff50\045\uff50\046\uff50\047\uff50\050" +
    "\uff50\051\uff50\052\uff50\053\uff50\054\uff50\055\uff50\056\uff50" +
    "\060\uff50\061\uff50\062\uff50\063\uff50\066\uff50\070\uff50\071" +
    "\uff50\072\uff50\075\uff50\001\002\000\102\003\uff48\010\uff48" +
    "\014\uff48\015\uff48\023\uff48\024\uff48\025\uff48\026\uff48\027" +
    "\uff48\036\uff48\037\uff48\040\uff48\044\uff48\045\uff48\046\uff48" +
    "\047\uff48\050\uff48\051\uff48\052\uff48\053\uff48\054\uff48\055" +
    "\uff48\056\uff48\060\uff48\061\uff48\062\uff48\063\uff48\066\uff48" +
    "\070\uff48\071\uff48\072\uff48\075\uff48\001\002\000\102\003" +
    "\uff4c\010\uff4c\014\uff4c\015\uff4c\023\uff4c\024\uff4c\025\uff4c" +
    "\026\uff4c\027\uff4c\036\uff4c\037\uff4c\040\uff4c\044\uff4c\045" +
    "\uff4c\046\uff4c\047\uff4c\050\uff4c\051\uff4c\052\uff4c\053\uff4c" +
    "\054\uff4c\055\uff4c\056\uff4c\060\uff4c\061\uff4c\062\uff4c\063" +
    "\uff4c\066\uff4c\070\uff4c\071\uff4c\072\uff4c\075\uff4c\001\002" +
    "\000\012\003\uff91\023\uff91\024\uff91\025\uff91\001\002\000" +
    "\016\033\050\042\063\065\060\073\053\074\052\075\065" +
    "\001\002\000\102\003\uff4d\010\uff4d\014\uff4d\015\uff4d\023" +
    "\uff4d\024\uff4d\025\uff4d\026\uff4d\027\uff4d\036\uff4d\037\uff4d" +
    "\040\uff4d\044\uff4d\045\uff4d\046\uff4d\047\uff4d\050\uff4d\051" +
    "\uff4d\052\uff4d\053\uff4d\054\uff4d\055\uff4d\056\uff4d\060\uff4d" +
    "\061\uff4d\062\uff4d\063\uff4d\066\uff4d\070\uff4d\071\uff4d\072" +
    "\uff4d\075\uff4d\001\002\000\102\003\uff59\010\uff59\014\uff59" +
    "\015\uff59\023\uff59\024\uff59\025\uff59\026\uff59\027\uff59\036" +
    "\uff59\037\uff59\040\uff59\044\uff59\045\uff59\046\uff59\047\uff59" +
    "\050\uff59\051\uff59\052\uff59\053\uff59\054\uff59\055\uff59\056" +
    "\uff59\060\uff59\061\uff59\062\uff59\063\uff59\066\uff59\070\uff59" +
    "\071\uff59\072\uff59\075\uff59\001\002\000\024\003\056\033" +
    "\050\042\063\054\055\057\064\065\060\073\053\074\052" +
    "\075\065\001\002\000\076\003\uff62\010\uff62\014\uff62\015" +
    "\uff62\023\uff62\024\uff62\025\uff62\026\uff62\027\uff62\036\uff62" +
    "\037\uff62\040\uff62\044\uff62\045\uff62\046\uff62\047\uff62\050" +
    "\uff62\051\uff62\052\uff62\053\uff62\054\uff62\060\uff62\061\uff62" +
    "\062\uff62\063\uff62\066\uff62\070\uff62\071\uff62\072\uff62\075" +
    "\uff62\001\002\000\072\003\uff71\010\uff71\014\uff71\015\uff71" +
    "\023\uff71\024\uff71\025\uff71\026\uff71\027\uff71\036\uff71\037" +
    "\uff71\040\uff71\044\uff71\045\uff71\046\uff71\047\uff71\050\uff71" +
    "\051\uff71\052\uff71\060\uff71\061\uff71\062\uff71\063\uff71\066" +
    "\uff71\070\uff71\071\uff71\072\uff71\075\uff71\001\002\000\012" +
    "\003\104\030\105\031\110\041\107\001\002\000\016\033" +
    "\050\042\063\065\060\073\053\074\052\075\065\001\002" +
    "\000\102\003\uff4b\010\uff4b\014\uff4b\015\uff4b\023\uff4b\024" +
    "\uff4b\025\uff4b\026\uff4b\027\uff4b\036\uff4b\037\uff4b\040\uff4b" +
    "\044\uff4b\045\uff4b\046\uff4b\047\uff4b\050\uff4b\051\uff4b\052" +
    "\uff4b\053\uff4b\054\uff4b\055\uff4b\056\uff4b\060\uff4b\061\uff4b" +
    "\062\uff4b\063\uff4b\066\uff4b\070\uff4b\071\uff4b\072\uff4b\075" +
    "\uff4b\001\002\000\056\003\uff7a\010\uff7a\014\uff7a\015\uff7a" +
    "\023\uff7a\024\uff7a\025\uff7a\026\uff7a\027\uff7a\036\uff7a\037" +
    "\uff7a\040\uff7a\044\uff7a\060\uff7a\061\uff7a\062\uff7a\063\uff7a" +
    "\066\uff7a\070\uff7a\071\uff7a\072\uff7a\075\uff7a\001\002\000" +
    "\056\003\uff72\010\uff72\014\uff72\015\uff72\023\uff72\024\uff72" +
    "\025\uff72\026\uff72\027\uff72\036\uff72\037\uff72\040\uff72\044" +
    "\uff72\060\071\061\072\062\uff72\063\uff72\066\uff72\070\uff72" +
    "\071\uff72\072\uff72\075\uff72\001\002\000\052\003\uff79\010" +
    "\uff79\014\uff79\015\uff79\023\uff79\024\uff79\025\uff79\026\uff79" +
    "\027\uff79\036\uff79\037\uff79\040\uff79\044\uff79\062\uff79\063" +
    "\uff79\066\uff79\070\uff79\071\uff79\072\uff79\075\uff79\001\002" +
    "\000\024\003\uff78\033\uff78\042\uff78\054\uff78\057\uff78\065" +
    "\uff78\073\uff78\074\uff78\075\uff78\001\002\000\024\003\uff75" +
    "\033\uff75\042\uff75\054\uff75\057\uff75\065\uff75\073\uff75\074" +
    "\uff75\075\uff75\001\002\000\024\003\056\033\050\042\063" +
    "\054\055\057\064\065\060\073\053\074\052\075\065\001" +
    "\002\000\056\003\uff74\010\uff74\014\uff74\015\uff74\023\uff74" +
    "\024\uff74\025\uff74\026\uff74\027\uff74\036\uff74\037\uff74\040" +
    "\uff74\044\uff74\060\uff74\061\uff74\062\uff74\063\uff74\066\uff74" +
    "\070\uff74\071\uff74\072\uff74\075\uff74\001\002\000\056\003" +
    "\uff72\010\uff72\014\uff72\015\uff72\023\uff72\024\uff72\025\uff72" +
    "\026\uff72\027\uff72\036\uff72\037\uff72\040\uff72\044\uff72\060" +
    "\071\061\072\062\uff72\063\uff72\066\uff72\070\uff72\071\uff72" +
    "\072\uff72\075\uff72\001\002\000\052\003\uff73\010\uff73\014" +
    "\uff73\015\uff73\023\uff73\024\uff73\025\uff73\026\uff73\027\uff73" +
    "\036\uff73\037\uff73\040\uff73\044\uff73\062\uff73\063\uff73\066" +
    "\uff73\070\uff73\071\uff73\072\uff73\075\uff73\001\002\000\024" +
    "\003\056\033\050\042\063\054\055\057\064\065\060\073" +
    "\053\074\052\075\065\001\002\000\056\003\uff77\010\uff77" +
    "\014\uff77\015\uff77\023\uff77\024\uff77\025\uff77\026\uff77\027" +
    "\uff77\036\uff77\037\uff77\040\uff77\044\uff77\060\uff77\061\uff77" +
    "\062\uff77\063\uff77\066\uff77\070\uff77\071\uff77\072\uff77\075" +
    "\uff77\001\002\000\056\003\uff72\010\uff72\014\uff72\015\uff72" +
    "\023\uff72\024\uff72\025\uff72\026\uff72\027\uff72\036\uff72\037" +
    "\uff72\040\uff72\044\uff72\060\071\061\072\062\uff72\063\uff72" +
    "\066\uff72\070\uff72\071\uff72\072\uff72\075\uff72\001\002\000" +
    "\052\003\uff76\010\uff76\014\uff76\015\uff76\023\uff76\024\uff76" +
    "\025\uff76\026\uff76\027\uff76\036\uff76\037\uff76\040\uff76\044" +
    "\uff76\062\uff76\063\uff76\066\uff76\070\uff76\071\uff76\072\uff76" +
    "\075\uff76\001\002\000\102\003\uff4e\010\uff4e\014\uff4e\015" +
    "\uff4e\023\uff4e\024\uff4e\025\uff4e\026\uff4e\027\uff4e\036\uff4e" +
    "\037\uff4e\040\uff4e\044\uff4e\045\uff4e\046\uff4e\047\uff4e\050" +
    "\uff4e\051\uff4e\052\uff4e\053\uff4e\054\uff4e\055\uff4e\056\uff4e" +
    "\060\uff4e\061\uff4e\062\uff4e\063\uff4e\066\uff4e\070\uff4e\071" +
    "\uff4e\072\uff4e\075\uff4e\001\002\000\102\003\uff88\010\uff88" +
    "\014\uff88\015\uff88\023\uff88\024\uff88\025\uff88\026\uff88\027" +
    "\uff88\036\uff88\037\uff88\040\uff88\044\uff88\045\uff88\046\uff88" +
    "\047\uff88\050\uff88\051\uff88\052\uff88\053\uff88\054\uff88\055" +
    "\uff88\056\uff88\060\uff88\061\uff88\062\uff88\063\uff88\066\uff88" +
    "\070\uff88\071\uff88\072\uff88\075\uff88\001\002\000\102\003" +
    "\uff89\010\uff89\014\uff89\015\uff89\023\uff89\024\uff89\025\uff89" +
    "\026\uff89\027\uff89\036\uff89\037\uff89\040\uff89\044\uff89\045" +
    "\uff89\046\uff89\047\uff89\050\uff89\051\uff89\052\uff89\053\uff89" +
    "\054\uff89\055\uff89\056\uff89\060\uff89\061\uff89\062\uff89\063" +
    "\uff89\066\uff89\070\uff89\071\uff89\072\uff89\075\uff89\001\002" +
    "\000\102\003\uff47\010\uff47\014\uff47\015\uff47\023\uff47\024" +
    "\uff47\025\uff47\026\uff47\027\uff47\036\uff47\037\uff47\040\uff47" +
    "\044\uff47\045\uff47\046\uff47\047\uff47\050\uff47\051\uff47\052" +
    "\uff47\053\uff47\054\uff47\055\uff47\056\uff47\060\uff47\061\uff47" +
    "\062\uff47\063\uff47\066\uff47\070\uff47\071\uff47\072\uff47\075" +
    "\uff47\001\002\000\102\003\uff8b\010\uff8b\014\uff8b\015\uff8b" +
    "\023\uff8b\024\uff8b\025\uff8b\026\uff8b\027\uff8b\036\uff8b\037" +
    "\uff8b\040\uff8b\044\uff8b\045\uff8b\046\uff8b\047\uff8b\050\uff8b" +
    "\051\uff8b\052\uff8b\053\uff8b\054\uff8b\055\uff8b\056\uff8b\060" +
    "\uff8b\061\uff8b\062\uff8b\063\uff8b\066\uff8b\070\uff8b\071\uff8b" +
    "\072\uff8b\075\uff8b\001\002\000\102\003\uff8a\010\uff8a\014" +
    "\uff8a\015\uff8a\023\uff8a\024\uff8a\025\uff8a\026\uff8a\027\uff8a" +
    "\036\uff8a\037\uff8a\040\uff8a\044\uff8a\045\uff8a\046\uff8a\047" +
    "\uff8a\050\uff8a\051\uff8a\052\uff8a\053\uff8a\054\uff8a\055\uff8a" +
    "\056\uff8a\060\uff8a\061\uff8a\062\uff8a\063\uff8a\066\uff8a\070" +
    "\uff8a\071\uff8a\072\uff8a\075\uff8a\001\002\000\072\003\uff63" +
    "\010\uff63\014\uff63\015\uff63\023\uff63\024\uff63\025\uff63\026" +
    "\uff63\027\uff63\036\uff63\037\uff63\040\uff63\044\uff63\045\114" +
    "\046\115\047\113\050\112\051\117\052\120\060\uff63\061" +
    "\uff63\062\uff63\063\uff63\066\uff63\070\uff63\071\uff63\072\uff63" +
    "\075\uff63\001\002\000\024\003\uff69\033\uff69\042\uff69\054" +
    "\uff69\057\uff69\065\uff69\073\uff69\074\uff69\075\uff69\001\002" +
    "\000\024\003\uff6b\033\uff6b\042\uff6b\054\uff6b\057\uff6b\065" +
    "\uff6b\073\uff6b\074\uff6b\075\uff6b\001\002\000\024\003\uff6f" +
    "\033\uff6f\042\uff6f\054\uff6f\057\uff6f\065\uff6f\073\uff6f\074" +
    "\uff6f\075\uff6f\001\002\000\024\003\uff6d\033\uff6d\042\uff6d" +
    "\054\uff6d\057\uff6d\065\uff6d\073\uff6d\074\uff6d\075\uff6d\001" +
    "\002\000\056\003\uff70\010\uff70\014\uff70\015\uff70\023\uff70" +
    "\024\uff70\025\uff70\026\uff70\027\uff70\036\uff70\037\uff70\040" +
    "\uff70\044\uff70\060\uff70\061\uff70\062\uff70\063\uff70\066\uff70" +
    "\070\uff70\071\uff70\072\uff70\075\uff70\001\002\000\024\003" +
    "\uff67\033\uff67\042\uff67\054\uff67\057\uff67\065\uff67\073\uff67" +
    "\074\uff67\075\uff67\001\002\000\024\003\uff65\033\uff65\042" +
    "\uff65\054\uff65\057\uff65\065\uff65\073\uff65\074\uff65\075\uff65" +
    "\001\002\000\024\003\056\033\050\042\063\054\055\057" +
    "\064\065\060\073\053\074\052\075\065\001\002\000\056" +
    "\003\uff64\010\uff64\014\uff64\015\uff64\023\uff64\024\uff64\025" +
    "\uff64\026\uff64\027\uff64\036\uff64\037\uff64\040\uff64\044\uff64" +
    "\060\uff64\061\uff64\062\uff64\063\uff64\066\uff64\070\uff64\071" +
    "\uff64\072\uff64\075\uff64\001\002\000\024\003\056\033\050" +
    "\042\063\054\055\057\064\065\060\073\053\074\052\075" +
    "\065\001\002\000\056\003\uff66\010\uff66\014\uff66\015\uff66" +
    "\023\uff66\024\uff66\025\uff66\026\uff66\027\uff66\036\uff66\037" +
    "\uff66\040\uff66\044\uff66\060\uff66\061\uff66\062\uff66\063\uff66" +
    "\066\uff66\070\uff66\071\uff66\072\uff66\075\uff66\001\002\000" +
    "\024\003\056\033\050\042\063\054\055\057\064\065\060" +
    "\073\053\074\052\075\065\001\002\000\056\003\uff6c\010" +
    "\uff6c\014\uff6c\015\uff6c\023\uff6c\024\uff6c\025\uff6c\026\uff6c" +
    "\027\uff6c\036\uff6c\037\uff6c\040\uff6c\044\uff6c\060\uff6c\061" +
    "\uff6c\062\uff6c\063\uff6c\066\uff6c\070\uff6c\071\uff6c\072\uff6c" +
    "\075\uff6c\001\002\000\024\003\056\033\050\042\063\054" +
    "\055\057\064\065\060\073\053\074\052\075\065\001\002" +
    "\000\056\003\uff6e\010\uff6e\014\uff6e\015\uff6e\023\uff6e\024" +
    "\uff6e\025\uff6e\026\uff6e\027\uff6e\036\uff6e\037\uff6e\040\uff6e" +
    "\044\uff6e\060\uff6e\061\uff6e\062\uff6e\063\uff6e\066\uff6e\070" +
    "\uff6e\071\uff6e\072\uff6e\075\uff6e\001\002\000\024\003\056" +
    "\033\050\042\063\054\055\057\064\065\060\073\053\074" +
    "\052\075\065\001\002\000\056\003\uff6a\010\uff6a\014\uff6a" +
    "\015\uff6a\023\uff6a\024\uff6a\025\uff6a\026\uff6a\027\uff6a\036" +
    "\uff6a\037\uff6a\040\uff6a\044\uff6a\060\uff6a\061\uff6a\062\uff6a" +
    "\063\uff6a\066\uff6a\070\uff6a\071\uff6a\072\uff6a\075\uff6a\001" +
    "\002\000\024\003\056\033\050\042\063\054\055\057\064" +
    "\065\060\073\053\074\052\075\065\001\002\000\056\003" +
    "\uff68\010\uff68\014\uff68\015\uff68\023\uff68\024\uff68\025\uff68" +
    "\026\uff68\027\uff68\036\uff68\037\uff68\040\uff68\044\uff68\060" +
    "\uff68\061\uff68\062\uff68\063\uff68\066\uff68\070\uff68\071\uff68" +
    "\072\uff68\075\uff68\001\002\000\076\003\uff5a\010\uff5a\014" +
    "\uff5a\015\uff5a\023\uff5a\024\uff5a\025\uff5a\026\uff5a\027\uff5a" +
    "\036\uff5a\037\uff5a\040\uff5a\044\uff5a\045\uff5a\046\uff5a\047" +
    "\uff5a\050\uff5a\051\uff5a\052\uff5a\053\140\054\137\060\uff5a" +
    "\061\uff5a\062\uff5a\063\uff5a\066\uff5a\070\uff5a\071\uff5a\072" +
    "\uff5a\075\uff5a\001\002\000\072\003\uff61\010\uff61\014\uff61" +
    "\015\uff61\023\uff61\024\uff61\025\uff61\026\uff61\027\uff61\036" +
    "\uff61\037\uff61\040\uff61\044\uff61\045\uff61\046\uff61\047\uff61" +
    "\050\uff61\051\uff61\052\uff61\060\uff61\061\uff61\062\uff61\063" +
    "\uff61\066\uff61\070\uff61\071\uff61\072\uff61\075\uff61\001\002" +
    "\000\024\003\uff5d\033\uff5d\042\uff5d\054\uff5d\057\uff5d\065" +
    "\uff5d\073\uff5d\074\uff5d\075\uff5d\001\002\000\024\003\uff60" +
    "\033\uff60\042\uff60\054\uff60\057\uff60\065\uff60\073\uff60\074" +
    "\uff60\075\uff60\001\002\000\024\003\056\033\050\042\063" +
    "\054\055\057\064\065\060\073\053\074\052\075\065\001" +
    "\002\000\076\003\uff5f\010\uff5f\014\uff5f\015\uff5f\023\uff5f" +
    "\024\uff5f\025\uff5f\026\uff5f\027\uff5f\036\uff5f\037\uff5f\040" +
    "\uff5f\044\uff5f\045\uff5f\046\uff5f\047\uff5f\050\uff5f\051\uff5f" +
    "\052\uff5f\053\uff5f\054\uff5f\060\uff5f\061\uff5f\062\uff5f\063" +
    "\uff5f\066\uff5f\070\uff5f\071\uff5f\072\uff5f\075\uff5f\001\002" +
    "\000\076\003\uff5a\010\uff5a\014\uff5a\015\uff5a\023\uff5a\024" +
    "\uff5a\025\uff5a\026\uff5a\027\uff5a\036\uff5a\037\uff5a\040\uff5a" +
    "\044\uff5a\045\uff5a\046\uff5a\047\uff5a\050\uff5a\051\uff5a\052" +
    "\uff5a\053\140\054\137\060\uff5a\061\uff5a\062\uff5a\063\uff5a" +
    "\066\uff5a\070\uff5a\071\uff5a\072\uff5a\075\uff5a\001\002\000" +
    "\072\003\uff5e\010\uff5e\014\uff5e\015\uff5e\023\uff5e\024\uff5e" +
    "\025\uff5e\026\uff5e\027\uff5e\036\uff5e\037\uff5e\040\uff5e\044" +
    "\uff5e\045\uff5e\046\uff5e\047\uff5e\050\uff5e\051\uff5e\052\uff5e" +
    "\060\uff5e\061\uff5e\062\uff5e\063\uff5e\066\uff5e\070\uff5e\071" +
    "\uff5e\072\uff5e\075\uff5e\001\002\000\024\003\056\033\050" +
    "\042\063\054\055\057\064\065\060\073\053\074\052\075" +
    "\065\001\002\000\076\003\uff5c\010\uff5c\014\uff5c\015\uff5c" +
    "\023\uff5c\024\uff5c\025\uff5c\026\uff5c\027\uff5c\036\uff5c\037" +
    "\uff5c\040\uff5c\044\uff5c\045\uff5c\046\uff5c\047\uff5c\050\uff5c" +
    "\051\uff5c\052\uff5c\053\uff5c\054\uff5c\060\uff5c\061\uff5c\062" +
    "\uff5c\063\uff5c\066\uff5c\070\uff5c\071\uff5c\072\uff5c\075\uff5c" +
    "\001\002\000\076\003\uff5a\010\uff5a\014\uff5a\015\uff5a\023" +
    "\uff5a\024\uff5a\025\uff5a\026\uff5a\027\uff5a\036\uff5a\037\uff5a" +
    "\040\uff5a\044\uff5a\045\uff5a\046\uff5a\047\uff5a\050\uff5a\051" +
    "\uff5a\052\uff5a\053\140\054\137\060\uff5a\061\uff5a\062\uff5a" +
    "\063\uff5a\066\uff5a\070\uff5a\071\uff5a\072\uff5a\075\uff5a\001" +
    "\002\000\072\003\uff5b\010\uff5b\014\uff5b\015\uff5b\023\uff5b" +
    "\024\uff5b\025\uff5b\026\uff5b\027\uff5b\036\uff5b\037\uff5b\040" +
    "\uff5b\044\uff5b\045\uff5b\046\uff5b\047\uff5b\050\uff5b\051\uff5b" +
    "\052\uff5b\060\uff5b\061\uff5b\062\uff5b\063\uff5b\066\uff5b\070" +
    "\uff5b\071\uff5b\072\uff5b\075\uff5b\001\002\000\004\066\152" +
    "\001\002\000\102\003\uff46\010\uff46\014\uff46\015\uff46\023" +
    "\uff46\024\uff46\025\uff46\026\uff46\027\uff46\036\uff46\037\uff46" +
    "\040\uff46\044\uff46\045\uff46\046\uff46\047\uff46\050\uff46\051" +
    "\uff46\052\uff46\053\uff46\054\uff46\055\uff46\056\uff46\060\uff46" +
    "\061\uff46\062\uff46\063\uff46\066\uff46\070\uff46\071\uff46\072" +
    "\uff46\075\uff46\001\002\000\102\003\uff51\010\uff51\014\uff51" +
    "\015\uff51\023\uff51\024\uff51\025\uff51\026\uff51\027\uff51\036" +
    "\uff51\037\uff51\040\uff51\044\uff51\045\uff51\046\uff51\047\uff51" +
    "\050\uff51\051\uff51\052\uff51\053\uff51\054\uff51\055\155\056" +
    "\154\060\uff51\061\uff51\062\uff51\063\uff51\066\uff51\070\uff51" +
    "\071\uff51\072\uff51\075\uff51\001\002\000\024\003\uff57\033" +
    "\uff57\042\uff57\054\uff57\057\uff57\065\uff57\073\uff57\074\uff57" +
    "\075\uff57\001\002\000\024\003\uff54\033\uff54\042\uff54\054" +
    "\uff54\057\uff54\065\uff54\073\uff54\074\uff54\075\uff54\001\002" +
    "\000\076\003\uff58\010\uff58\014\uff58\015\uff58\023\uff58\024" +
    "\uff58\025\uff58\026\uff58\027\uff58\036\uff58\037\uff58\040\uff58" +
    "\044\uff58\045\uff58\046\uff58\047\uff58\050\uff58\051\uff58\052" +
    "\uff58\053\uff58\054\uff58\060\uff58\061\uff58\062\uff58\063\uff58" +
    "\066\uff58\070\uff58\071\uff58\072\uff58\075\uff58\001\002\000" +
    "\024\003\056\033\050\042\063\054\055\057\064\065\060" +
    "\073\053\074\052\075\065\001\002\000\102\003\uff53\010" +
    "\uff53\014\uff53\015\uff53\023\uff53\024\uff53\025\uff53\026\uff53" +
    "\027\uff53\036\uff53\037\uff53\040\uff53\044\uff53\045\uff53\046" +
    "\uff53\047\uff53\050\uff53\051\uff53\052\uff53\053\uff53\054\uff53" +
    "\055\uff53\056\uff53\060\uff53\061\uff53\062\uff53\063\uff53\066" +
    "\uff53\070\uff53\071\uff53\072\uff53\075\uff53\001\002\000\102" +
    "\003\uff51\010\uff51\014\uff51\015\uff51\023\uff51\024\uff51\025" +
    "\uff51\026\uff51\027\uff51\036\uff51\037\uff51\040\uff51\044\uff51" +
    "\045\uff51\046\uff51\047\uff51\050\uff51\051\uff51\052\uff51\053" +
    "\uff51\054\uff51\055\155\056\154\060\uff51\061\uff51\062\uff51" +
    "\063\uff51\066\uff51\070\uff51\071\uff51\072\uff51\075\uff51\001" +
    "\002\000\076\003\uff52\010\uff52\014\uff52\015\uff52\023\uff52" +
    "\024\uff52\025\uff52\026\uff52\027\uff52\036\uff52\037\uff52\040" +
    "\uff52\044\uff52\045\uff52\046\uff52\047\uff52\050\uff52\051\uff52" +
    "\052\uff52\053\uff52\054\uff52\060\uff52\061\uff52\062\uff52\063" +
    "\uff52\066\uff52\070\uff52\071\uff52\072\uff52\075\uff52\001\002" +
    "\000\024\003\056\033\050\042\063\054\055\057\064\065" +
    "\060\073\053\074\052\075\065\001\002\000\102\003\uff56" +
    "\010\uff56\014\uff56\015\uff56\023\uff56\024\uff56\025\uff56\026" +
    "\uff56\027\uff56\036\uff56\037\uff56\040\uff56\044\uff56\045\uff56" +
    "\046\uff56\047\uff56\050\uff56\051\uff56\052\uff56\053\uff56\054" +
    "\uff56\055\uff56\056\uff56\060\uff56\061\uff56\062\uff56\063\uff56" +
    "\066\uff56\070\uff56\071\uff56\072\uff56\075\uff56\001\002\000" +
    "\102\003\uff51\010\uff51\014\uff51\015\uff51\023\uff51\024\uff51" +
    "\025\uff51\026\uff51\027\uff51\036\uff51\037\uff51\040\uff51\044" +
    "\uff51\045\uff51\046\uff51\047\uff51\050\uff51\051\uff51\052\uff51" +
    "\053\uff51\054\uff51\055\155\056\154\060\uff51\061\uff51\062" +
    "\uff51\063\uff51\066\uff51\070\uff51\071\uff51\072\uff51\075\uff51" +
    "\001\002\000\076\003\uff55\010\uff55\014\uff55\015\uff55\023" +
    "\uff55\024\uff55\025\uff55\026\uff55\027\uff55\036\uff55\037\uff55" +
    "\040\uff55\044\uff55\045\uff55\046\uff55\047\uff55\050\uff55\051" +
    "\uff55\052\uff55\053\uff55\054\uff55\060\uff55\061\uff55\062\uff55" +
    "\063\uff55\066\uff55\070\uff55\071\uff55\072\uff55\075\uff55\001" +
    "\002\000\102\003\uff4f\010\uff4f\014\uff4f\015\uff4f\023\uff4f" +
    "\024\uff4f\025\uff4f\026\uff4f\027\uff4f\036\uff4f\037\uff4f\040" +
    "\uff4f\044\uff4f\045\uff4f\046\uff4f\047\uff4f\050\uff4f\051\uff4f" +
    "\052\uff4f\053\uff4f\054\uff4f\055\uff4f\056\uff4f\060\uff4f\061" +
    "\uff4f\062\uff4f\063\uff4f\066\uff4f\070\uff4f\071\uff4f\072\uff4f" +
    "\075\uff4f\001\002\000\012\003\172\023\175\024\171\025" +
    "\173\001\002\000\044\003\uff8e\010\uff8e\014\uff8e\015\uff8e" +
    "\026\uff8e\027\uff8e\036\uff8e\037\uff8e\040\uff8e\044\uff8e\062" +
    "\uff8e\063\uff8e\066\uff8e\070\uff8e\071\uff8e\072\uff8e\075\uff8e" +
    "\001\002\000\044\003\uff8c\010\uff8c\014\uff8c\015\uff8c\026" +
    "\uff8c\027\uff8c\036\uff8c\037\uff8c\040\uff8c\044\uff8c\062\uff8c" +
    "\063\uff8c\066\uff8c\070\uff8c\071\uff8c\072\uff8c\075\uff8c\001" +
    "\002\000\044\003\uff8d\010\uff8d\014\uff8d\015\uff8d\026\uff8d" +
    "\027\uff8d\036\uff8d\037\uff8d\040\uff8d\044\uff8d\062\uff8d\063" +
    "\uff8d\066\uff8d\070\uff8d\071\uff8d\072\uff8d\075\uff8d\001\002" +
    "\000\044\003\uff90\010\uff90\014\uff90\015\uff90\026\uff90\027" +
    "\uff90\036\uff90\037\uff90\040\uff90\044\uff90\062\uff90\063\uff90" +
    "\066\uff90\070\uff90\071\uff90\072\uff90\075\uff90\001\002\000" +
    "\044\003\uff8f\010\uff8f\014\uff8f\015\uff8f\026\uff8f\027\uff8f" +
    "\036\uff8f\037\uff8f\040\uff8f\044\uff8f\062\uff8f\063\uff8f\066" +
    "\uff8f\070\uff8f\071\uff8f\072\uff8f\075\uff8f\001\002\000\102" +
    "\003\uff4a\010\uff4a\014\uff4a\015\uff4a\023\uff4a\024\uff4a\025" +
    "\uff4a\026\uff4a\027\uff4a\036\uff4a\037\uff4a\040\uff4a\044\uff4a" +
    "\045\uff4a\046\uff4a\047\uff4a\050\uff4a\051\uff4a\052\uff4a\053" +
    "\uff4a\054\uff4a\055\uff4a\056\uff4a\060\uff4a\061\uff4a\062\uff4a" +
    "\063\uff4a\066\uff4a\070\uff4a\071\uff4a\072\uff4a\075\uff4a\001" +
    "\002\000\102\003\uff49\010\uff49\014\uff49\015\uff49\023\uff49" +
    "\024\uff49\025\uff49\026\uff49\027\uff49\036\uff49\037\uff49\040" +
    "\uff49\044\uff49\045\uff49\046\uff49\047\uff49\050\uff49\051\uff49" +
    "\052\uff49\053\uff49\054\uff49\055\uff49\056\uff49\060\uff49\061" +
    "\uff49\062\uff49\063\uff49\066\uff49\070\uff49\071\uff49\072\uff49" +
    "\075\uff49\001\002\000\036\003\032\010\037\014\024\015" +
    "\025\026\040\027\030\036\021\037\026\040\020\044\031" +
    "\062\034\063\035\070\uffa4\075\036\001\002\000\036\003" +
    "\032\010\037\014\024\015\025\026\040\027\030\036\021" +
    "\037\026\040\020\044\031\062\034\063\035\070\uffa4\075" +
    "\036\001\002\000\004\070\uffd5\001\002\000\004\070\uffd3" +
    "\001\002\000\040\003\uffce\010\uffce\014\uffce\015\uffce\026" +
    "\uffce\027\uffce\036\uffce\037\uffce\040\uffce\044\uffce\062\uffce" +
    "\063\uffce\070\uffce\071\206\075\uffce\001\002\000\036\003" +
    "\032\010\037\014\024\015\025\026\040\027\030\036\021" +
    "\037\026\040\020\044\031\062\034\063\035\070\uffa4\075" +
    "\036\001\002\000\036\003\032\010\037\014\024\015\025" +
    "\026\040\027\030\036\021\037\026\040\020\044\031\062" +
    "\034\063\035\070\uffa4\075\036\001\002\000\004\070\uffcf" +
    "\001\002\000\004\070\uffcd\001\002\000\036\003\032\010" +
    "\037\014\024\015\025\026\040\027\030\036\021\037\026" +
    "\040\020\044\031\062\034\063\035\070\uffa4\075\036\001" +
    "\002\000\024\003\056\033\050\042\063\054\055\057\064" +
    "\065\060\073\053\074\052\075\065\001\002\000\004\066" +
    "\214\001\002\000\004\067\215\001\002\000\036\003\032" +
    "\010\037\014\024\015\025\026\040\027\030\036\021\037" +
    "\026\040\020\044\031\062\034\063\035\070\uffa4\075\036" +
    "\001\002\000\004\070\217\001\002\000\040\003\uff45\010" +
    "\uff45\011\221\014\uff45\015\uff45\026\uff45\027\uff45\036\uff45" +
    "\037\uff45\040\uff45\044\uff45\062\uff45\063\uff45\070\uff45\075" +
    "\uff45\001\002\000\036\003\uff44\010\uff44\014\uff44\015\uff44" +
    "\026\uff44\027\uff44\036\uff44\037\uff44\040\uff44\044\uff44\062" +
    "\uff44\063\uff44\070\uff44\075\uff44\001\002\000\006\010\222" +
    "\067\223\001\002\000\004\065\212\001\002\000\036\003" +
    "\032\010\037\014\024\015\025\026\040\027\030\036\021" +
    "\037\026\040\020\044\031\062\034\063\035\070\uffa4\075" +
    "\036\001\002\000\004\070\225\001\002\000\036\003\uff42" +
    "\010\uff42\014\uff42\015\uff42\026\uff42\027\uff42\036\uff42\037" +
    "\uff42\040\uff42\044\uff42\062\uff42\063\uff42\070\uff42\075\uff42" +
    "\001\002\000\036\003\uff43\010\uff43\014\uff43\015\uff43\026" +
    "\uff43\027\uff43\036\uff43\037\uff43\040\uff43\044\uff43\062\uff43" +
    "\063\uff43\070\uff43\075\uff43\001\002\000\004\070\uffdc\001" +
    "\002\000\004\017\252\001\002\000\024\003\056\033\050" +
    "\042\063\054\055\057\064\065\060\073\053\074\052\075" +
    "\065\001\002\000\040\003\ufff4\010\ufff4\014\ufff4\015\ufff4" +
    "\026\ufff4\027\ufff4\036\ufff4\037\ufff4\040\ufff4\044\ufff4\062" +
    "\ufff4\063\ufff4\070\ufff4\071\ufff6\075\ufff4\001\002\000\004" +
    "\064\242\001\002\000\040\003\ufff0\010\ufff0\014\ufff0\015" +
    "\ufff0\026\ufff0\027\ufff0\036\ufff0\037\ufff0\040\ufff0\044\ufff0" +
    "\062\ufff0\063\ufff0\070\ufff0\071\ufff2\075\ufff0\001\002\000" +
    "\036\003\032\010\037\014\024\015\025\026\040\027\030" +
    "\036\021\037\026\040\020\044\031\062\034\063\035\070" +
    "\uffa4\075\036\001\002\000\004\071\237\001\002\000\036" +
    "\003\032\010\037\014\024\015\025\026\040\027\030\036" +
    "\021\037\026\040\020\044\031\062\034\063\035\070\uffa4" +
    "\075\036\001\002\000\004\070\ufff1\001\002\000\004\070" +
    "\uffef\001\002\000\024\003\056\033\050\042\063\054\055" +
    "\057\064\065\060\073\053\074\052\075\065\001\002\000" +
    "\040\003\uff86\010\uff86\014\uff86\015\uff86\026\uff86\027\uff86" +
    "\036\uff86\037\uff86\040\uff86\044\uff86\062\uff86\063\uff86\070" +
    "\uff86\071\uff86\075\uff86\001\002\000\004\071\247\001\002" +
    "\000\036\003\032\010\037\014\024\015\025\026\040\027" +
    "\030\036\021\037\026\040\020\044\031\062\034\063\035" +
    "\070\uffa4\075\036\001\002\000\004\070\ufff3\001\002\000" +
    "\036\003\032\010\037\014\024\015\025\026\040\027\030" +
    "\036\021\037\026\040\020\044\031\062\034\063\035\070" +
    "\uffa4\075\036\001\002\000\004\070\ufff5\001\002\000\040" +
    "\003\uff82\010\uff82\014\uff82\015\uff82\026\uff82\027\uff82\036" +
    "\uff82\037\uff82\040\uff82\044\uff82\062\uff82\063\uff82\070\uff82" +
    "\071\uff82\075\uff82\001\002\000\004\020\254\001\002\000" +
    "\046\003\uff80\010\uff80\014\uff80\015\uff80\026\uff80\027\uff80" +
    "\036\uff80\037\uff80\040\uff80\044\uff80\062\uff80\063\uff80\064" +
    "\uff80\066\uff80\070\uff80\071\uff80\072\uff80\075\uff80\001\002" +
    "\000\010\003\256\006\260\007\257\001\002\000\046\003" +
    "\uff7e\010\uff7e\014\uff7e\015\uff7e\026\uff7e\027\uff7e\036\uff7e" +
    "\037\uff7e\040\uff7e\044\uff7e\062\uff7e\063\uff7e\064\uff7e\066" +
    "\uff7e\070\uff7e\071\uff7e\072\uff7e\075\uff7e\001\002\000\046" +
    "\003\uff7b\010\uff7b\014\uff7b\015\uff7b\026\uff7b\027\uff7b\036" +
    "\uff7b\037\uff7b\040\uff7b\044\uff7b\062\uff7b\063\uff7b\064\uff7b" +
    "\066\uff7b\070\uff7b\071\uff7b\072\uff7b\075\uff7b\001\002\000" +
    "\046\003\uff7c\010\uff7c\014\uff7c\015\uff7c\026\uff7c\027\uff7c" +
    "\036\uff7c\037\uff7c\040\uff7c\044\uff7c\062\uff7c\063\uff7c\064" +
    "\uff7c\066\uff7c\070\uff7c\071\uff7c\072\uff7c\075\uff7c\001\002" +
    "\000\046\003\uff7d\010\uff7d\014\uff7d\015\uff7d\026\uff7d\027" +
    "\uff7d\036\uff7d\037\uff7d\040\uff7d\044\uff7d\062\uff7d\063\uff7d" +
    "\064\uff7d\066\uff7d\070\uff7d\071\uff7d\072\uff7d\075\uff7d\001" +
    "\002\000\004\071\uffb4\001\002\000\040\003\uffe8\010\uffe8" +
    "\014\uffe8\015\uffe8\026\uffe8\027\uffe8\036\uffe8\037\uffe8\040" +
    "\uffe8\044\uffe8\062\uffe8\063\uffe8\070\uffe8\071\uffea\075\uffe8" +
    "\001\002\000\036\003\032\010\037\014\024\015\025\026" +
    "\040\027\030\036\021\037\026\040\020\044\031\062\034" +
    "\063\035\070\uffa4\075\036\001\002\000\004\071\265\001" +
    "\002\000\036\003\032\010\037\014\024\015\025\026\040" +
    "\027\030\036\021\037\026\040\020\044\031\062\034\063" +
    "\035\070\uffa4\075\036\001\002\000\004\070\uffe9\001\002" +
    "\000\004\070\uffe7\001\002\000\004\071\271\001\002\000" +
    "\036\003\032\010\037\014\024\015\025\026\040\027\030" +
    "\036\021\037\026\040\020\044\031\062\034\063\035\070" +
    "\uffa4\075\036\001\002\000\004\070\uffb3\001\002\000\004" +
    "\071\uffb6\001\002\000\040\003\uffec\010\uffec\014\uffec\015" +
    "\uffec\026\uffec\027\uffec\036\uffec\037\uffec\040\uffec\044\uffec" +
    "\062\uffec\063\uffec\070\uffec\071\uffee\075\uffec\001\002\000" +
    "\036\003\032\010\037\014\024\015\025\026\040\027\030" +
    "\036\021\037\026\040\020\044\031\062\034\063\035\070" +
    "\uffa4\075\036\001\002\000\004\071\277\001\002\000\036" +
    "\003\032\010\037\014\024\015\025\026\040\027\030\036" +
    "\021\037\026\040\020\044\031\062\034\063\035\070\uffa4" +
    "\075\036\001\002\000\004\070\uffed\001\002\000\004\070" +
    "\uffeb\001\002\000\004\071\303\001\002\000\036\003\032" +
    "\010\037\014\024\015\025\026\040\027\030\036\021\037" +
    "\026\040\020\044\031\062\034\063\035\070\uffa4\075\036" +
    "\001\002\000\004\070\uffb5\001\002\000\036\003\032\010" +
    "\037\014\024\015\025\026\040\027\030\036\021\037\026" +
    "\040\020\044\031\062\034\063\035\070\uffa4\075\036\001" +
    "\002\000\036\003\032\010\037\014\024\015\025\026\040" +
    "\027\030\036\021\037\026\040\020\044\031\062\034\063" +
    "\035\070\uffa4\075\036\001\002\000\004\070\uffc1\001\002" +
    "\000\004\070\uffc3\001\002\000\004\022\046\001\002\000" +
    "\004\030\u0104\001\002\000\040\003\uff9c\010\uff9c\014\uff9c" +
    "\015\uff9c\026\uff9c\027\uff9c\036\uff9c\037\uff9c\040\uff9c\044" +
    "\uff9c\062\uff9c\063\uff9c\070\uff9c\071\uff9c\075\uff9c\001\002" +
    "\000\004\031\u0100\001\002\000\004\065\212\001\002\000" +
    "\004\041\373\001\002\000\004\063\370\001\002\000\004" +
    "\062\365\001\002\000\004\071\363\001\002\000\004\065" +
    "\356\001\002\000\004\065\uff98\001\002\000\040\003\uff9d" +
    "\010\uff9d\014\uff9d\015\uff9d\026\uff9d\027\uff9d\036\uff9d\037" +
    "\uff9d\040\uff9d\044\uff9d\062\uff9d\063\uff9d\070\uff9d\071\uff9d" +
    "\075\uff9d\001\002\000\040\003\uff9b\010\uff9b\014\uff9b\015" +
    "\uff9b\026\uff9b\027\uff9b\036\uff9b\037\uff9b\040\uff9b\044\uff9b" +
    "\062\uff9b\063\uff9b\070\uff9b\071\uff9b\075\uff9b\001\002\000" +
    "\004\065\343\001\002\000\004\064\341\001\002\000\004" +
    "\065\uff9a\001\002\000\004\065\332\001\002\000\026\003" +
    "\056\033\050\042\063\054\055\057\064\065\060\066\uff93" +
    "\073\053\074\052\075\065\001\002\000\004\066\340\001" +
    "\002\000\006\066\uff94\072\uff96\001\002\000\004\072\336" +
    "\001\002\000\026\003\056\033\050\042\063\054\055\057" +
    "\064\065\060\066\uff93\073\053\074\052\075\065\001\002" +
    "\000\004\066\uff95\001\002\000\040\003\uff99\010\uff99\014" +
    "\uff99\015\uff99\026\uff99\027\uff99\036\uff99\037\uff99\040\uff99" +
    "\044\uff99\062\uff99\063\uff99\070\uff99\071\uff99\075\uff99\001" +
    "\002\000\024\003\056\033\050\042\063\054\055\057\064" +
    "\065\060\073\053\074\052\075\065\001\002\000\040\003" +
    "\uff84\010\uff84\014\uff84\015\uff84\026\uff84\027\uff84\036\uff84" +
    "\037\uff84\040\uff84\044\uff84\062\uff84\063\uff84\070\uff84\071" +
    "\uff84\075\uff84\001\002\000\004\022\046\001\002\000\004" +
    "\072\345\001\002\000\024\003\056\033\050\042\063\054" +
    "\055\057\064\065\060\073\053\074\052\075\065\001\002" +
    "\000\004\072\347\001\002\000\024\003\056\033\050\042" +
    "\063\054\055\057\064\065\060\073\053\074\052\075\065" +
    "\001\002\000\004\066\351\001\002\000\040\003\uff41\010" +
    "\uff41\014\uff41\015\uff41\026\uff41\027\uff41\036\uff41\037\uff41" +
    "\040\uff41\044\uff41\062\uff41\063\uff41\070\uff41\071\uff41\075" +
    "\uff41\001\002\000\004\065\353\001\002\000\026\003\056" +
    "\033\050\042\063\054\055\057\064\065\060\066\uff93\073" +
    "\053\074\052\075\065\001\002\000\004\066\355\001\002" +
    "\000\040\003\uff97\010\uff97\014\uff97\015\uff97\026\uff97\027" +
    "\uff97\036\uff97\037\uff97\040\uff97\044\uff97\062\uff97\063\uff97" +
    "\070\uff97\071\uff97\075\uff97\001\002\000\024\003\056\033" +
    "\050\042\063\054\055\057\064\065\060\073\053\074\052" +
    "\075\065\001\002\000\004\072\360\001\002\000\004\022" +
    "\046\001\002\000\004\066\362\001\002\000\040\003\uff40" +
    "\010\uff40\014\uff40\015\uff40\026\uff40\027\uff40\036\uff40\037" +
    "\uff40\040\uff40\044\uff40\062\uff40\063\uff40\070\uff40\071\uff40" +
    "\075\uff40\001\002\000\036\003\032\010\037\014\024\015" +
    "\025\026\040\027\030\036\021\037\026\040\020\044\031" +
    "\062\034\063\035\070\uffa4\075\036\001\002\000\004\070" +
    "\uffbb\001\002\000\004\071\366\001\002\000\036\003\032" +
    "\010\037\014\024\015\025\026\040\027\030\036\021\037" +
    "\026\040\020\044\031\062\034\063\035\070\uffa4\075\036" +
    "\001\002\000\004\070\uffb9\001\002\000\004\071\371\001" +
    "\002\000\036\003\032\010\037\014\024\015\025\026\040" +
    "\027\030\036\021\037\026\040\020\044\031\062\034\063" +
    "\035\070\uffa4\075\036\001\002\000\004\070\uffb7\001\002" +
    "\000\004\071\374\001\002\000\036\003\032\010\037\014" +
    "\024\015\025\026\040\027\030\036\021\037\026\040\020" +
    "\044\031\062\034\063\035\070\uffa4\075\036\001\002\000" +
    "\004\070\uffaf\001\002\000\036\003\032\010\037\014\024" +
    "\015\025\026\040\027\030\036\021\037\026\040\020\044" +
    "\031\062\034\063\035\070\uffa4\075\036\001\002\000\004" +
    "\070\uffb1\001\002\000\010\003\045\022\046\032\047\001" +
    "\002\000\004\071\u0102\001\002\000\036\003\032\010\037" +
    "\014\024\015\025\026\040\027\030\036\021\037\026\040" +
    "\020\044\031\062\034\063\035\070\uffa4\075\036\001\002" +
    "\000\004\070\uffa9\001\002\000\010\003\045\022\046\032" +
    "\047\001\002\000\004\071\u0106\001\002\000\036\003\032" +
    "\010\037\014\024\015\025\026\040\027\030\036\021\037" +
    "\026\040\020\044\031\062\034\063\035\070\uffa4\075\036" +
    "\001\002\000\004\070\uffa7\001\002\000\004\071\u0109\001" +
    "\002\000\036\003\032\010\037\014\024\015\025\026\040" +
    "\027\030\036\021\037\026\040\020\044\031\062\034\063" +
    "\035\070\uffa4\075\036\001\002\000\004\070\uffa5\001\002" +
    "\000\040\003\uffa0\010\uffa0\014\uffa0\015\uffa0\026\uffa0\027" +
    "\uffa0\036\uffa0\037\uffa0\040\uffa0\044\uffa0\062\uffa0\063\uffa0" +
    "\070\uffa0\071\uffa0\075\uffa0\001\002\000\040\003\uff9f\010" +
    "\uff9f\014\uff9f\015\uff9f\026\uff9f\027\uff9f\036\uff9f\037\uff9f" +
    "\040\uff9f\044\uff9f\062\uff9f\063\uff9f\070\uff9f\071\uff9f\075" +
    "\uff9f\001\002\000\040\003\uff9e\010\uff9e\014\uff9e\015\uff9e" +
    "\026\uff9e\027\uff9e\036\uff9e\037\uff9e\040\uff9e\044\uff9e\062" +
    "\uff9e\063\uff9e\070\uff9e\071\uff9e\075\uff9e\001\002\000\010" +
    "\003\045\022\046\032\047\001\002\000\010\003\045\022" +
    "\046\032\047\001\002\000\040\003\uffd1\010\uffd1\014\uffd1" +
    "\015\uffd1\026\uffd1\027\uffd1\036\uffd1\037\uffd1\040\uffd1\044" +
    "\uffd1\062\uffd1\063\uffd1\070\uffd1\071\u0112\075\uffd1\001\002" +
    "\000\036\003\032\010\037\014\024\015\025\026\040\027" +
    "\030\036\021\037\026\040\020\044\031\062\034\063\035" +
    "\070\uffa4\075\036\001\002\000\036\003\032\010\037\014" +
    "\024\015\025\026\040\027\030\036\021\037\026\040\020" +
    "\044\031\062\034\063\035\070\uffa4\075\036\001\002\000" +
    "\004\070\uffd2\001\002\000\004\070\uffd0\001\002\000\040" +
    "\003\uffcb\010\uffcb\014\uffcb\015\uffcb\026\uffcb\027\uffcb\036" +
    "\uffcb\037\uffcb\040\uffcb\044\uffcb\062\uffcb\063\uffcb\070\uffcb" +
    "\071\u0117\075\uffcb\001\002\000\036\003\032\010\037\014" +
    "\024\015\025\026\040\027\030\036\021\037\026\040\020" +
    "\044\031\062\034\063\035\070\uffa4\075\036\001\002\000" +
    "\036\003\032\010\037\014\024\015\025\026\040\027\030" +
    "\036\021\037\026\040\020\044\031\062\034\063\035\070" +
    "\uffa4\075\036\001\002\000\004\070\uffcc\001\002\000\004" +
    "\070\uffca\001\002\000\036\003\032\010\037\014\024\015" +
    "\025\026\040\027\030\036\021\037\026\040\020\044\031" +
    "\062\034\063\035\070\uffa4\075\036\001\002\000\036\003" +
    "\032\010\037\014\024\015\025\026\040\027\030\036\021" +
    "\037\026\040\020\044\031\062\034\063\035\070\uffa4\075" +
    "\036\001\002\000\004\070\uffdd\001\002\000\004\070\uffdf" +
    "\001\002\000\004\071\uffae\001\002\000\040\003\uffd7\010" +
    "\uffd7\014\uffd7\015\uffd7\026\uffd7\027\uffd7\036\uffd7\037\uffd7" +
    "\040\uffd7\044\uffd7\062\uffd7\063\uffd7\070\uffd7\071\u0120\075" +
    "\uffd7\001\002\000\036\003\032\010\037\014\024\015\025" +
    "\026\040\027\030\036\021\037\026\040\020\044\031\062" +
    "\034\063\035\070\uffa4\075\036\001\002\000\036\003\032" +
    "\010\037\014\024\015\025\026\040\027\030\036\021\037" +
    "\026\040\020\044\031\062\034\063\035\070\uffa4\075\036" +
    "\001\002\000\004\070\uffd6\001\002\000\004\070\uffd8\001" +
    "\002\000\004\071\u0125\001\002\000\036\003\032\010\037" +
    "\014\024\015\025\026\040\027\030\036\021\037\026\040" +
    "\020\044\031\062\034\063\035\070\uffa4\075\036\001\002" +
    "\000\004\070\uffad\001\002\000\006\070\uffbe\071\u0129\001" +
    "\002\000\004\070\uffc0\001\002\000\004\070\uffbd\001\002" +
    "\000\040\003\uffc5\010\uffc5\014\uffc5\015\uffc5\026\uffc5\027" +
    "\uffc5\036\uffc5\037\uffc5\040\uffc5\044\uffc5\062\uffc5\063\uffc5" +
    "\070\uffc5\071\u012c\075\uffc5\001\002\000\036\003\032\010" +
    "\037\014\024\015\025\026\040\027\030\036\021\037\026" +
    "\040\020\044\031\062\034\063\035\070\uffa4\075\036\001" +
    "\002\000\036\003\032\010\037\014\024\015\025\026\040" +
    "\027\030\036\021\037\026\040\020\044\031\062\034\063" +
    "\035\070\uffa4\075\036\001\002\000\004\070\uffc6\001\002" +
    "\000\004\070\uffc4\001\002\000\006\043\u0131\070\u0132\001" +
    "\002\000\004\002\uffff\001\002\000\004\075\u0134\001\002" +
    "\000\004\004\u0133\001\002\000\004\002\ufffe\001\002\000" +
    "\004\065\ufffc\001\002\000\006\043\u0131\070\u0132\001\002" +
    "\000\004\002\ufffd\001\002\000\004\065\u0138\001\002\000" +
    "\006\066\ufff7\075\u013a\001\002\000\004\066\u013f\001\002" +
    "\000\004\017\uff81\001\002\000\006\066\ufff8\072\ufffa\001" +
    "\002\000\004\072\u013d\001\002\000\006\066\ufff7\075\u013a" +
    "\001\002\000\004\066\ufff9\001\002\000\004\067\u0140\001" +
    "\002\000\036\003\032\010\037\014\024\015\025\026\040" +
    "\027\030\036\021\037\026\040\020\044\031\062\034\063" +
    "\035\070\uffa4\075\036\001\002\000\004\070\u0142\001\002" +
    "\000\006\043\ufffb\070\ufffb\001\002\000\040\003\uffe1\010" +
    "\uffe1\014\uffe1\015\uffe1\026\uffe1\027\uffe1\036\uffe1\037\uffe1" +
    "\040\uffe1\044\uffe1\062\uffe1\063\uffe1\070\uffe1\071\uffe3\075" +
    "\uffe1\001\002\000\024\003\056\033\050\042\063\054\055" +
    "\057\064\065\060\073\053\074\052\075\065\001\002\000" +
    "\036\003\032\010\037\014\024\015\025\026\040\027\030" +
    "\036\021\037\026\040\020\044\031\062\034\063\035\070" +
    "\uffa4\075\036\001\002\000\036\003\032\010\037\014\024" +
    "\015\025\026\040\027\030\036\021\037\026\040\020\044" +
    "\031\062\034\063\035\070\uffa4\075\036\001\002\000\004" +
    "\070\uffe4\001\002\000\004\070\uffe6\001\002\000\040\003" +
    "\uff7f\010\uff7f\014\uff7f\015\uff7f\026\uff7f\027\uff7f\036\uff7f" +
    "\037\uff7f\040\uff7f\044\uff7f\062\uff7f\063\uff7f\070\uff7f\071" +
    "\uff7f\075\uff7f\001\002\000\036\003\032\010\037\014\024" +
    "\015\025\026\040\027\030\036\021\037\026\040\020\044" +
    "\031\062\034\063\035\070\uffa4\075\036\001\002\000\004" +
    "\071\u014c\001\002\000\036\003\032\010\037\014\024\015" +
    "\025\026\040\027\030\036\021\037\026\040\020\044\031" +
    "\062\034\063\035\070\uffa4\075\036\001\002\000\004\070" +
    "\uffe2\001\002\000\004\070\uffe0\001\002\000\004\071\uffac" +
    "\001\002\000\040\003\uffda\010\uffda\014\uffda\015\uffda\026" +
    "\uffda\027\uffda\036\uffda\037\uffda\040\uffda\044\uffda\062\uffda" +
    "\063\uffda\070\uffda\071\u0151\075\uffda\001\002\000\036\003" +
    "\032\010\037\014\024\015\025\026\040\027\030\036\021" +
    "\037\026\040\020\044\031\062\034\063\035\070\uffa4\075" +
    "\036\001\002\000\036\003\032\010\037\014\024\015\025" +
    "\026\040\027\030\036\021\037\026\040\020\044\031\062" +
    "\034\063\035\070\uffa4\075\036\001\002\000\004\070\uffd9" +
    "\001\002\000\004\070\uffdb\001\002\000\004\071\u0156\001" +
    "\002\000\036\003\032\010\037\014\024\015\025\026\040" +
    "\027\030\036\021\037\026\040\020\044\031\062\034\063" +
    "\035\070\uffa4\075\036\001\002\000\004\070\uffab\001\002" +
    "\000\040\003\uffc8\010\uffc8\014\uffc8\015\uffc8\026\uffc8\027" +
    "\uffc8\036\uffc8\037\uffc8\040\uffc8\044\uffc8\062\uffc8\063\uffc8" +
    "\070\uffc8\071\u015a\075\uffc8\001\002\000\036\003\032\010" +
    "\037\014\024\015\025\026\040\027\030\036\021\037\026" +
    "\040\020\044\031\062\034\063\035\070\uffa4\075\036\001" +
    "\002\000\036\003\032\010\037\014\024\015\025\026\040" +
    "\027\030\036\021\037\026\040\020\044\031\062\034\063" +
    "\035\070\uffa4\075\036\001\002\000\004\070\uffc9\001\002" +
    "\000\004\070\uffc7\001\002\000\012\003\172\023\175\024" +
    "\171\025\173\001\002\000\004\066\uff92\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u015c\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\042\007\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\014\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\003\022\016\026\021\032\037" +
    "\021\001\001\000\004\005\u0157\001\001\000\002\001\001" +
    "\000\006\007\u0142\055\u0145\001\001\000\002\001\001\000" +
    "\004\005\u0129\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\060\u011a\001\001\000\002\001\001\000\010\010" +
    "\u010c\011\u010b\034\u010a\001\001\000\032\010\324\011\312" +
    "\034\323\072\320\073\317\074\316\077\314\100\315\103" +
    "\313\104\311\105\310\113\326\001\001\000\004\071\305" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\112" +
    "\232\114\230\115\227\001\001\000\004\040\210\001\001" +
    "\000\002\001\001\000\006\005\043\033\203\001\001\000" +
    "\006\005\043\033\042\001\001\000\004\063\177\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\017\053\022" +
    "\050\024\065\026\061\030\060\032\056\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\111\167\001\001\000\004" +
    "\022\166\001\001\000\002\001\001\000\004\137\152\001" +
    "\001\000\016\017\150\022\050\024\065\026\061\030\060" +
    "\032\056\001\001\000\004\132\134\001\001\000\004\123" +
    "\110\001\001\000\004\012\105\001\001\000\004\022\102" +
    "\001\001\000\002\001\001\000\004\116\066\001\001\000" +
    "\004\023\067\001\001\000\002\001\001\000\004\117\076" +
    "\001\001\000\004\121\072\001\001\000\014\022\050\024" +
    "\073\026\061\030\060\032\056\001\001\000\004\122\074" +
    "\001\001\000\004\023\075\001\001\000\002\001\001\000" +
    "\014\022\050\024\077\026\061\030\060\032\056\001\001" +
    "\000\004\120\100\001\001\000\004\023\101\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\025\115\001\001\000\004\127\132\001\001" +
    "\000\004\126\130\001\001\000\004\124\126\001\001\000" +
    "\004\125\124\001\001\000\002\001\001\000\004\130\122" +
    "\001\001\000\004\131\120\001\001\000\012\022\050\026" +
    "\121\030\060\032\056\001\001\000\002\001\001\000\012" +
    "\022\050\026\123\030\060\032\056\001\001\000\002\001" +
    "\001\000\012\022\050\026\125\030\060\032\056\001\001" +
    "\000\002\001\001\000\012\022\050\026\127\030\060\032" +
    "\056\001\001\000\002\001\001\000\012\022\050\026\131" +
    "\030\060\032\056\001\001\000\002\001\001\000\012\022" +
    "\050\026\133\030\060\032\056\001\001\000\002\001\001" +
    "\000\004\027\135\001\001\000\002\001\001\000\004\135" +
    "\144\001\001\000\004\133\140\001\001\000\010\022\050" +
    "\030\141\032\056\001\001\000\004\134\142\001\001\000" +
    "\004\027\143\001\001\000\002\001\001\000\010\022\050" +
    "\030\145\032\056\001\001\000\004\136\146\001\001\000" +
    "\004\027\147\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\031\155\001\001\000\004\140" +
    "\162\001\001\000\004\142\156\001\001\000\002\001\001" +
    "\000\006\022\050\032\157\001\001\000\004\143\160\001" +
    "\001\000\004\031\161\001\001\000\002\001\001\000\006" +
    "\022\050\032\163\001\001\000\004\141\164\001\001\000" +
    "\004\031\165\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\173\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\003\202\016" +
    "\026\021\032\037\021\001\001\000\012\003\201\016\026" +
    "\021\032\037\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\065\204\001\001\000\012\003\207\016\026" +
    "\021\032\037\021\001\001\000\012\003\206\016\026\021" +
    "\032\037\021\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\003\226\016\026\021\032\037\021\001\001\000" +
    "\016\017\212\022\050\024\065\026\061\030\060\032\056" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\003" +
    "\215\016\026\021\032\037\021\001\001\000\002\001\001" +
    "\000\004\041\217\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\040\225\001\001\000\012\003\223\016\026" +
    "\021\032\037\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\017\250\022\050\024\065\026\061\030\060\032" +
    "\056\001\001\000\006\045\243\046\244\001\001\000\002" +
    "\001\001\000\006\047\235\050\234\001\001\000\012\003" +
    "\240\016\026\021\032\037\021\001\001\000\002\001\001" +
    "\000\012\003\237\016\026\021\032\037\021\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\017\242\022\050" +
    "\024\065\026\061\030\060\032\056\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\003\245\016\026\021\032" +
    "\037\021\001\001\000\002\001\001\000\012\003\247\016" +
    "\026\021\032\037\021\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\035\252\001\001\000\002\001\001\000" +
    "\004\036\254\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\076\267\001" +
    "\001\000\006\053\263\054\262\001\001\000\012\003\266" +
    "\016\026\021\032\037\021\001\001\000\002\001\001\000" +
    "\012\003\265\016\026\021\032\037\021\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\003" +
    "\271\016\026\021\032\037\021\001\001\000\002\001\001" +
    "\000\004\075\301\001\001\000\006\051\275\052\274\001" +
    "\001\000\012\003\300\016\026\021\032\037\021\001\001" +
    "\000\002\001\001\000\012\003\277\016\026\021\032\037" +
    "\021\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\003\303\016\026\021\032\037\021\001" +
    "\001\000\002\001\001\000\012\003\307\016\026\021\032" +
    "\037\021\001\001\000\012\003\306\016\026\021\032\037" +
    "\021\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\u0107\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\040\375\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\107\351\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\106\330\001\001\000\002\001\001\000\020\017\333" +
    "\020\332\022\050\024\065\026\061\030\060\032\056\001" +
    "\001\000\002\001\001\000\004\110\334\001\001\000\002" +
    "\001\001\000\020\017\333\020\336\022\050\024\065\026" +
    "\061\030\060\032\056\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\017\341\022\050\024\065\026\061\030" +
    "\060\032\056\001\001\000\002\001\001\000\004\005\343" +
    "\001\001\000\002\001\001\000\016\017\345\022\050\024" +
    "\065\026\061\030\060\032\056\001\001\000\002\001\001" +
    "\000\016\017\347\022\050\024\065\026\061\030\060\032" +
    "\056\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\017\333\020\353\022\050\024\065\026" +
    "\061\030\060\032\056\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\017\356\022\050\024\065\026\061\030" +
    "\060\032\056\001\001\000\002\001\001\000\004\005\360" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\003" +
    "\363\016\026\021\032\037\021\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\003\366\016\026\021\032\037" +
    "\021\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\003\371\016\026\021\032\037\021\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\003\374\016\026\021\032" +
    "\037\021\001\001\000\002\001\001\000\012\003\376\016" +
    "\026\021\032\037\021\001\001\000\002\001\001\000\006" +
    "\005\043\033\u0100\001\001\000\002\001\001\000\012\003" +
    "\u0102\016\026\021\032\037\021\001\001\000\002\001\001" +
    "\000\006\005\043\033\u0104\001\001\000\002\001\001\000" +
    "\012\003\u0106\016\026\021\032\037\021\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\003\u0109\016\026\021" +
    "\032\037\021\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\005\043\033" +
    "\u0114\001\001\000\006\005\043\033\u010f\001\001\000\004" +
    "\064\u0110\001\001\000\012\003\u0113\016\026\021\032\037" +
    "\021\001\001\000\012\003\u0112\016\026\021\032\037\021" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\066" +
    "\u0115\001\001\000\012\003\u0118\016\026\021\032\037\021" +
    "\001\001\000\012\003\u0117\016\026\021\032\037\021\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\003\u011c" +
    "\016\026\021\032\037\021\001\001\000\012\003\u011b\016" +
    "\026\021\032\037\021\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\101\u0123\001\001\000\004\062\u0120\001" +
    "\001\000\012\003\u0122\016\026\021\032\037\021\001\001" +
    "\000\012\003\u0121\016\026\021\032\037\021\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\003\u0125\016\026\021\032\037\021\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\070\u012a\001\001\000\012\003\u012d\016\026\021" +
    "\032\037\021\001\001\000\012\003\u012c\016\026\021\032" +
    "\037\021\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\014\u012f\001\001\000\002\001\001\000\004\013\u0134" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\043" +
    "\u0136\001\001\000\004\014\u0135\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\015\u0138\037\u013a\001\001\000" +
    "\002\001\001\000\004\115\227\001\001\000\004\044\u013b" +
    "\001\001\000\002\001\001\000\006\015\u013d\037\u013a\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\003\u0140" +
    "\016\026\021\032\037\021\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\056\u014a\057\u0149\001\001\000\016" +
    "\017\u0148\022\050\024\065\026\061\030\060\032\056\001" +
    "\001\000\012\003\u0147\016\026\021\032\037\021\001\001" +
    "\000\012\003\u0146\016\026\021\032\037\021\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\003\u014d\016\026\021\032\037\021\001\001\000\002\001" +
    "\001\000\012\003\u014c\016\026\021\032\037\021\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\102\u0154\001" +
    "\001\000\004\061\u0151\001\001\000\012\003\u0153\016\026" +
    "\021\032\037\021\001\001\000\012\003\u0152\016\026\021" +
    "\032\037\021\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\003\u0156\016\026\021\032\037" +
    "\021\001\001\000\002\001\001\000\004\067\u0158\001\001" +
    "\000\012\003\u015b\016\026\021\032\037\021\001\001\000" +
    "\012\003\u015a\016\026\021\032\037\021\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\u015d\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintaxPrueba$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintaxPrueba$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintaxPrueba$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private String ambito;
    private Symbol s;
    private Object valActual;
    private boolean aux1;
    private int aux2, aux3, aux4;
    private herramientas.Funcion funcionActual;
    private java.util.ArrayList<herramientas.Funcion> funcionesLlamadas = new java.util.ArrayList<>();
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    private void reportarError(String codigo, String encontrado){
        if(this.s == null) this.s = cur_token;
        FrmPrincipal.errores.agregarErrorSintactico(codigo, s.left + 1, sym.terminalNames[s.sym], encontrado);
    }

    private void reportarErrorSemantico(String codigo, String... valores){
        if(this.s == null) this.s = cur_token;
        FrmPrincipal.errores.agregarErrorSemantico(codigo, s.left + 1, valores);
    }

    public void report_fatal_error(String message, Object info){
        reportarError("ES8", null);
    }

    public SintaxPrueba(Lexer lexer){
        super(lexer);
    }

    private void ponerValor(String identificador, Object valor){
        if(valor == null) return;
        String tipo = getTipo(identificador);
        if(tipo == null) {
            reportarErrorSemantico("ESM1", identificador);
            return;
        }

        if(tipo.equals("error")){
            reportarErrorSemantico("ESM6", identificador);
            return;
        }

        if(tipo.equals("logico") && !valor.getClass().getName().equals("java.lang.Boolean")){
            reportarErrorSemantico("ESM5", "entero", identificador, "logico");
            return;
        }

        if(tipo.equals("entero") && !valor.getClass().getName().equals("java.lang.Integer")){
            reportarErrorSemantico("ESM5", "logico", identificador, "entero");
            return;
        }
        FrmPrincipal.tablaSimbolos.agregarValor(new LlaveTabla(identificador, ambito), valor);
    }

    private void verificarIdentificador(String id, boolean declarando){
        if(!FrmPrincipal.tablaSimbolos.existe(new LlaveTabla(id, ambito)) && !declarando){
            reportarErrorSemantico("ESM1", id);
            agregarSimbolo(id, -1);
        }
        if(FrmPrincipal.tablaSimbolos.existe(new LlaveTabla(id, ambito)) && declarando){
            reportarErrorSemantico("ESM4", id);
        }
        if(FrmPrincipal.funciones.existe(id)){
            reportarErrorSemantico("ESM4", id);
        }
    }

    private Object getValor(String identificador){
        return FrmPrincipal.tablaSimbolos.getValor(new LlaveTabla(identificador, ambito));
    }

    private String getTipo(String identificador){
        return FrmPrincipal.tablaSimbolos.getTipo(new LlaveTabla(identificador, ambito));
    }

    private void ponerTipoDato(String identificador, String tipo){
        FrmPrincipal.tablaSimbolos.agregarTipo(new LlaveTabla(identificador, ambito), tipo);
    }

    private void agregarSimbolo(String identificador, int linea){
        FrmPrincipal.tablaSimbolos.agregarSimbolo(new LlaveTabla(identificador, ambito), linea);
    }

    private void agregarFuncion(String id){
        verificarIdentificador(id, true);
        FrmPrincipal.funciones.agregarFuncion(id);
    }

    private void agregarParametro(String parametro){
        FrmPrincipal.funciones.agregarParametro(ambito, new LlaveTabla(parametro, ambito));
    }

    private Integer validarEntero(String id){
        switch(getTipo(id)){
            case "logico" -> {
                reportarErrorSemantico("ESM2", id, "logico");
                return 0;
            }
            case "entero" -> {
                
                return (int) verificarValor(id);
            }
            default -> {
                reportarErrorSemantico("ESM2", id, "sin tipo");
                return 0;
            }
        }
    }

    private Object verificarValor(String id){
        Object valor = getValor(id);
        if(valor == null){
            reportarErrorSemantico("ESM3", id);
        }
        return valor;
    }

    private void agregarExpresion(Object expresion){
        funcionActual.agregarParametro(expresion);
    }
    private void comprobarFunciones(){
        funcionesLlamadas.forEach(funcion -> funcion.comprobarParametros());
    }

    private void guardarFuncion(){
        funcionesLlamadas.add(funcionActual);
    }

    private int getEntero(Object v){
        if(v == null) return 0;
        if(v instanceof Integer) return Integer.parseInt(v.toString());
        else {
            reportarErrorSemantico("ESM11", "Lógico", "Entero");
            return 0;
        }
    }

    private boolean getLogico(Object v){
        if(v == null) return false;
        if(v instanceof Boolean) return Boolean.parseBoolean(v.toString());
        else {
            reportarErrorSemantico("ESM11", "Entero", "Lógico");
            return false;
        }
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintaxPrueba$actions {
  private final SintaxPrueba parser;

  /** Constructor */
  CUP$SintaxPrueba$actions(SintaxPrueba parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintaxPrueba$do_action_part00000000(
    int                        CUP$SintaxPrueba$act_num,
    java_cup.runtime.lr_parser CUP$SintaxPrueba$parser,
    java.util.Stack            CUP$SintaxPrueba$stack,
    int                        CUP$SintaxPrueba$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintaxPrueba$result;

      /* select the action based on the action number */
      switch (CUP$SintaxPrueba$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		RESULT = start_val;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintaxPrueba$parser.done_parsing();
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;

            ambito = i;
            agregarFuncion(i);
        
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$0",32, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= INICIO IDENTIFICADOR NT$0 LLAVE_ABIERTA COMIENZO PARENTESIS_ABIERTO tiempo_cada PARENTESIS_CERRADO LLAVE_ABIERTA gramaticas LLAVE_CERRADA inicio_fin 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-9)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-10)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-10)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-10)).value;
		comprobarFunciones();
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-11)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio_fin ::= LLAVE_CERRADA FIN 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("inicio_fin",10, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // inicio_fin ::= FUNCION funcion inicio_fin 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("inicio_fin",10, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$1 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;

                                s = cur_token;
                                agregarFuncion(i);
                                ambito = i;
                            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$1",33, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // funcion ::= IDENTIFICADOR NT$1 PARENTESIS_ABIERTO parametros PARENTESIS_CERRADO LLAVE_ABIERTA gramaticas LLAVE_CERRADA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-7)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("funcion",9, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$2 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
agregarParametro(i);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$2",34, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // parametros ::= declaracion_inicio NT$2 COMA parametros 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("parametros",11, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // parametros ::= declaracion_inicio 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		agregarParametro(i);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("parametros",11, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // parametros ::= 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("parametros",11, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$3 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

                verificarIdentificador(i, false);
                ponerValor(i, validarEntero(i) + 1);
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$3",35, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // gramaticas ::= IDENTIFICADOR INC NT$3 PUNTO_COMA gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$4 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

                reportarError("ES7", null);
                verificarIdentificador(i, false);
                ponerValor(i, validarEntero(i) + 1);
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$4",36, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // gramaticas ::= IDENTIFICADOR INC NT$4 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$5 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

                verificarIdentificador(i, false);
                ponerValor(i, validarEntero(i) - 1);
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$5",37, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // gramaticas ::= IDENTIFICADOR DEC NT$5 PUNTO_COMA gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$6 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

                reportarError("ES7", null);
                verificarIdentificador(i, false);
                ponerValor(i, validarEntero(i) - 1);
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$6",38, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // gramaticas ::= IDENTIFICADOR DEC NT$6 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$7 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;

                verificarIdentificador(i, false);
                ponerValor(i, validarEntero(i) + 1);
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$7",39, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // gramaticas ::= INC IDENTIFICADOR NT$7 PUNTO_COMA gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$8 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;

                reportarError("ES7", null);
                verificarIdentificador(i, false);
                ponerValor(i, validarEntero(i) + 1);
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$8",40, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // gramaticas ::= INC IDENTIFICADOR NT$8 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$9 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;

                verificarIdentificador(i, false);
                ponerValor(i, validarEntero(i) - 1);
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$9",41, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // gramaticas ::= DEC IDENTIFICADOR NT$9 PUNTO_COMA gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$10 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;

                reportarError("ES7", null);
                verificarIdentificador(i, false);
                ponerValor(i, validarEntero(i) - 1);
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$10",42, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // gramaticas ::= DEC IDENTIFICADOR NT$10 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // gramaticas ::= declaracion_inicio PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$11 ::= 
            {
              Object RESULT =null;
s=cur_token;reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$11",43, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // gramaticas ::= declaracion_inicio NT$11 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NT$12 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
ponerValor(i,v);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$12",44, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // gramaticas ::= declaracion_inicio declaracion_valor NT$12 PUNTO_COMA gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$13 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
reportarError("ES7", null);ponerValor(i,v);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$13",45, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // gramaticas ::= declaracion_inicio declaracion_valor NT$13 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // gramaticas ::= asignacion PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // NT$14 ::= 
            {
              Object RESULT =null;
s=cur_token;reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$14",46, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // gramaticas ::= asignacion NT$14 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // gramaticas ::= CONDICION condicion gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // gramaticas ::= APAGAR LUCES PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // NT$15 ::= 
            {
              Object RESULT =null;
s=cur_token;reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$15",47, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // gramaticas ::= APAGAR LUCES NT$15 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // gramaticas ::= ENCENDER LUCES PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NT$16 ::= 
            {
              Object RESULT =null;
s=cur_token;reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$16",48, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // gramaticas ::= ENCENDER LUCES NT$16 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // gramaticas ::= ABRIR PUERTAS tiempo_abrir_cerrar PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // NT$17 ::= 
            {
              Object RESULT =null;
s=cur_token;reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$17",49, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // gramaticas ::= ABRIR PUERTAS tiempo_abrir_cerrar NT$17 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // gramaticas ::= CERRAR PUERTAS tiempo_abrir_cerrar PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // NT$18 ::= 
            {
              Object RESULT =null;
s=cur_token;reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$18",50, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // gramaticas ::= CERRAR PUERTAS tiempo_abrir_cerrar NT$18 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // gramaticas ::= ABRIR VENTANAS tiempo_abrir_cerrar PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // NT$19 ::= 
            {
              Object RESULT =null;
s=cur_token;reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$19",51, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // gramaticas ::= ABRIR VENTANAS tiempo_abrir_cerrar NT$19 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // gramaticas ::= CERRAR VENTANAS tiempo_abrir_cerrar PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // NT$20 ::= 
            {
              Object RESULT =null;
s=cur_token;reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$20",52, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // gramaticas ::= CERRAR VENTANAS tiempo_abrir_cerrar NT$20 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // gramaticas ::= SANITIZAR tiempo_por PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NT$21 ::= 
            {
              Object RESULT =null;
s=cur_token;reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$21",53, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // gramaticas ::= SANITIZAR tiempo_por NT$21 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // gramaticas ::= DISPENSAR tiempo_por PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // NT$22 ::= 
            {
              Object RESULT =null;
s=cur_token;reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$22",54, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // gramaticas ::= DISPENSAR tiempo_por NT$22 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // gramaticas ::= usar PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // NT$23 ::= 
            {
              Object RESULT =null;
s=cur_token;reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$23",55, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // gramaticas ::= usar NT$23 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // gramaticas ::= SALIR PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // gramaticas ::= SALIR 
            {
              Object RESULT =null;
		s=cur_token;reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // gramaticas ::= SALIR error 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // gramaticas ::= SALIR error PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // NT$24 ::= 
            {
              Object RESULT =null;
reportarError("ES2", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$24",56, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // gramaticas ::= error NT$24 PUNTO_COMA gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$24
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // NT$25 ::= 
            {
              Object RESULT =null;
System.out.println("Faltó identificador");
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$25",57, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // gramaticas ::= error NT$25 INC PUNTO_COMA gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$25
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // NT$26 ::= 
            {
              Object RESULT =null;
System.out.println("Faltó identificador");
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$26",58, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // gramaticas ::= error NT$26 DEC PUNTO_COMA gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$26
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // NT$27 ::= 
            {
              Object RESULT =null;
System.out.println("Faltó identificador");
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$27",59, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // gramaticas ::= INC error NT$27 PUNTO_COMA gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$27
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // NT$28 ::= 
            {
              Object RESULT =null;
System.out.println("Faltó identificador");
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$28",60, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // gramaticas ::= DEC error NT$28 PUNTO_COMA gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$28
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // NT$29 ::= 
            {
              Object RESULT =null;
System.out.println("Faltó condicion");
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$29",61, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // gramaticas ::= error NT$29 condicion gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$29
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // NT$30 ::= 
            {
              Object RESULT =null;
System.out.println("Faltó encender/apagar");
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$30",62, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // gramaticas ::= error NT$30 LUCES PUNTO_COMA gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$30
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // NT$31 ::= 
            {
              Object RESULT =null;
System.out.println("Faltó luces");
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$31",63, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // gramaticas ::= ENCENDER error NT$31 PUNTO_COMA gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$31
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // NT$32 ::= 
            {
              Object RESULT =null;
System.out.println("Faltó luces");
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$32",64, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // gramaticas ::= APAGAR error NT$32 PUNTO_COMA gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$32
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // NT$33 ::= 
            {
              Object RESULT =null;
System.out.println("Faltó abrir/cerrar");
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$33",65, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // gramaticas ::= error NT$33 PUERTAS tiempo_abrir_cerrar PUNTO_COMA gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$33
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // NT$34 ::= 
            {
              Object RESULT =null;
System.out.println("Faltó abrir/cerrar");
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$34",66, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // gramaticas ::= error NT$34 VENTANAS tiempo_abrir_cerrar PUNTO_COMA gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$34
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // NT$35 ::= 
            {
              Object RESULT =null;
System.out.println("Faltó sanitizar/dispensar");
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$35",67, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // gramaticas ::= error NT$35 tiempo_por PUNTO_COMA gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$35
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // gramaticas ::= 
            {
              Object RESULT =null;
		s=cur_token;reportarError("ES10", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // tiempo_abrir_cerrar ::= MANTENER 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("tiempo_abrir_cerrar",25, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // tiempo_abrir_cerrar ::= tiempo_por 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("tiempo_abrir_cerrar",25, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // tiempo_abrir_cerrar ::= error 
            {
              Object RESULT =null;
		System.out.println("Se esperaba \"mantener\" o \"por <Expresión aritmética> <\"seg\", \"min\", \"hr\">\"");
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("tiempo_abrir_cerrar",25, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // usar ::= USAR usar_funcion 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("usar",15, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // usar ::= USAR admitir 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("usar",15, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // usar ::= USAR ventilar 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("usar",15, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // usar ::= error usar_funcion 
            {
              Object RESULT =null;
		System.out.println("Faltó <\"usar\">");
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("usar",15, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // usar ::= error admitir 
            {
              Object RESULT =null;
		System.out.println("Faltó <\"usar\">");
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("usar",15, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // usar ::= error ventilar 
            {
              Object RESULT =null;
		System.out.println("Faltó <\"usar\">");
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("usar",15, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // NT$36 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
funcionActual = new herramientas.Funcion(i, cur_token.left+1);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$36",68, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // usar_funcion ::= IDENTIFICADOR NT$36 PARENTESIS_ABIERTO parametros_llamar PARENTESIS_CERRADO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$36
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("usar_funcion",26, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // NT$37 ::= 
            {
              Object RESULT =null;

                        System.out.println("No se ha encontrado el identificador de la función");
                        funcionActual = new herramientas.Funcion("0sin_id", cur_token.left+1);
                    
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$37",69, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // usar_funcion ::= error NT$37 PARENTESIS_ABIERTO parametros_llamar PARENTESIS_CERRADO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$37
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("usar_funcion",26, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // NT$38 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
agregarExpresion(e);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$38",70, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // parametros_llamar ::= expresion NT$38 COMA parametros_llamar 
            {
              Object RESULT =null;
              // propagate RESULT from NT$38
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("parametros_llamar",14, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // parametros_llamar ::= expresion 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		agregarExpresion(e);guardarFuncion();
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("parametros_llamar",14, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // parametros_llamar ::= 
            {
              Object RESULT =null;
		guardarFuncion();
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("parametros_llamar",14, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // tiempo_cada ::= CADA NUMERO unidad_tiempo 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("tiempo_cada",2, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // NT$39 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
getEntero(e);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$39",71, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // tiempo_por ::= POR expresion NT$39 unidad_tiempo 
            {
              Object RESULT =null;
              // propagate RESULT from NT$39
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("tiempo_por",3, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // unidad_tiempo ::= SEG 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("unidad_tiempo",4, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // unidad_tiempo ::= MIN 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("unidad_tiempo",4, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // unidad_tiempo ::= HR 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("unidad_tiempo",4, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // unidad_tiempo ::= error 
            {
              Object RESULT =null;
		reportarError("ES3", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("unidad_tiempo",4, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // estado ::= LUCES 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("estado",8, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // estado ::= PUERTAS 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("estado",8, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // estado ::= VENTANAS 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("estado",8, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // estado ::= error 
            {
              Object RESULT =null;
		System.out.println("Se esperaba <\"luces\", \"puertas\", \"ventanas\">");
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("estado",8, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // NT$40 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;

                s = cur_token;
                verificarIdentificador(i, false);
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$40",72, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // asignacion ::= IDENTIFICADOR NT$40 ASIGNACION expresion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$40
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		ponerValor(i,e);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("asignacion",12, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // NT$41 ::= 
            {
              Object RESULT =null;
System.out.println("No se ha encontrado el identificador para la asignación");
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$41",73, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // asignacion ::= error NT$41 ASIGNACION expresion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$41
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("asignacion",12, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // NT$42 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;

                s = cur_token;
                verificarIdentificador(i, false);
                System.out.println("No se ha encontrado el simbolo \"=\"");
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$42",74, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // asignacion ::= IDENTIFICADOR NT$42 expresion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$42
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		ponerValor(i,e);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("asignacion",12, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // NT$43 ::= 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
s=cur_token;verificarIdentificador(i, true);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$43",75, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // declaracion_inicio ::= IDENTIFICADOR NT$43 DECLARAR declaracion_tipo_dato 
            {
              String RESULT =null;
              // propagate RESULT from NT$43
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		String td = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		
                        agregarSimbolo(i, cur_token.left+1);
                        ponerTipoDato(i,td);
                        RESULT=i;
                    
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("declaracion_inicio",29, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // declaracion_valor ::= ASIGNACION expresion 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=e;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("declaracion_valor",5, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // declaracion_tipo_dato ::= COMO tipo_dato 
            {
              String RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		String td = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT = td;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("declaracion_tipo_dato",27, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // tipo_dato ::= ENTERO 
            {
              String RESULT =null;
		RESULT = "entero";
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("tipo_dato",28, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // tipo_dato ::= LOGICO 
            {
              String RESULT =null;
		RESULT = "logico";
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("tipo_dato",28, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // tipo_dato ::= error 
            {
              String RESULT =null;
		reportarError("ES4", null); RESULT = "error";
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("tipo_dato",28, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // NT$44 ::= 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
valActual=v;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$44",76, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // expresion ::= op2 NT$44 op1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$44
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=r;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // NT$45 ::= 
            {
              Object RESULT =null;
aux1=getLogico(valActual);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$45",77, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // NT$46 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
valActual=aux1&&getLogico(v);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$46",78, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // op1 ::= LOGICO_AND NT$45 op2 NT$46 op1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$46
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=r;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op1",17, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // NT$47 ::= 
            {
              Object RESULT =null;
aux1=getLogico(valActual);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$47",79, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // NT$48 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
valActual=aux1||getLogico(v);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$48",80, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // op1 ::= LOGICO_OR NT$47 op2 NT$48 op1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$48
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=r;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op1",17, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // op1 ::= 
            {
              Object RESULT =null;
		RESULT=valActual;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op1",17, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // NT$49 ::= 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
valActual=v;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$49",81, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // op2 ::= op4 NT$49 op3 
            {
              Object RESULT =null;
              // propagate RESULT from NT$49
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=r;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op2",18, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // NT$50 ::= 
            {
              Object RESULT =null;
aux2=getEntero(valActual);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$50",82, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // op3 ::= REL_MENOR NT$50 op4 
            {
              Object RESULT =null;
              // propagate RESULT from NT$50
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=aux2<getEntero(v);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op3",19, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // NT$51 ::= 
            {
              Object RESULT =null;
aux2=getEntero(valActual);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$51",83, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // op3 ::= REL_MAYOR NT$51 op4 
            {
              Object RESULT =null;
              // propagate RESULT from NT$51
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=aux2>getEntero(v);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op3",19, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // NT$52 ::= 
            {
              Object RESULT =null;
aux2=getEntero(valActual);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$52",84, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // op3 ::= REL_MENOR_IGUAL NT$52 op4 
            {
              Object RESULT =null;
              // propagate RESULT from NT$52
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=aux2<=getEntero(v);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op3",19, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // NT$53 ::= 
            {
              Object RESULT =null;
aux2=getEntero(valActual);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$53",85, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // op3 ::= REL_MAYOR_IGUAL NT$53 op4 
            {
              Object RESULT =null;
              // propagate RESULT from NT$53
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=aux2>=getEntero(v);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op3",19, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // NT$54 ::= 
            {
              Object RESULT =null;
aux2=getEntero(valActual);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$54",86, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // op3 ::= REL_DIFERENTE NT$54 op4 
            {
              Object RESULT =null;
              // propagate RESULT from NT$54
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=aux2!=getEntero(v);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op3",19, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // NT$55 ::= 
            {
              Object RESULT =null;
aux2=getEntero(valActual);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$55",87, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // op3 ::= REL_IGUAL NT$55 op4 
            {
              Object RESULT =null;
              // propagate RESULT from NT$55
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=aux2==getEntero(v);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op3",19, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // op3 ::= 
            {
              Object RESULT =null;
		RESULT=valActual;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op3",19, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // NT$56 ::= 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
valActual=v;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$56",88, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // op4 ::= op6 NT$56 op5 
            {
              Object RESULT =null;
              // propagate RESULT from NT$56
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=r;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op4",20, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // NT$57 ::= 
            {
              Object RESULT =null;
aux3=getEntero(valActual);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$57",89, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // NT$58 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
valActual=aux3+getEntero(v);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$58",90, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // op5 ::= AR_SUMA NT$57 op6 NT$58 op5 
            {
              Object RESULT =null;
              // propagate RESULT from NT$58
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=r;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op5",21, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // NT$59 ::= 
            {
              Object RESULT =null;
aux3=getEntero(valActual);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$59",91, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // NT$60 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
valActual=aux3-getEntero(v);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$60",92, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // op5 ::= AR_RESTA NT$59 op6 NT$60 op5 
            {
              Object RESULT =null;
              // propagate RESULT from NT$60
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=r;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op5",21, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // op5 ::= 
            {
              Object RESULT =null;
		RESULT=valActual;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op5",21, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // NT$61 ::= 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
valActual=v;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$61",93, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // op6 ::= op8 NT$61 op7 
            {
              Object RESULT =null;
              // propagate RESULT from NT$61
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=r;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op6",22, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // NT$62 ::= 
            {
              Object RESULT =null;
aux4=getEntero(valActual);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$62",94, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // NT$63 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
valActual=aux4/getEntero(v);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$63",95, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // op7 ::= AR_DIVISION NT$62 op8 NT$63 op7 
            {
              Object RESULT =null;
              // propagate RESULT from NT$63
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=r;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op7",23, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // NT$64 ::= 
            {
              Object RESULT =null;
aux4=getEntero(valActual);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$64",96, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // NT$65 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
valActual=aux4*getEntero(v);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$65",97, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // op7 ::= AR_MULTIPLICACION NT$64 op8 NT$65 op7 
            {
              Object RESULT =null;
              // propagate RESULT from NT$65
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=r;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op7",23, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // op7 ::= 
            {
              Object RESULT =null;
		RESULT=valActual;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op7",23, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // op8 ::= valores 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=v;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op8",24, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // op8 ::= AR_RESTA valores 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=-getEntero(v);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op8",24, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // op8 ::= NEGACION valores 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=!getLogico(v);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op8",24, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // op8 ::= error 
            {
              Object RESULT =null;
		System.out.println("No se ha encontrado un operador o un operando en la expresión ingresada");
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op8",24, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // valores ::= NUMERO 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=n;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("valores",16, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // valores ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		s=cur_token;verificarIdentificador(i, false);RESULT=getValor(i);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("valores",16, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // valores ::= OBTENER TEMPERATURA 
            {
              Object RESULT =null;
		RESULT=0;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("valores",16, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // valores ::= OBTENER PERSONAS 
            {
              Object RESULT =null;
		RESULT=0;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("valores",16, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // valores ::= OP_BOOLEANO 
            {
              Object RESULT =null;
		int obleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int obright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Boolean ob = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=ob;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("valores",16, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // valores ::= ESTADO estado 
            {
              Object RESULT =null;
		RESULT=false;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("valores",16, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // valores ::= PARENTESIS_ABIERTO expresion PARENTESIS_CERRADO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		RESULT=e;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("valores",16, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // condicion ::= PARENTESIS_ABIERTO expresion PARENTESIS_CERRADO LLAVE_ABIERTA gramaticas LLAVE_CERRADA 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("condicion",30, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // condicion ::= PARENTESIS_ABIERTO expresion PARENTESIS_CERRADO LLAVE_ABIERTA gramaticas LLAVE_CERRADA sino 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("condicion",30, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // sino ::= SINO CONDICION condicion 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("sino",31, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // sino ::= SINO LLAVE_ABIERTA gramaticas LLAVE_CERRADA 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("sino",31, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // ventilar ::= VENTILAR PARENTESIS_ABIERTO tiempo_por COMA expresion COMA expresion PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("ventilar",6, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // admitir ::= ADMITIR PARENTESIS_ABIERTO expresion COMA tiempo_por PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("admitir",7, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintaxPrueba$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintaxPrueba$do_action(
    int                        CUP$SintaxPrueba$act_num,
    java_cup.runtime.lr_parser CUP$SintaxPrueba$parser,
    java.util.Stack            CUP$SintaxPrueba$stack,
    int                        CUP$SintaxPrueba$top)
    throws java.lang.Exception
    {
              return CUP$SintaxPrueba$do_action_part00000000(
                               CUP$SintaxPrueba$act_num,
                               CUP$SintaxPrueba$parser,
                               CUP$SintaxPrueba$stack,
                               CUP$SintaxPrueba$top);
    }
}

}
