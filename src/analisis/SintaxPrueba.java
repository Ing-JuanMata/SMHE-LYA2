
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analisis;

import java_cup.runtime.Symbol;
import codigo.FrmPrincipal;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintaxPrueba extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public SintaxPrueba() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintaxPrueba(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintaxPrueba(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\146\000\002\002\004\000\002\034\002\000\002\002" +
    "\016\000\002\035\002\000\002\002\010\000\002\036\002" +
    "\000\002\002\007\000\002\016\004\000\002\016\005\000" +
    "\002\037\002\000\002\015\012\000\002\017\005\000\002" +
    "\017\003\000\002\003\003\000\002\003\004\000\002\003" +
    "\005\000\002\003\005\000\002\003\005\000\002\003\005" +
    "\000\002\003\005\000\002\003\004\000\002\003\006\000" +
    "\002\003\006\000\002\003\007\000\002\003\007\000\002" +
    "\003\007\000\002\003\007\000\002\003\007\000\002\003" +
    "\007\000\002\003\007\000\002\003\007\000\002\003\006" +
    "\000\002\003\006\000\002\003\006\000\002\003\006\000" +
    "\002\003\006\000\002\040\002\000\002\003\006\000\002" +
    "\041\002\000\002\042\002\000\002\003\013\000\002\003" +
    "\002\000\002\025\006\000\002\025\006\000\002\025\006" +
    "\000\002\025\006\000\002\004\005\000\002\005\005\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\020\005\000\002\007\004\000\002\043\002" +
    "\000\002\007\006\000\002\023\005\000\002\010\004\000" +
    "\002\010\004\000\002\021\004\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\024\005\000\002\024" +
    "\005\000\002\024\005\000\002\024\005\000\002\024\005" +
    "\000\002\024\003\000\002\024\003\000\002\026\010\000" +
    "\002\026\011\000\002\027\003\000\002\027\005\000\002" +
    "\027\005\000\002\027\003\000\002\027\010\000\002\027" +
    "\003\000\002\027\005\000\002\027\005\000\002\027\003" +
    "\000\002\027\005\000\002\027\005\000\002\027\003\000" +
    "\002\027\005\000\002\027\005\000\002\030\004\000\002" +
    "\031\006\000\002\032\005\000\002\032\005\000\002\032" +
    "\005\000\002\032\005\000\002\032\005\000\002\032\005" +
    "\000\002\033\004\000\002\033\006\000\002\011\013\000" +
    "\002\012\013\000\002\013\015" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0111\000\006\003\004\017\005\001\002\000\046\003" +
    "\ufffc\010\ufffc\012\ufffc\013\ufffc\014\ufffc\015\ufffc\016\ufffc" +
    "\027\ufffc\030\ufffc\034\ufffc\037\ufffc\040\ufffc\041\ufffc\043" +
    "\ufffc\062\ufffc\063\ufffc\070\ufffc\075\ufffc\001\002\000\006" +
    "\003\010\075\011\001\002\000\004\002\007\001\002\000" +
    "\004\002\001\001\002\000\046\003\ufffe\010\ufffe\012\ufffe" +
    "\013\ufffe\014\ufffe\015\ufffe\016\ufffe\027\ufffe\030\ufffe\034" +
    "\ufffe\037\ufffe\040\ufffe\041\ufffe\043\ufffe\062\ufffe\063\ufffe" +
    "\070\ufffe\075\ufffe\001\002\000\004\067\000\001\002\000" +
    "\004\067\013\001\002\000\004\005\014\001\002\000\004" +
    "\065\015\001\002\000\004\022\016\001\002\000\004\073" +
    "\u010a\001\002\000\004\066\020\001\002\000\004\067\021" +
    "\001\002\000\046\003\040\010\045\012\022\013\044\014" +
    "\027\015\032\016\023\027\030\030\025\034\042\037\047" +
    "\040\033\041\035\043\046\062\036\063\037\070\uffd8\075" +
    "\041\001\002\000\004\012\377\001\002\000\004\071\376" +
    "\001\002\000\004\070\ufff4\001\002\000\006\031\360\032" +
    "\361\001\002\000\004\070\341\001\002\000\004\014\325" +
    "\001\002\000\006\031\306\032\307\001\002\000\004\071" +
    "\304\001\002\000\004\023\175\001\002\000\004\042\276" +
    "\001\002\000\046\003\040\010\045\012\022\013\044\014" +
    "\027\015\032\016\023\027\030\030\025\034\042\037\047" +
    "\040\033\041\035\043\046\062\036\063\037\070\uffd8\075" +
    "\041\001\002\000\004\023\175\001\002\000\004\075\267" +
    "\001\002\000\004\075\264\001\002\000\006\071\uffdd\075" +
    "\uffdb\001\002\000\012\020\230\062\227\063\231\064\226" +
    "\001\002\000\006\035\220\036\221\001\002\000\006\064" +
    "\212\071\213\001\002\000\004\013\170\001\002\000\004" +
    "\065\062\001\002\000\010\031\053\032\056\042\055\001" +
    "\002\000\004\042\050\001\002\000\004\071\051\001\002" +
    "\000\046\003\040\010\045\012\022\013\044\014\027\015" +
    "\032\016\023\027\030\030\025\034\042\037\047\040\033" +
    "\041\035\043\046\062\036\063\037\070\uffd8\075\041\001" +
    "\002\000\004\070\uffec\001\002\000\004\071\uffcb\001\002" +
    "\000\004\071\057\001\002\000\004\071\uffcd\001\002\000" +
    "\004\071\uffcc\001\002\000\046\003\040\010\045\012\022" +
    "\013\044\014\027\015\032\016\023\027\030\030\025\034" +
    "\042\037\047\040\033\041\035\043\046\062\036\063\037" +
    "\070\uffd8\075\041\001\002\000\004\070\uffde\001\002\000" +
    "\046\003\040\010\045\012\022\013\044\014\027\015\032" +
    "\016\023\027\030\030\025\034\042\037\047\040\033\041" +
    "\035\043\046\062\036\063\037\070\uffd8\075\041\001\002" +
    "\000\010\057\070\074\071\075\066\001\002\000\004\066" +
    "\154\001\002\000\014\060\151\061\150\066\uffab\072\uffab" +
    "\075\uffab\001\002\000\014\060\145\061\144\066\uffae\072" +
    "\uffae\075\uffae\001\002\000\026\045\110\046\111\047\107" +
    "\050\106\051\112\052\114\060\113\066\uffb3\072\uffb3\075" +
    "\uffb3\001\002\000\014\060\102\061\103\066\uffb1\072\uffb1" +
    "\075\uffb1\001\002\000\006\065\077\075\076\001\002\000" +
    "\014\060\073\061\072\066\uffb6\072\uffb6\075\uffb6\001\002" +
    "\000\010\057\070\074\071\075\066\001\002\000\010\057" +
    "\070\074\071\075\066\001\002\000\010\066\uffb5\072\uffb5" +
    "\075\uffb5\001\002\000\010\066\uffb4\072\uffb4\075\uffb4\001" +
    "\002\000\014\060\uffa8\061\uffa8\066\uffa8\072\uffa8\075\uffa8" +
    "\001\002\000\010\057\070\074\071\075\066\001\002\000" +
    "\004\066\101\001\002\000\014\060\uffa7\061\uffa7\066\uffa7" +
    "\072\uffa7\075\uffa7\001\002\000\010\057\070\074\071\075" +
    "\066\001\002\000\010\057\070\074\071\075\066\001\002" +
    "\000\010\066\uffaf\072\uffaf\075\uffaf\001\002\000\010\066" +
    "\uffb0\072\uffb0\075\uffb0\001\002\000\010\065\120\073\115" +
    "\075\116\001\002\000\010\065\120\073\115\075\116\001" +
    "\002\000\010\065\120\073\115\075\116\001\002\000\010" +
    "\065\120\073\115\075\116\001\002\000\010\065\120\073" +
    "\115\075\116\001\002\000\010\057\070\074\071\075\066" +
    "\001\002\000\010\065\120\073\115\075\116\001\002\000" +
    "\026\053\125\054\123\055\126\056\124\060\uffba\061\uffba" +
    "\066\uffba\071\uffba\072\uffba\075\uffba\001\002\000\016\060" +
    "\uffb9\061\uffb9\066\uffb9\071\uffb9\072\uffb9\075\uffb9\001\002" +
    "\000\014\060\uffa1\061\uffa1\066\uffa1\072\uffa1\075\uffa1\001" +
    "\002\000\010\065\120\073\115\075\116\001\002\000\004" +
    "\066\122\001\002\000\016\060\uffbf\061\uffbf\066\uffbf\071" +
    "\uffbf\072\uffbf\075\uffbf\001\002\000\010\065\120\073\115" +
    "\075\116\001\002\000\010\065\120\073\115\075\116\001" +
    "\002\000\010\065\120\073\115\075\116\001\002\000\010" +
    "\065\120\073\115\075\116\001\002\000\016\060\uffbc\061" +
    "\uffbc\066\uffbc\071\uffbc\072\uffbc\075\uffbc\001\002\000\016" +
    "\060\uffbe\061\uffbe\066\uffbe\071\uffbe\072\uffbe\075\uffbe\001" +
    "\002\000\016\060\uffbb\061\uffbb\066\uffbb\071\uffbb\072\uffbb" +
    "\075\uffbb\001\002\000\016\060\uffbd\061\uffbd\066\uffbd\071" +
    "\uffbd\072\uffbd\075\uffbd\001\002\000\004\075\134\001\002" +
    "\000\004\061\135\001\002\000\010\057\070\074\071\075" +
    "\066\001\002\000\010\066\uffb2\072\uffb2\075\uffb2\001\002" +
    "\000\014\060\uffa2\061\uffa2\066\uffa2\072\uffa2\075\uffa2\001" +
    "\002\000\014\060\uffa5\061\uffa5\066\uffa5\072\uffa5\075\uffa5" +
    "\001\002\000\014\060\uffa6\061\uffa6\066\uffa6\072\uffa6\075" +
    "\uffa6\001\002\000\014\060\uffa4\061\uffa4\066\uffa4\072\uffa4" +
    "\075\uffa4\001\002\000\014\060\uffa3\061\uffa3\066\uffa3\072" +
    "\uffa3\075\uffa3\001\002\000\010\057\070\074\071\075\066" +
    "\001\002\000\010\057\070\074\071\075\066\001\002\000" +
    "\010\066\uffad\072\uffad\075\uffad\001\002\000\010\066\uffac" +
    "\072\uffac\075\uffac\001\002\000\010\057\070\074\071\075" +
    "\066\001\002\000\010\057\070\074\071\075\066\001\002" +
    "\000\010\066\uffaa\072\uffaa\075\uffaa\001\002\000\010\066" +
    "\uffa9\072\uffa9\075\uffa9\001\002\000\004\067\155\001\002" +
    "\000\046\003\040\010\045\012\022\013\044\014\027\015" +
    "\032\016\023\027\030\030\025\034\042\037\047\040\033" +
    "\041\035\043\046\062\036\063\037\070\uffd8\075\041\001" +
    "\002\000\004\070\157\001\002\000\050\003\uffb8\010\uffb8" +
    "\011\161\012\uffb8\013\uffb8\014\uffb8\015\uffb8\016\uffb8\027" +
    "\uffb8\030\uffb8\034\uffb8\037\uffb8\040\uffb8\041\uffb8\043\uffb8" +
    "\062\uffb8\063\uffb8\070\uffb8\075\uffb8\001\002\000\046\003" +
    "\uffb7\010\uffb7\012\uffb7\013\uffb7\014\uffb7\015\uffb7\016\uffb7" +
    "\027\uffb7\030\uffb7\034\uffb7\037\uffb7\040\uffb7\041\uffb7\043" +
    "\uffb7\062\uffb7\063\uffb7\070\uffb7\075\uffb7\001\002\000\006" +
    "\065\062\067\163\001\002\000\046\003\uffa0\010\uffa0\012" +
    "\uffa0\013\uffa0\014\uffa0\015\uffa0\016\uffa0\027\uffa0\030\uffa0" +
    "\034\uffa0\037\uffa0\040\uffa0\041\uffa0\043\uffa0\062\uffa0\063" +
    "\uffa0\070\uffa0\075\uffa0\001\002\000\046\003\040\010\045" +
    "\012\022\013\044\014\027\015\032\016\023\027\030\030" +
    "\025\034\042\037\047\040\033\041\035\043\046\062\036" +
    "\063\037\070\uffd8\075\041\001\002\000\004\070\165\001" +
    "\002\000\046\003\uff9f\010\uff9f\012\uff9f\013\uff9f\014\uff9f" +
    "\015\uff9f\016\uff9f\027\uff9f\030\uff9f\034\uff9f\037\uff9f\040" +
    "\uff9f\041\uff9f\043\uff9f\062\uff9f\063\uff9f\070\uff9f\075\uff9f" +
    "\001\002\000\004\070\ufff1\001\002\000\046\003\040\010" +
    "\045\012\022\013\044\014\027\015\032\016\023\027\030" +
    "\030\025\034\042\037\047\040\033\041\035\043\046\062" +
    "\036\063\037\070\uffd8\075\041\001\002\000\004\065\171" +
    "\001\002\000\010\057\070\074\071\075\066\001\002\000" +
    "\004\072\173\001\002\000\004\023\175\001\002\000\004" +
    "\072\204\001\002\000\004\073\176\001\002\000\012\003" +
    "\200\024\203\025\177\026\201\001\002\000\010\066\uffd0" +
    "\071\uffd0\072\uffd0\001\002\000\010\066\uffce\071\uffce\072" +
    "\uffce\001\002\000\010\066\uffcf\071\uffcf\072\uffcf\001\002" +
    "\000\006\071\uffd2\072\uffd2\001\002\000\010\066\uffd1\071" +
    "\uffd1\072\uffd1\001\002\000\010\057\070\074\071\075\066" +
    "\001\002\000\004\066\206\001\002\000\004\071\207\001" +
    "\002\000\046\003\uff9d\010\uff9d\012\uff9d\013\uff9d\014\uff9d" +
    "\015\uff9d\016\uff9d\027\uff9d\030\uff9d\034\uff9d\037\uff9d\040" +
    "\uff9d\041\uff9d\043\uff9d\062\uff9d\063\uff9d\070\uff9d\075\uff9d" +
    "\001\002\000\004\070\uffef\001\002\000\004\071\uffc8\001" +
    "\002\000\012\065\120\073\115\074\215\075\116\001\002" +
    "\000\046\003\uffc9\010\uffc9\012\uffc9\013\uffc9\014\uffc9\015" +
    "\uffc9\016\uffc9\027\uffc9\030\uffc9\034\uffc9\037\uffc9\040\uffc9" +
    "\041\uffc9\043\uffc9\062\uffc9\063\uffc9\070\uffc9\075\uffc9\001" +
    "\002\000\004\071\uffc4\001\002\000\004\071\uffc5\001\002" +
    "\000\004\071\217\001\002\000\046\003\uffc7\010\uffc7\012" +
    "\uffc7\013\uffc7\014\uffc7\015\uffc7\016\uffc7\027\uffc7\030\uffc7" +
    "\034\uffc7\037\uffc7\040\uffc7\041\uffc7\043\uffc7\062\uffc7\063" +
    "\uffc7\070\uffc7\075\uffc7\001\002\000\004\071\224\001\002" +
    "\000\004\071\222\001\002\000\046\003\040\010\045\012" +
    "\022\013\044\014\027\015\032\016\023\027\030\030\025" +
    "\034\042\037\047\040\033\041\035\043\046\062\036\063" +
    "\037\070\uffd8\075\041\001\002\000\004\070\uffe1\001\002" +
    "\000\046\003\040\010\045\012\022\013\044\014\027\015" +
    "\032\016\023\027\030\030\025\034\042\037\047\040\033" +
    "\041\035\043\046\062\036\063\037\070\uffd8\075\041\001" +
    "\002\000\004\070\uffe2\001\002\000\010\065\120\073\115" +
    "\075\116\001\002\000\004\071\242\001\002\000\004\021" +
    "\235\001\002\000\004\071\232\001\002\000\046\003\040" +
    "\010\045\012\022\013\044\014\027\015\032\016\023\027" +
    "\030\030\025\034\042\037\047\040\033\041\035\043\046" +
    "\062\036\063\037\070\uffd8\075\041\001\002\000\004\070" +
    "\uffd6\001\002\000\012\064\uffc6\066\uffc6\071\uffc6\072\uffc6" +
    "\001\002\000\010\003\237\006\241\007\240\001\002\000" +
    "\012\064\uffc3\066\uffc3\071\uffc3\072\uffc3\001\002\000\012" +
    "\064\uffc0\066\uffc0\071\uffc0\072\uffc0\001\002\000\012\064" +
    "\uffc1\066\uffc1\071\uffc1\072\uffc1\001\002\000\012\064\uffc2" +
    "\066\uffc2\071\uffc2\072\uffc2\001\002\000\046\003\040\010" +
    "\045\012\022\013\044\014\027\015\032\016\023\027\030" +
    "\030\025\034\042\037\047\040\033\041\035\043\046\062" +
    "\036\063\037\070\uffd8\075\041\001\002\000\004\070\uffd7" +
    "\001\002\000\004\071\uffca\001\002\000\004\075\251\001" +
    "\002\000\004\071\247\001\002\000\046\003\040\010\045" +
    "\012\022\013\044\014\027\015\032\016\023\027\030\030" +
    "\025\034\042\037\047\040\033\041\035\043\046\062\036" +
    "\063\037\070\uffd8\075\041\001\002\000\004\070\uffdc\001" +
    "\002\000\004\065\uffda\001\002\000\004\065\253\001\002" +
    "\000\004\075\255\001\002\000\004\066\261\001\002\000" +
    "\004\020\230\001\002\000\006\066\ufff5\072\257\001\002" +
    "\000\004\075\255\001\002\000\004\066\ufff6\001\002\000" +
    "\004\067\262\001\002\000\046\003\040\010\045\012\022" +
    "\013\044\014\027\015\032\016\023\027\030\030\025\034" +
    "\042\037\047\040\033\041\035\043\046\062\036\063\037" +
    "\070\uffd8\075\041\001\002\000\004\070\uffd9\001\002\000" +
    "\004\071\265\001\002\000\046\003\040\010\045\012\022" +
    "\013\044\014\027\015\032\016\023\027\030\030\025\034" +
    "\042\037\047\040\033\041\035\043\046\062\036\063\037" +
    "\070\uffd8\075\041\001\002\000\004\070\uffd4\001\002\000" +
    "\004\071\270\001\002\000\046\003\040\010\045\012\022" +
    "\013\044\014\027\015\032\016\023\027\030\030\025\034" +
    "\042\037\047\040\033\041\035\043\046\062\036\063\037" +
    "\070\uffd8\075\041\001\002\000\004\070\uffd5\001\002\000" +
    "\004\071\273\001\002\000\046\003\040\010\045\012\022" +
    "\013\044\014\027\015\032\016\023\027\030\030\025\034" +
    "\042\037\047\040\033\041\035\043\046\062\036\063\037" +
    "\070\uffd8\075\041\001\002\000\004\070\uffe0\001\002\000" +
    "\004\070\ufff3\001\002\000\004\071\277\001\002\000\046" +
    "\003\040\010\045\012\022\013\044\014\027\015\032\016" +
    "\023\027\030\030\025\034\042\037\047\040\033\041\035" +
    "\043\046\062\036\063\037\070\uffd8\075\041\001\002\000" +
    "\004\070\uffeb\001\002\000\004\071\302\001\002\000\046" +
    "\003\040\010\045\012\022\013\044\014\027\015\032\016" +
    "\023\027\030\030\025\034\042\037\047\040\033\041\035" +
    "\043\046\062\036\063\037\070\uffd8\075\041\001\002\000" +
    "\004\070\uffdf\001\002\000\046\003\040\010\045\012\022" +
    "\013\044\014\027\015\032\016\023\027\030\030\025\034" +
    "\042\037\047\040\033\041\035\043\046\062\036\063\037" +
    "\070\uffd8\075\041\001\002\000\004\070\ufff2\001\002\000" +
    "\006\023\175\033\317\001\002\000\006\023\175\033\311" +
    "\001\002\000\004\071\314\001\002\000\004\071\312\001" +
    "\002\000\046\003\040\010\045\012\022\013\044\014\027" +
    "\015\032\016\023\027\030\030\025\034\042\037\047\040" +
    "\033\041\035\043\046\062\036\063\037\070\uffd8\075\041" +
    "\001\002\000\004\070\uffe9\001\002\000\046\003\040\010" +
    "\045\012\022\013\044\014\027\015\032\016\023\027\030" +
    "\030\025\034\042\037\047\040\033\041\035\043\046\062" +
    "\036\063\037\070\uffd8\075\041\001\002\000\004\070\uffea" +
    "\001\002\000\004\071\322\001\002\000\004\071\320\001" +
    "\002\000\046\003\040\010\045\012\022\013\044\014\027" +
    "\015\032\016\023\027\030\030\025\034\042\037\047\040" +
    "\033\041\035\043\046\062\036\063\037\070\uffd8\075\041" +
    "\001\002\000\004\070\uffe5\001\002\000\046\003\040\010" +
    "\045\012\022\013\044\014\027\015\032\016\023\027\030" +
    "\030\025\034\042\037\047\040\033\041\035\043\046\062" +
    "\036\063\037\070\uffd8\075\041\001\002\000\004\070\uffe6" +
    "\001\002\000\046\003\040\010\045\012\022\013\044\014" +
    "\027\015\032\016\023\027\030\030\025\034\042\037\047" +
    "\040\033\041\035\043\046\062\036\063\037\070\uffd8\075" +
    "\041\001\002\000\004\065\326\001\002\000\010\057\070" +
    "\074\071\075\066\001\002\000\004\072\330\001\002\000" +
    "\004\023\175\001\002\000\004\072\332\001\002\000\010" +
    "\057\070\074\071\075\066\001\002\000\004\072\334\001" +
    "\002\000\010\057\070\074\071\075\066\001\002\000\004" +
    "\066\336\001\002\000\004\071\337\001\002\000\046\003" +
    "\uff9c\010\uff9c\012\uff9c\013\uff9c\014\uff9c\015\uff9c\016\uff9c" +
    "\027\uff9c\030\uff9c\034\uff9c\037\uff9c\040\uff9c\041\uff9c\043" +
    "\uff9c\062\uff9c\063\uff9c\070\uff9c\075\uff9c\001\002\000\004" +
    "\070\uffee\001\002\000\006\044\343\070\344\001\002\000" +
    "\004\002\uffff\001\002\000\004\075\346\001\002\000\004" +
    "\004\345\001\002\000\004\002\ufffa\001\002\000\004\065" +
    "\ufff8\001\002\000\006\044\343\070\344\001\002\000\004" +
    "\002\ufff9\001\002\000\004\065\352\001\002\000\004\075" +
    "\255\001\002\000\004\066\354\001\002\000\004\067\355" +
    "\001\002\000\046\003\040\010\045\012\022\013\044\014" +
    "\027\015\032\016\023\027\030\030\025\034\042\037\047" +
    "\040\033\041\035\043\046\062\036\063\037\070\uffd8\075" +
    "\041\001\002\000\004\070\357\001\002\000\006\044\ufff7" +
    "\070\ufff7\001\002\000\006\023\175\033\371\001\002\000" +
    "\006\023\175\033\363\001\002\000\004\071\366\001\002" +
    "\000\004\071\364\001\002\000\046\003\040\010\045\012" +
    "\022\013\044\014\027\015\032\016\023\027\030\030\025" +
    "\034\042\037\047\040\033\041\035\043\046\062\036\063" +
    "\037\070\uffd8\075\041\001\002\000\004\070\uffe7\001\002" +
    "\000\046\003\040\010\045\012\022\013\044\014\027\015" +
    "\032\016\023\027\030\030\025\034\042\037\047\040\033" +
    "\041\035\043\046\062\036\063\037\070\uffd8\075\041\001" +
    "\002\000\004\070\uffe8\001\002\000\004\071\374\001\002" +
    "\000\004\071\372\001\002\000\046\003\040\010\045\012" +
    "\022\013\044\014\027\015\032\016\023\027\030\030\025" +
    "\034\042\037\047\040\033\041\035\043\046\062\036\063" +
    "\037\070\uffd8\075\041\001\002\000\004\070\uffe3\001\002" +
    "\000\046\003\040\010\045\012\022\013\044\014\027\015" +
    "\032\016\023\027\030\030\025\034\042\037\047\040\033" +
    "\041\035\043\046\062\036\063\037\070\uffd8\075\041\001" +
    "\002\000\004\070\uffe4\001\002\000\004\070\uffed\001\002" +
    "\000\004\065\u0102\001\002\000\046\003\040\010\045\012" +
    "\022\013\044\014\027\015\032\016\023\027\030\030\025" +
    "\034\042\037\047\040\033\041\035\043\046\062\036\063" +
    "\037\070\uffd8\075\041\001\002\000\004\070\ufff0\001\002" +
    "\000\004\023\175\001\002\000\004\072\u0104\001\002\000" +
    "\010\057\070\074\071\075\066\001\002\000\004\072\u0106" +
    "\001\002\000\010\057\070\074\071\075\066\001\002\000" +
    "\004\066\u0108\001\002\000\004\071\u0109\001\002\000\046" +
    "\003\uff9e\010\uff9e\012\uff9e\013\uff9e\014\uff9e\015\uff9e\016" +
    "\uff9e\027\uff9e\030\uff9e\034\uff9e\037\uff9e\040\uff9e\041\uff9e" +
    "\043\uff9e\062\uff9e\063\uff9e\070\uff9e\075\uff9e\001\002\000" +
    "\012\003\200\024\203\025\177\026\201\001\002\000\004" +
    "\066\uffd3\001\002\000\046\003\040\010\045\012\022\013" +
    "\044\014\027\015\032\016\023\027\030\030\025\034\042" +
    "\037\047\040\033\041\035\043\046\062\036\063\037\070" +
    "\uffd8\075\041\001\002\000\004\070\u010e\001\002\000\006" +
    "\044\343\070\344\001\002\000\004\002\ufffd\001\002\000" +
    "\046\003\040\010\045\012\022\013\044\014\027\015\032" +
    "\016\023\027\030\030\025\034\042\037\047\040\033\041" +
    "\035\043\046\062\036\063\037\070\uffd8\075\041\001\002" +
    "\000\004\070\u0112\001\002\000\006\044\343\070\344\001" +
    "\002\000\004\002\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0111\000\004\002\005\001\001\000\004\036\u010f\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\035\u010b\001\001\000\004\034\011\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\004\016\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\003\025\007\033\020\030\023\042" +
    "\025\023\001\001\000\004\011\377\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\323\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\300\001\001\000\002\001\001\000\014" +
    "\003\274\007\033\020\030\023\042\025\023\001\001\000" +
    "\004\005\271\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\040\245\041\244\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\210\001\001\000\004\012\166" +
    "\001\001\000\004\026\060\001\001\000\004\014\053\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\003\051" +
    "\007\033\020\030\023\042\025\023\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\003\057\007\033\020\030\023" +
    "\042\025\023\001\001\000\002\001\001\000\014\003\165" +
    "\007\033\020\030\023\042\025\023\001\001\000\012\027" +
    "\062\030\066\031\064\032\063\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\027\074\030\066\031\064\032\063\001\001\000\012\027" +
    "\073\030\066\031\064\032\063\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\027\077\030" +
    "\066\031\064\032\063\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\027\104\030\066\031\064\032\063\001" +
    "\001\000\012\027\103\030\066\031\064\032\063\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\024\142\001" +
    "\001\000\004\024\141\001\001\000\004\024\140\001\001" +
    "\000\004\024\137\001\001\000\004\024\136\001\001\000" +
    "\012\027\132\030\066\031\064\032\063\001\001\000\004" +
    "\024\116\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\024\120\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\024\131\001\001\000\004\024" +
    "\130\001\001\000\004\024\127\001\001\000\004\024\126" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\027\135\030\066\031\064\032\063\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\027" +
    "\146\030\066\031\064\032\063\001\001\000\012\027\145" +
    "\030\066\031\064\032\063\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\027\152\030\066\031\064\032\063" +
    "\001\001\000\012\027\151\030\066\031\064\032\063\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\003\155\007\033\020\030\023\042\025\023\001" +
    "\001\000\002\001\001\000\004\033\157\001\001\000\002" +
    "\001\001\000\004\026\161\001\001\000\002\001\001\000" +
    "\014\003\163\007\033\020\030\023\042\025\023\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\003\207\007\033\020\030\023\042\025\023\001\001" +
    "\000\002\001\001\000\012\027\171\030\066\031\064\032" +
    "\063\001\001\000\002\001\001\000\004\005\173\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\201\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\027\204\030" +
    "\066\031\064\032\063\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\043" +
    "\215\001\001\000\004\024\213\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\003\222\007\033\020\030\023\042\025\023\001\001\000" +
    "\002\001\001\000\014\003\224\007\033\020\030\023\042" +
    "\025\023\001\001\000\002\001\001\000\004\024\243\001" +
    "\001\000\002\001\001\000\004\021\233\001\001\000\002" +
    "\001\001\000\014\003\232\007\033\020\030\023\042\025" +
    "\023\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\022\235\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\003\242\007\033" +
    "\020\030\023\042\025\023\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\003\247\007\033\020\030\023\042\025\023\001\001\000" +
    "\002\001\001\000\004\042\251\001\001\000\002\001\001" +
    "\000\006\017\253\023\255\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\017\257\023\255" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\003" +
    "\262\007\033\020\030\023\042\025\023\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\003\265\007\033\020" +
    "\030\023\042\025\023\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\003\270\007\033\020\030\023\042\025" +
    "\023\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\003\273\007\033\020\030\023\042\025\023\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\003\277\007\033\020\030\023\042\025\023\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\003\302\007\033" +
    "\020\030\023\042\025\023\001\001\000\002\001\001\000" +
    "\014\003\304\007\033\020\030\023\042\025\023\001\001" +
    "\000\002\001\001\000\004\005\315\001\001\000\004\005" +
    "\307\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\003\312\007\033\020\030\023\042\025\023\001\001\000" +
    "\002\001\001\000\014\003\314\007\033\020\030\023\042" +
    "\025\023\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\003\320\007\033\020\030\023\042" +
    "\025\023\001\001\000\002\001\001\000\014\003\322\007" +
    "\033\020\030\023\042\025\023\001\001\000\002\001\001" +
    "\000\014\003\337\007\033\020\030\023\042\025\023\001" +
    "\001\000\002\001\001\000\012\027\326\030\066\031\064" +
    "\032\063\001\001\000\002\001\001\000\004\005\330\001" +
    "\001\000\002\001\001\000\012\027\332\030\066\031\064" +
    "\032\063\001\001\000\002\001\001\000\012\027\334\030" +
    "\066\031\064\032\063\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\016" +
    "\341\001\001\000\002\001\001\000\004\015\346\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\037\350\001" +
    "\001\000\004\016\347\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\017\352\023\255\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\003\355\007\033\020\030" +
    "\023\042\025\023\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\367\001\001\000\004\005\361\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\003\364\007" +
    "\033\020\030\023\042\025\023\001\001\000\002\001\001" +
    "\000\014\003\366\007\033\020\030\023\042\025\023\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\003\372\007\033\020\030\023\042\025\023\001" +
    "\001\000\002\001\001\000\014\003\374\007\033\020\030" +
    "\023\042\025\023\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\003\u0100\007\033\020\030" +
    "\023\042\025\023\001\001\000\002\001\001\000\004\005" +
    "\u0102\001\001\000\002\001\001\000\012\027\u0104\030\066" +
    "\031\064\032\063\001\001\000\002\001\001\000\012\027" +
    "\u0106\030\066\031\064\032\063\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\u010a\001" +
    "\001\000\002\001\001\000\014\003\u010c\007\033\020\030" +
    "\023\042\025\023\001\001\000\002\001\001\000\004\016" +
    "\u010e\001\001\000\002\001\001\000\014\003\u0110\007\033" +
    "\020\030\023\042\025\023\001\001\000\002\001\001\000" +
    "\004\016\u0112\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintaxPrueba$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintaxPrueba$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintaxPrueba$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private String ambito;
    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    private void reportarError(String codigo, String encontrado){
        FrmPrincipal.errores.agregarErrorSintactico(codigo, s.left + 1, sym.terminalNames[s.sym], encontrado);
    }

    public void report_fatal_error(String message, Object info){
        System.out.println(message + " " + sym.terminalNames[((Symbol) info).sym]);
    }

    public SintaxPrueba(Lexer lexer){
        super(lexer);
    }

    private void ponerValor(LlaveTabla identificador, Object valor){
        FrmPrincipal.tablaSimbolos.agregarValor(identificador, valor);
    }

    private void ponerTipoDato(LlaveTabla identificador, String tipo){
        FrmPrincipal.tablaSimbolos.agregarTipo(identificador, tipo);
    }

    private void ponerAmbito(LlaveTabla identificador){
        FrmPrincipal.tablaSimbolos.agregarAmbito(identificador, ambito);
    }

    private void agregarFuncion(LlaveTabla id){
        FrmPrincipal.tablaSimbolos.quitarDeTabla(id);
        FrmPrincipal.funciones.agregarFuncion(id.id);
    }

    private void agregarParametro(LlaveTabla parametro){
        FrmPrincipal.funciones.agregarParametro(ambito, parametro);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintaxPrueba$actions {
  private final SintaxPrueba parser;

  /** Constructor */
  CUP$SintaxPrueba$actions(SintaxPrueba parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintaxPrueba$do_action_part00000000(
    int                        CUP$SintaxPrueba$act_num,
    java_cup.runtime.lr_parser CUP$SintaxPrueba$parser,
    java.util.Stack            CUP$SintaxPrueba$stack,
    int                        CUP$SintaxPrueba$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintaxPrueba$result;

      /* select the action based on the action number */
      switch (CUP$SintaxPrueba$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		RESULT = start_val;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintaxPrueba$parser.done_parsing();
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		LlaveTabla i = (LlaveTabla)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;

            agregarFuncion(i);
            ambito = i.id;
        
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$0",26, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= INICIO IDENTIFICADOR NT$0 LLAVE_ABIERTA COMIENZO PARENTESIS_ABIERTO tiempo_cada PARENTESIS_CERRADO LLAVE_ABIERTA gramaticas LLAVE_CERRADA inicio_fin 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-9)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-10)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-10)).right;
		LlaveTabla i = (LlaveTabla)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-10)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-11)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$1 ::= 
            {
              Object RESULT =null;
reportarError("ES1", null);ambito="rutina_principal";
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$1",27, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // inicio ::= INICIO error NT$1 gramaticas LLAVE_CERRADA inicio_fin 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$2 ::= 
            {
              Object RESULT =null;
reportarError("ES1", null); ambito = "rutina_principal";
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$2",28, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // inicio ::= error NT$2 gramaticas LLAVE_CERRADA inicio_fin 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // inicio_fin ::= LLAVE_CERRADA FIN 
            {
              Object RESULT =null;
		System.out.println("ANALISIS TERMINADO");
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("inicio_fin",12, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // inicio_fin ::= FUNCION funcion inicio_fin 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("inicio_fin",12, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$3 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		LlaveTabla i = (LlaveTabla)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;

                                agregarFuncion(i);
                                ambito = i.id;
                            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$3",29, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // funcion ::= IDENTIFICADOR NT$3 PARENTESIS_ABIERTO parametros PARENTESIS_CERRADO LLAVE_ABIERTA gramaticas LLAVE_CERRADA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-7)).right;
		LlaveTabla i = (LlaveTabla)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-7)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("funcion",11, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // parametros ::= declaracion_inicio COMA parametros 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).right;
		LlaveTabla i = (LlaveTabla)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		agregarParametro(i);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("parametros",13, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // parametros ::= declaracion_inicio 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		LlaveTabla i = (LlaveTabla)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		agregarParametro(i);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("parametros",13, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // gramaticas ::= incdec 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // gramaticas ::= declaracion gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // gramaticas ::= asignacion PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // gramaticas ::= CONDICION condicion gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // gramaticas ::= VENTILAR ventilar gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // gramaticas ::= ADMITIR admitir gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // gramaticas ::= AULAVACIA aula_vacia gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // gramaticas ::= SALIR PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // gramaticas ::= APAGAR LUCES PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // gramaticas ::= ENCENDER LUCES PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // gramaticas ::= ABRIR PUERTAS tiempo_por PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // gramaticas ::= ABRIR PUERTAS MANTENER PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // gramaticas ::= CERRAR PUERTAS tiempo_por PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // gramaticas ::= CERRAR PUERTAS MANTENER PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // gramaticas ::= ABRIR VENTANAS tiempo_por PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // gramaticas ::= ABRIR VENTANAS MANTENER PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // gramaticas ::= CERRAR VENTANAS tiempo_por PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // gramaticas ::= CERRAR VENTANAS MANTENER PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // gramaticas ::= OBTENER TEMPERATURA PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // gramaticas ::= OBTENER PERSONAS PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // gramaticas ::= SANITIZAR tiempo_por PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // gramaticas ::= DISPENSAR tiempo_por PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // gramaticas ::= ESTADO estado PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NT$4 ::= 
            {
              Object RESULT =null;
reportarError("ES2", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$4",30, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // gramaticas ::= error NT$4 PUNTO_COMA gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$5 ::= 
            {
              Object RESULT =null;
reportarError("ES1", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$5",31, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // NT$6 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		LlaveTabla i = (LlaveTabla)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;

                                agregarFuncion(i);
                                ambito = i.id;
                            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$6",32, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // gramaticas ::= error NT$5 IDENTIFICADOR NT$6 PARENTESIS_ABIERTO parametros PARENTESIS_CERRADO LLAVE_ABIERTA gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-6)).right;
		LlaveTabla i = (LlaveTabla)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-6)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-8)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // gramaticas ::= 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // incdec ::= IDENTIFICADOR INC PUNTO_COMA gramaticas 
            {
              Integer RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("incdec",19, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // incdec ::= IDENTIFICADOR DEC PUNTO_COMA gramaticas 
            {
              Integer RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("incdec",19, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // incdec ::= INC IDENTIFICADOR PUNTO_COMA gramaticas 
            {
              Integer RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("incdec",19, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // incdec ::= DEC IDENTIFICADOR PUNTO_COMA gramaticas 
            {
              Integer RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("incdec",19, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // tiempo_cada ::= CADA NUMERO unidad_tiempo 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("tiempo_cada",2, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // tiempo_por ::= POR NUMERO unidad_tiempo 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("tiempo_por",3, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // unidad_tiempo ::= SEG 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("unidad_tiempo",4, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // unidad_tiempo ::= MIN 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("unidad_tiempo",4, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // unidad_tiempo ::= HR 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("unidad_tiempo",4, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // unidad_tiempo ::= error 
            {
              Object RESULT =null;
		reportarError("ES3", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("unidad_tiempo",4, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // estado ::= LUCES 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("estado",10, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // estado ::= PUERTAS 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("estado",10, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // estado ::= VENTANAS 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("estado",10, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // asignacion ::= IDENTIFICADOR ASIGNACION op_aritmetica 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("asignacion",14, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // declaracion ::= declaracion_inicio PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NT$7 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).right;
		LlaveTabla i = (LlaveTabla)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
ponerValor(i,valor);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$7",33, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // declaracion ::= declaracion_inicio declaracion_valor NT$7 PUNTO_COMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).right;
		LlaveTabla i = (LlaveTabla)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // declaracion_inicio ::= IDENTIFICADOR DECLARAR declaracion_tipo_dato 
            {
              LlaveTabla RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).right;
		LlaveTabla i = (LlaveTabla)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		String td = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		ponerAmbito(i);ponerTipoDato(i,td);RESULT=i;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("declaracion_inicio",17, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // declaracion_valor ::= ASIGNACION OP_BOOLEANO 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Boolean valor = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=valor;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("declaracion_valor",6, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // declaracion_valor ::= ASIGNACION op_aritmetica 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Integer valor = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=valor;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("declaracion_valor",6, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // declaracion_tipo_dato ::= COMO tipo_dato 
            {
              String RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		String td = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT = td;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("declaracion_tipo_dato",15, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // tipo_dato ::= ENTERO 
            {
              String RESULT =null;
		RESULT = "entero";
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("tipo_dato",16, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // tipo_dato ::= LOGICO 
            {
              String RESULT =null;
		RESULT = "logico";
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("tipo_dato",16, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // tipo_dato ::= error 
            {
              String RESULT =null;
		reportarError("ES4", null); RESULT = "error";
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("tipo_dato",16, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // op_aritmetica ::= PARENTESIS_ABIERTO op_aritmetica PARENTESIS_CERRADO 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op_aritmetica",18, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // op_aritmetica ::= NUMERO AR_SUMA op_aritmetica 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op_aritmetica",18, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // op_aritmetica ::= NUMERO AR_RESTA op_aritmetica 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op_aritmetica",18, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // op_aritmetica ::= NUMERO AR_MULTIPLICACION op_aritmetica 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op_aritmetica",18, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // op_aritmetica ::= NUMERO AR_DIVISION op_aritmetica 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op_aritmetica",18, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // op_aritmetica ::= NUMERO 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op_aritmetica",18, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // op_aritmetica ::= IDENTIFICADOR 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		LlaveTabla a = (LlaveTabla)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op_aritmetica",18, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // condicion ::= PARENTESIS_ABIERTO sentencia_booleana PARENTESIS_CERRADO LLAVE_ABIERTA gramaticas LLAVE_CERRADA 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("condicion",20, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // condicion ::= PARENTESIS_ABIERTO sentencia_booleana PARENTESIS_CERRADO LLAVE_ABIERTA gramaticas LLAVE_CERRADA sino 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("condicion",20, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // sentencia_booleana ::= OP_BOOLEANO 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("sentencia_booleana",21, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // sentencia_booleana ::= OP_BOOLEANO LOGICO_AND sentencia_booleana 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("sentencia_booleana",21, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // sentencia_booleana ::= OP_BOOLEANO LOGICO_OR sentencia_booleana 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("sentencia_booleana",21, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // sentencia_booleana ::= IDENTIFICADOR 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("sentencia_booleana",21, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // sentencia_booleana ::= IDENTIFICADOR LOGICO_AND sentencia_booleana IDENTIFICADOR LOGICO_OR sentencia_booleana 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("sentencia_booleana",21, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // sentencia_booleana ::= negacion_identificador 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("sentencia_booleana",21, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // sentencia_booleana ::= negacion_identificador LOGICO_AND sentencia_booleana 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("sentencia_booleana",21, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // sentencia_booleana ::= negacion_identificador LOGICO_OR sentencia_booleana 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("sentencia_booleana",21, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // sentencia_booleana ::= negacion_booleana 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("sentencia_booleana",21, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // sentencia_booleana ::= negacion_booleana LOGICO_AND sentencia_booleana 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("sentencia_booleana",21, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // sentencia_booleana ::= negacion_booleana LOGICO_OR sentencia_booleana 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("sentencia_booleana",21, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // sentencia_booleana ::= relacional_booleana 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("sentencia_booleana",21, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // sentencia_booleana ::= relacional_booleana LOGICO_AND sentencia_booleana 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("sentencia_booleana",21, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // sentencia_booleana ::= relacional_booleana LOGICO_OR sentencia_booleana 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("sentencia_booleana",21, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // negacion_identificador ::= NEGACION IDENTIFICADOR 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("negacion_identificador",22, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // negacion_booleana ::= NEGACION PARENTESIS_ABIERTO sentencia_booleana PARENTESIS_CERRADO 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("negacion_booleana",23, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // relacional_booleana ::= IDENTIFICADOR REL_MENOR op_aritmetica 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("relacional_booleana",24, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // relacional_booleana ::= IDENTIFICADOR REL_MAYOR op_aritmetica 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("relacional_booleana",24, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // relacional_booleana ::= IDENTIFICADOR REL_MENOR_IGUAL op_aritmetica 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("relacional_booleana",24, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // relacional_booleana ::= IDENTIFICADOR REL_MAYOR_IGUAL op_aritmetica 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("relacional_booleana",24, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // relacional_booleana ::= IDENTIFICADOR REL_DIFERENTE op_aritmetica 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("relacional_booleana",24, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // relacional_booleana ::= IDENTIFICADOR REL_IGUAL op_aritmetica 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("relacional_booleana",24, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // sino ::= SINO condicion 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("sino",25, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // sino ::= SINO LLAVE_ABIERTA gramaticas LLAVE_CERRADA 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("sino",25, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ventilar ::= VENTILAR PARENTESIS_ABIERTO tiempo_por COMA sentencia_booleana COMA sentencia_booleana PARENTESIS_CERRADO PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("ventilar",7, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-8)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // admitir ::= ADMITIR PARENTESIS_ABIERTO sentencia_booleana COMA tiempo_por COMA sentencia_booleana PARENTESIS_CERRADO PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("admitir",8, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-8)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // aula_vacia ::= AULAVACIA PARENTESIS_ABIERTO sentencia_booleana COMA tiempo_por COMA sentencia_booleana COMA sentencia_booleana PARENTESIS_CERRADO PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("aula_vacia",9, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-10)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintaxPrueba$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintaxPrueba$do_action(
    int                        CUP$SintaxPrueba$act_num,
    java_cup.runtime.lr_parser CUP$SintaxPrueba$parser,
    java.util.Stack            CUP$SintaxPrueba$stack,
    int                        CUP$SintaxPrueba$top)
    throws java.lang.Exception
    {
              return CUP$SintaxPrueba$do_action_part00000000(
                               CUP$SintaxPrueba$act_num,
                               CUP$SintaxPrueba$parser,
                               CUP$SintaxPrueba$stack,
                               CUP$SintaxPrueba$top);
    }
}

}
