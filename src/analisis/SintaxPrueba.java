
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analisis;

import java_cup.runtime.Symbol;
import codigo.FrmPrincipal;
import herramientas.ArbolSintactico;
import herramientas.NodoSintactico;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintaxPrueba extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public SintaxPrueba() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintaxPrueba(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintaxPrueba(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\256\000\002\002\004\000\002\041\002\000\002\002" +
    "\016\000\002\042\002\000\002\002\010\000\002\043\002" +
    "\000\002\002\007\000\002\014\004\000\002\044\002\000" +
    "\002\014\005\000\002\014\005\000\002\045\002\000\002" +
    "\014\006\000\002\046\002\000\002\047\002\000\002\013" +
    "\013\000\002\050\002\000\002\015\006\000\002\015\003" +
    "\000\002\015\002\000\002\051\002\000\002\003\007\000" +
    "\002\052\002\000\002\003\006\000\002\053\002\000\002" +
    "\003\007\000\002\054\002\000\002\003\006\000\002\055" +
    "\002\000\002\003\007\000\002\056\002\000\002\003\006" +
    "\000\002\057\002\000\002\003\007\000\002\060\002\000" +
    "\002\003\006\000\002\003\005\000\002\061\002\000\002" +
    "\003\005\000\002\062\002\000\002\003\007\000\002\063" +
    "\002\000\002\003\006\000\002\003\005\000\002\064\002" +
    "\000\002\003\005\000\002\003\005\000\002\003\005\000" +
    "\002\065\002\000\002\003\005\000\002\003\005\000\002" +
    "\066\002\000\002\003\005\000\002\003\005\000\002\067" +
    "\002\000\002\003\005\000\002\003\006\000\002\070\002" +
    "\000\002\003\006\000\002\003\006\000\002\071\002\000" +
    "\002\003\006\000\002\003\007\000\002\072\002\000\002" +
    "\003\007\000\002\003\007\000\002\073\002\000\002\003" +
    "\007\000\002\003\007\000\002\074\002\000\002\003\007" +
    "\000\002\003\007\000\002\075\002\000\002\003\007\000" +
    "\002\003\007\000\002\076\002\000\002\003\007\000\002" +
    "\003\007\000\002\077\002\000\002\003\007\000\002\003" +
    "\007\000\002\100\002\000\002\003\007\000\002\003\007" +
    "\000\002\101\002\000\002\003\007\000\002\003\006\000" +
    "\002\102\002\000\002\003\006\000\002\003\006\000\002" +
    "\103\002\000\002\003\006\000\002\104\002\000\002\003" +
    "\005\000\002\105\002\000\002\003\006\000\002\003\002" +
    "\000\002\106\002\000\002\004\006\000\002\005\005\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\017\004\000\002\017\004\000\002\107\002" +
    "\000\002\016\006\000\002\110\002\000\002\031\006\000" +
    "\002\007\004\000\002\027\004\000\002\030\003\000\002" +
    "\030\003\000\002\030\003\000\002\111\002\000\002\022" +
    "\005\000\002\112\002\000\002\023\006\000\002\113\002" +
    "\000\002\023\006\000\002\023\002\000\002\114\002\000" +
    "\002\024\005\000\002\115\002\000\002\025\006\000\002" +
    "\116\002\000\002\025\006\000\002\025\002\000\002\026" +
    "\003\000\002\026\004\000\002\026\003\000\002\020\003" +
    "\000\002\020\003\000\002\020\004\000\002\020\004\000" +
    "\002\020\005\000\002\032\010\000\002\032\011\000\002" +
    "\117\002\000\002\033\005\000\002\120\002\000\002\033" +
    "\005\000\002\036\004\000\002\036\004\000\002\036\002" +
    "\000\002\121\002\000\002\034\005\000\002\122\002\000" +
    "\002\034\006\000\002\037\004\000\002\037\004\000\002" +
    "\037\004\000\002\037\004\000\002\037\004\000\002\037" +
    "\004\000\002\021\003\000\002\021\003\000\002\021\004" +
    "\000\002\021\004\000\002\021\003\000\002\040\003\000" +
    "\002\040\003\000\002\040\005\000\002\040\004\000\002" +
    "\040\004\000\002\040\003\000\002\035\005\000\002\035" +
    "\006\000\002\010\012\000\002\011\012" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0148\000\006\003\004\016\005\001\002\000\040\003" +
    "\ufffc\010\ufffc\012\ufffc\013\ufffc\014\ufffc\015\ufffc\026\ufffc" +
    "\027\ufffc\036\ufffc\037\ufffc\040\ufffc\063\ufffc\064\ufffc\071" +
    "\ufffc\076\ufffc\001\002\000\006\003\010\076\011\001\002" +
    "\000\004\002\007\001\002\000\004\002\001\001\002\000" +
    "\040\003\ufffe\010\ufffe\012\ufffe\013\ufffe\014\ufffe\015\ufffe" +
    "\026\ufffe\027\ufffe\036\ufffe\037\ufffe\040\ufffe\063\ufffe\064" +
    "\ufffe\071\ufffe\076\ufffe\001\002\000\004\070\000\001\002" +
    "\000\004\070\013\001\002\000\004\005\014\001\002\000" +
    "\004\066\015\001\002\000\004\021\016\001\002\000\004" +
    "\074\u0140\001\002\000\004\067\020\001\002\000\004\070" +
    "\021\001\002\000\040\003\037\010\043\012\022\013\042" +
    "\014\032\015\023\026\030\027\024\036\044\037\033\040" +
    "\034\063\035\064\036\071\uffa1\076\040\001\002\000\004" +
    "\066\u0139\001\002\000\042\003\uffcb\010\uffcb\012\uffcb\013" +
    "\uffcb\014\uffcb\015\uffcb\026\uffcb\027\uffcb\036\uffcb\037\uffcb" +
    "\040\uffcb\063\uffcb\064\uffcb\071\uffcb\072\u0136\076\uffcb\001" +
    "\002\000\006\030\u011f\031\u0120\001\002\000\004\071\u0104" +
    "\001\002\000\042\003\uffce\010\uffce\012\uffce\013\uffce\014" +
    "\uffce\015\uffce\026\uffce\027\uffce\036\uffce\037\uffce\040\uffce" +
    "\063\uffce\064\uffce\071\uffce\072\u0101\076\uffce\001\002\000" +
    "\042\003\uffd5\010\uffd5\012\uffd5\013\uffd5\014\uffd5\015\uffd5" +
    "\026\uffd5\027\uffd5\036\uffd5\037\uffd5\040\uffd5\063\uffd5\064" +
    "\uffd5\071\uffd5\072\375\076\uffd5\001\002\000\006\030\346" +
    "\031\347\001\002\000\042\003\uffd1\010\uffd1\012\uffd1\013" +
    "\uffd1\014\uffd1\015\uffd1\026\uffd1\027\uffd1\036\uffd1\037\uffd1" +
    "\040\uffd1\063\uffd1\064\uffd1\071\uffd1\072\343\076\uffd1\001" +
    "\002\000\004\022\221\001\002\000\004\041\330\001\002" +
    "\000\004\022\221\001\002\000\004\076\315\001\002\000" +
    "\004\076\307\001\002\000\042\003\uffa5\010\uffa5\012\uffa5" +
    "\013\uffa5\014\uffa5\015\uffa5\026\uffa5\027\uffa5\036\uffa5\037" +
    "\uffa5\040\uffa5\063\uffa5\064\uffa5\071\uffa5\072\uffa3\076\uffa5" +
    "\001\002\000\012\017\uff92\063\253\064\256\065\uff94\001" +
    "\002\000\044\003\uffdc\010\uffdc\012\uffdc\013\uffdc\014\uffdc" +
    "\015\uffdc\026\uffdc\027\uffdc\036\uffdc\037\uffdc\040\uffdc\063" +
    "\uffdc\064\uffdc\065\234\071\uffdc\072\235\076\uffdc\001\002" +
    "\000\004\066\215\001\002\000\004\066\053\001\002\000" +
    "\004\041\045\001\002\000\042\003\uffc8\010\uffc8\012\uffc8" +
    "\013\uffc8\014\uffc8\015\uffc8\026\uffc8\027\uffc8\036\uffc8\037" +
    "\uffc8\040\uffc8\063\uffc8\064\uffc8\071\uffc8\072\046\076\uffc8" +
    "\001\002\000\040\003\037\010\043\012\022\013\042\014" +
    "\032\015\023\026\030\027\024\036\044\037\033\040\034" +
    "\063\035\064\036\071\uffa1\076\040\001\002\000\040\003" +
    "\037\010\043\012\022\013\042\014\032\015\023\026\030" +
    "\027\024\036\044\037\033\040\034\063\035\064\036\071" +
    "\uffa1\076\040\001\002\000\004\071\uffc7\001\002\000\004" +
    "\071\uffc9\001\002\000\040\003\037\010\043\012\022\013" +
    "\042\014\032\015\023\026\030\027\024\036\044\037\033" +
    "\040\034\063\035\064\036\071\uffa1\076\040\001\002\000" +
    "\024\003\063\033\054\042\066\055\062\060\070\066\064" +
    "\074\061\075\057\076\067\001\002\000\006\034\212\035" +
    "\213\001\002\000\052\003\uff73\010\uff73\012\uff73\013\uff73" +
    "\014\uff73\015\uff73\026\uff73\027\uff73\036\uff73\037\uff73\040" +
    "\uff73\061\uff73\062\uff73\063\uff73\064\uff73\067\uff73\071\uff73" +
    "\072\uff73\073\uff73\076\uff73\001\002\000\004\067\175\001" +
    "\002\000\052\003\uff5c\010\uff5c\012\uff5c\013\uff5c\014\uff5c" +
    "\015\uff5c\026\uff5c\027\uff5c\036\uff5c\037\uff5c\040\uff5c\061" +
    "\uff5c\062\uff5c\063\uff5c\064\uff5c\067\uff5c\071\uff5c\072\uff5c" +
    "\073\uff5c\076\uff5c\001\002\000\052\003\uff71\010\uff71\012" +
    "\uff71\013\uff71\014\uff71\015\uff71\026\uff71\027\uff71\036\uff71" +
    "\037\uff71\040\uff71\061\uff71\062\uff71\063\uff71\064\uff71\067" +
    "\uff71\071\uff71\072\uff71\073\uff71\076\uff71\001\002\000\016" +
    "\046\uff61\047\uff61\050\uff61\051\uff61\052\uff61\053\uff61\001" +
    "\002\000\012\003\162\033\054\074\061\076\163\001\002" +
    "\000\066\003\uff58\010\uff58\012\uff58\013\uff58\014\uff58\015" +
    "\uff58\026\uff58\027\uff58\036\uff58\037\uff58\040\uff58\046\uff5e" +
    "\047\uff5e\050\uff5e\051\uff5e\052\uff5e\053\uff5e\061\uff58\062" +
    "\uff58\063\uff58\064\uff58\067\uff58\071\uff58\072\uff58\073\uff58" +
    "\076\uff58\001\002\000\024\003\063\033\054\042\066\055" +
    "\062\060\070\066\064\074\061\075\057\076\067\001\002" +
    "\000\016\046\uff6c\047\uff6c\050\uff6c\051\uff6c\052\uff6c\053" +
    "\uff6c\001\002\000\010\030\074\031\077\041\076\001\002" +
    "\000\066\003\uff5d\010\uff5d\012\uff5d\013\uff5d\014\uff5d\015" +
    "\uff5d\026\uff5d\027\uff5d\036\uff5d\037\uff5d\040\uff5d\046\uff62" +
    "\047\uff62\050\uff62\051\uff62\052\uff62\053\uff62\061\uff5d\062" +
    "\uff5d\063\uff5d\064\uff5d\067\uff5d\071\uff5d\072\uff5d\073\uff5d" +
    "\076\uff5d\001\002\000\016\003\071\042\066\060\070\066" +
    "\064\075\057\076\073\001\002\000\052\003\uff58\010\uff58" +
    "\012\uff58\013\uff58\014\uff58\015\uff58\026\uff58\027\uff58\036" +
    "\uff58\037\uff58\040\uff58\061\uff58\062\uff58\063\uff58\064\uff58" +
    "\067\uff58\071\uff58\072\uff58\073\uff58\076\uff58\001\002\000" +
    "\052\003\uff59\010\uff59\012\uff59\013\uff59\014\uff59\015\uff59" +
    "\026\uff59\027\uff59\036\uff59\037\uff59\040\uff59\061\uff59\062" +
    "\uff59\063\uff59\064\uff59\067\uff59\071\uff59\072\uff59\073\uff59" +
    "\076\uff59\001\002\000\052\003\uff5d\010\uff5d\012\uff5d\013" +
    "\uff5d\014\uff5d\015\uff5d\026\uff5d\027\uff5d\036\uff5d\037\uff5d" +
    "\040\uff5d\061\uff5d\062\uff5d\063\uff5d\064\uff5d\067\uff5d\071" +
    "\uff5d\072\uff5d\073\uff5d\076\uff5d\001\002\000\052\003\uff97" +
    "\010\uff97\012\uff97\013\uff97\014\uff97\015\uff97\026\uff97\027" +
    "\uff97\036\uff97\037\uff97\040\uff97\061\uff97\062\uff97\063\uff97" +
    "\064\uff97\067\uff97\071\uff97\072\uff97\073\uff97\076\uff97\001" +
    "\002\000\052\003\uff5a\010\uff5a\012\uff5a\013\uff5a\014\uff5a" +
    "\015\uff5a\026\uff5a\027\uff5a\036\uff5a\037\uff5a\040\uff5a\061" +
    "\uff5a\062\uff5a\063\uff5a\064\uff5a\067\uff5a\071\uff5a\072\uff5a" +
    "\073\uff5a\076\uff5a\001\002\000\052\003\uff99\010\uff99\012" +
    "\uff99\013\uff99\014\uff99\015\uff99\026\uff99\027\uff99\036\uff99" +
    "\037\uff99\040\uff99\061\uff99\062\uff99\063\uff99\064\uff99\067" +
    "\uff99\071\uff99\072\uff99\073\uff99\076\uff99\001\002\000\052" +
    "\003\uff98\010\uff98\012\uff98\013\uff98\014\uff98\015\uff98\026" +
    "\uff98\027\uff98\036\uff98\037\uff98\040\uff98\061\uff98\062\uff98" +
    "\063\uff98\064\uff98\067\uff98\071\uff98\072\uff98\073\uff98\076" +
    "\uff98\001\002\000\016\046\103\047\104\050\101\051\102" +
    "\052\105\053\107\001\002\000\016\003\115\033\111\055" +
    "\114\066\116\074\113\076\120\001\002\000\016\003\115" +
    "\033\111\055\114\066\116\074\113\076\120\001\002\000" +
    "\016\003\115\033\111\055\114\066\116\074\113\076\120" +
    "\001\002\000\016\003\115\033\111\055\114\066\116\074" +
    "\113\076\120\001\002\000\016\003\115\033\111\055\114" +
    "\066\116\074\113\076\120\001\002\000\052\003\uff6b\010" +
    "\uff6b\012\uff6b\013\uff6b\014\uff6b\015\uff6b\026\uff6b\027\uff6b" +
    "\036\uff6b\037\uff6b\040\uff6b\061\uff6b\062\uff6b\063\uff6b\064" +
    "\uff6b\067\uff6b\071\uff6b\072\uff6b\073\uff6b\076\uff6b\001\002" +
    "\000\016\003\115\033\111\055\114\066\116\074\113\076" +
    "\120\001\002\000\052\003\uff63\010\uff63\012\uff63\013\uff63" +
    "\014\uff63\015\uff63\026\uff63\027\uff63\036\uff63\037\uff63\040" +
    "\uff63\061\uff63\062\uff63\063\uff63\064\uff63\067\uff63\071\uff63" +
    "\072\uff63\073\uff63\076\uff63\001\002\000\006\034\151\035" +
    "\152\001\002\000\070\003\uff7d\010\uff7d\012\uff7d\013\uff7d" +
    "\014\uff7d\015\uff7d\023\uff7d\024\uff7d\025\uff7d\026\uff7d\027" +
    "\uff7d\036\uff7d\037\uff7d\040\uff7d\054\uff7d\055\uff7d\056\uff7d" +
    "\057\uff7d\061\uff7d\062\uff7d\063\uff7d\064\uff7d\067\uff7d\071" +
    "\uff7d\072\uff7d\073\uff7d\076\uff7d\001\002\000\070\003\uff7a" +
    "\010\uff7a\012\uff7a\013\uff7a\014\uff7a\015\uff7a\023\uff7a\024" +
    "\uff7a\025\uff7a\026\uff7a\027\uff7a\036\uff7a\037\uff7a\040\uff7a" +
    "\054\uff7a\055\uff7a\056\uff7a\057\uff7a\061\uff7a\062\uff7a\063" +
    "\uff7a\064\uff7a\067\uff7a\071\uff7a\072\uff7a\073\uff7a\076\uff7a" +
    "\001\002\000\012\033\111\066\116\074\113\076\120\001" +
    "\002\000\070\003\uff7b\010\uff7b\012\uff7b\013\uff7b\014\uff7b" +
    "\015\uff7b\023\uff7b\024\uff7b\025\uff7b\026\uff7b\027\uff7b\036" +
    "\uff7b\037\uff7b\040\uff7b\054\uff7b\055\uff7b\056\uff7b\057\uff7b" +
    "\061\uff7b\062\uff7b\063\uff7b\064\uff7b\067\uff7b\071\uff7b\072" +
    "\uff7b\073\uff7b\076\uff7b\001\002\000\016\003\115\033\111" +
    "\055\114\066\116\074\113\076\120\001\002\000\070\003" +
    "\uff84\010\uff84\012\uff84\013\uff84\014\uff84\015\uff84\023\uff84" +
    "\024\uff84\025\uff84\026\uff84\027\uff84\036\uff84\037\uff84\040" +
    "\uff84\054\uff84\055\uff84\056\uff84\057\uff84\061\uff84\062\uff84" +
    "\063\uff84\064\uff84\067\uff84\071\uff84\072\uff84\073\uff84\076" +
    "\uff84\001\002\000\070\003\uff79\010\uff79\012\uff79\013\uff79" +
    "\014\uff79\015\uff79\023\uff79\024\uff79\025\uff79\026\uff79\027" +
    "\uff79\036\uff79\037\uff79\040\uff79\054\uff79\055\uff79\056\uff79" +
    "\057\uff79\061\uff79\062\uff79\063\uff79\064\uff79\067\uff79\071" +
    "\uff79\072\uff79\073\uff79\076\uff79\001\002\000\064\003\uff8b" +
    "\010\uff8b\012\uff8b\013\uff8b\014\uff8b\015\uff8b\023\uff8b\024" +
    "\uff8b\025\uff8b\026\uff8b\027\uff8b\036\uff8b\037\uff8b\040\uff8b" +
    "\054\uff8b\055\uff8b\061\uff8b\062\uff8b\063\uff8b\064\uff8b\067" +
    "\uff8b\071\uff8b\072\uff8b\073\uff8b\076\uff8b\001\002\000\064" +
    "\003\uff85\010\uff85\012\uff85\013\uff85\014\uff85\015\uff85\023" +
    "\uff85\024\uff85\025\uff85\026\uff85\027\uff85\036\uff85\037\uff85" +
    "\040\uff85\054\125\055\123\061\uff85\062\uff85\063\uff85\064" +
    "\uff85\067\uff85\071\uff85\072\uff85\073\uff85\076\uff85\001\002" +
    "\000\016\003\115\033\111\055\114\066\116\074\113\076" +
    "\120\001\002\000\060\003\uff8a\010\uff8a\012\uff8a\013\uff8a" +
    "\014\uff8a\015\uff8a\023\uff8a\024\uff8a\025\uff8a\026\uff8a\027" +
    "\uff8a\036\uff8a\037\uff8a\040\uff8a\061\uff8a\062\uff8a\063\uff8a" +
    "\064\uff8a\067\uff8a\071\uff8a\072\uff8a\073\uff8a\076\uff8a\001" +
    "\002\000\016\003\115\033\111\055\114\066\116\074\113" +
    "\076\120\001\002\000\064\003\uff89\010\uff89\012\uff89\013" +
    "\uff89\014\uff89\015\uff89\023\uff89\024\uff89\025\uff89\026\uff89" +
    "\027\uff89\036\uff89\037\uff89\040\uff89\054\uff89\055\uff89\061" +
    "\uff89\062\uff89\063\uff89\064\uff89\067\uff89\071\uff89\072\uff89" +
    "\073\uff89\076\uff89\001\002\000\064\003\uff85\010\uff85\012" +
    "\uff85\013\uff85\014\uff85\015\uff85\023\uff85\024\uff85\025\uff85" +
    "\026\uff85\027\uff85\036\uff85\037\uff85\040\uff85\054\125\055" +
    "\123\061\uff85\062\uff85\063\uff85\064\uff85\067\uff85\071\uff85" +
    "\072\uff85\073\uff85\076\uff85\001\002\000\060\003\uff88\010" +
    "\uff88\012\uff88\013\uff88\014\uff88\015\uff88\023\uff88\024\uff88" +
    "\025\uff88\026\uff88\027\uff88\036\uff88\037\uff88\040\uff88\061" +
    "\uff88\062\uff88\063\uff88\064\uff88\067\uff88\071\uff88\072\uff88" +
    "\073\uff88\076\uff88\001\002\000\064\003\uff87\010\uff87\012" +
    "\uff87\013\uff87\014\uff87\015\uff87\023\uff87\024\uff87\025\uff87" +
    "\026\uff87\027\uff87\036\uff87\037\uff87\040\uff87\054\uff87\055" +
    "\uff87\061\uff87\062\uff87\063\uff87\064\uff87\067\uff87\071\uff87" +
    "\072\uff87\073\uff87\076\uff87\001\002\000\064\003\uff85\010" +
    "\uff85\012\uff85\013\uff85\014\uff85\015\uff85\023\uff85\024\uff85" +
    "\025\uff85\026\uff85\027\uff85\036\uff85\037\uff85\040\uff85\054" +
    "\125\055\123\061\uff85\062\uff85\063\uff85\064\uff85\067\uff85" +
    "\071\uff85\072\uff85\073\uff85\076\uff85\001\002\000\060\003" +
    "\uff86\010\uff86\012\uff86\013\uff86\014\uff86\015\uff86\023\uff86" +
    "\024\uff86\025\uff86\026\uff86\027\uff86\036\uff86\037\uff86\040" +
    "\uff86\061\uff86\062\uff86\063\uff86\064\uff86\067\uff86\071\uff86" +
    "\072\uff86\073\uff86\076\uff86\001\002\000\070\003\uff7e\010" +
    "\uff7e\012\uff7e\013\uff7e\014\uff7e\015\uff7e\023\uff7e\024\uff7e" +
    "\025\uff7e\026\uff7e\027\uff7e\036\uff7e\037\uff7e\040\uff7e\054" +
    "\uff7e\055\uff7e\056\137\057\136\061\uff7e\062\uff7e\063\uff7e" +
    "\064\uff7e\067\uff7e\071\uff7e\072\uff7e\073\uff7e\076\uff7e\001" +
    "\002\000\064\003\uff83\010\uff83\012\uff83\013\uff83\014\uff83" +
    "\015\uff83\023\uff83\024\uff83\025\uff83\026\uff83\027\uff83\036" +
    "\uff83\037\uff83\040\uff83\054\uff83\055\uff83\061\uff83\062\uff83" +
    "\063\uff83\064\uff83\067\uff83\071\uff83\072\uff83\073\uff83\076" +
    "\uff83\001\002\000\016\003\115\033\111\055\114\066\116" +
    "\074\113\076\120\001\002\000\016\003\115\033\111\055" +
    "\114\066\116\074\113\076\120\001\002\000\070\003\uff82" +
    "\010\uff82\012\uff82\013\uff82\014\uff82\015\uff82\023\uff82\024" +
    "\uff82\025\uff82\026\uff82\027\uff82\036\uff82\037\uff82\040\uff82" +
    "\054\uff82\055\uff82\056\uff82\057\uff82\061\uff82\062\uff82\063" +
    "\uff82\064\uff82\067\uff82\071\uff82\072\uff82\073\uff82\076\uff82" +
    "\001\002\000\070\003\uff7e\010\uff7e\012\uff7e\013\uff7e\014" +
    "\uff7e\015\uff7e\023\uff7e\024\uff7e\025\uff7e\026\uff7e\027\uff7e" +
    "\036\uff7e\037\uff7e\040\uff7e\054\uff7e\055\uff7e\056\137\057" +
    "\136\061\uff7e\062\uff7e\063\uff7e\064\uff7e\067\uff7e\071\uff7e" +
    "\072\uff7e\073\uff7e\076\uff7e\001\002\000\064\003\uff81\010" +
    "\uff81\012\uff81\013\uff81\014\uff81\015\uff81\023\uff81\024\uff81" +
    "\025\uff81\026\uff81\027\uff81\036\uff81\037\uff81\040\uff81\054" +
    "\uff81\055\uff81\061\uff81\062\uff81\063\uff81\064\uff81\067\uff81" +
    "\071\uff81\072\uff81\073\uff81\076\uff81\001\002\000\070\003" +
    "\uff80\010\uff80\012\uff80\013\uff80\014\uff80\015\uff80\023\uff80" +
    "\024\uff80\025\uff80\026\uff80\027\uff80\036\uff80\037\uff80\040" +
    "\uff80\054\uff80\055\uff80\056\uff80\057\uff80\061\uff80\062\uff80" +
    "\063\uff80\064\uff80\067\uff80\071\uff80\072\uff80\073\uff80\076" +
    "\uff80\001\002\000\070\003\uff7e\010\uff7e\012\uff7e\013\uff7e" +
    "\014\uff7e\015\uff7e\023\uff7e\024\uff7e\025\uff7e\026\uff7e\027" +
    "\uff7e\036\uff7e\037\uff7e\040\uff7e\054\uff7e\055\uff7e\056\137" +
    "\057\136\061\uff7e\062\uff7e\063\uff7e\064\uff7e\067\uff7e\071" +
    "\uff7e\072\uff7e\073\uff7e\076\uff7e\001\002\000\064\003\uff7f" +
    "\010\uff7f\012\uff7f\013\uff7f\014\uff7f\015\uff7f\023\uff7f\024" +
    "\uff7f\025\uff7f\026\uff7f\027\uff7f\036\uff7f\037\uff7f\040\uff7f" +
    "\054\uff7f\055\uff7f\061\uff7f\062\uff7f\063\uff7f\064\uff7f\067" +
    "\uff7f\071\uff7f\072\uff7f\073\uff7f\076\uff7f\001\002\000\004" +
    "\067\147\001\002\000\070\003\uff76\010\uff76\012\uff76\013" +
    "\uff76\014\uff76\015\uff76\023\uff76\024\uff76\025\uff76\026\uff76" +
    "\027\uff76\036\uff76\037\uff76\040\uff76\054\uff76\055\uff76\056" +
    "\uff76\057\uff76\061\uff76\062\uff76\063\uff76\064\uff76\067\uff76" +
    "\071\uff76\072\uff76\073\uff76\076\uff76\001\002\000\070\003" +
    "\uff7c\010\uff7c\012\uff7c\013\uff7c\014\uff7c\015\uff7c\023\uff7c" +
    "\024\uff7c\025\uff7c\026\uff7c\027\uff7c\036\uff7c\037\uff7c\040" +
    "\uff7c\054\uff7c\055\uff7c\056\uff7c\057\uff7c\061\uff7c\062\uff7c" +
    "\063\uff7c\064\uff7c\067\uff7c\071\uff7c\072\uff7c\073\uff7c\076" +
    "\uff7c\001\002\000\070\003\uff78\010\uff78\012\uff78\013\uff78" +
    "\014\uff78\015\uff78\023\uff78\024\uff78\025\uff78\026\uff78\027" +
    "\uff78\036\uff78\037\uff78\040\uff78\054\uff78\055\uff78\056\uff78" +
    "\057\uff78\061\uff78\062\uff78\063\uff78\064\uff78\067\uff78\071" +
    "\uff78\072\uff78\073\uff78\076\uff78\001\002\000\070\003\uff77" +
    "\010\uff77\012\uff77\013\uff77\014\uff77\015\uff77\023\uff77\024" +
    "\uff77\025\uff77\026\uff77\027\uff77\036\uff77\037\uff77\040\uff77" +
    "\054\uff77\055\uff77\056\uff77\057\uff77\061\uff77\062\uff77\063" +
    "\uff77\064\uff77\067\uff77\071\uff77\072\uff77\073\uff77\076\uff77" +
    "\001\002\000\052\003\uff64\010\uff64\012\uff64\013\uff64\014" +
    "\uff64\015\uff64\026\uff64\027\uff64\036\uff64\037\uff64\040\uff64" +
    "\061\uff64\062\uff64\063\uff64\064\uff64\067\uff64\071\uff64\072" +
    "\uff64\073\uff64\076\uff64\001\002\000\052\003\uff67\010\uff67" +
    "\012\uff67\013\uff67\014\uff67\015\uff67\026\uff67\027\uff67\036" +
    "\uff67\037\uff67\040\uff67\061\uff67\062\uff67\063\uff67\064\uff67" +
    "\067\uff67\071\uff67\072\uff67\073\uff67\076\uff67\001\002\000" +
    "\052\003\uff68\010\uff68\012\uff68\013\uff68\014\uff68\015\uff68" +
    "\026\uff68\027\uff68\036\uff68\037\uff68\040\uff68\061\uff68\062" +
    "\uff68\063\uff68\064\uff68\067\uff68\071\uff68\072\uff68\073\uff68" +
    "\076\uff68\001\002\000\052\003\uff65\010\uff65\012\uff65\013" +
    "\uff65\014\uff65\015\uff65\026\uff65\027\uff65\036\uff65\037\uff65" +
    "\040\uff65\061\uff65\062\uff65\063\uff65\064\uff65\067\uff65\071" +
    "\uff65\072\uff65\073\uff65\076\uff65\001\002\000\052\003\uff66" +
    "\010\uff66\012\uff66\013\uff66\014\uff66\015\uff66\026\uff66\027" +
    "\uff66\036\uff66\037\uff66\040\uff66\061\uff66\062\uff66\063\uff66" +
    "\064\uff66\067\uff66\071\uff66\072\uff66\073\uff66\076\uff66\001" +
    "\002\000\004\067\161\001\002\000\052\003\uff5b\010\uff5b" +
    "\012\uff5b\013\uff5b\014\uff5b\015\uff5b\026\uff5b\027\uff5b\036" +
    "\uff5b\037\uff5b\040\uff5b\061\uff5b\062\uff5b\063\uff5b\064\uff5b" +
    "\067\uff5b\071\uff5b\072\uff5b\073\uff5b\076\uff5b\001\002\000" +
    "\016\046\uff5e\047\uff5e\050\uff5e\051\uff5e\052\uff5e\053\uff5e" +
    "\001\002\000\016\046\uff62\047\uff62\050\uff62\051\uff62\052" +
    "\uff62\053\uff62\001\002\000\016\046\uff6a\047\uff6a\050\uff6a" +
    "\051\uff6a\052\uff6a\053\uff6a\001\002\000\016\046\103\047" +
    "\104\050\101\051\102\052\105\053\107\001\002\000\052" +
    "\003\uff69\010\uff69\012\uff69\013\uff69\014\uff69\015\uff69\026" +
    "\uff69\027\uff69\036\uff69\037\uff69\040\uff69\061\uff69\062\uff69" +
    "\063\uff69\064\uff69\067\uff69\071\uff69\072\uff69\073\uff69\076" +
    "\uff69\001\002\000\052\003\uff6d\010\uff6d\012\uff6d\013\uff6d" +
    "\014\uff6d\015\uff6d\026\uff6d\027\uff6d\036\uff6d\037\uff6d\040" +
    "\uff6d\061\171\062\172\063\uff6d\064\uff6d\067\uff6d\071\uff6d" +
    "\072\uff6d\073\uff6d\076\uff6d\001\002\000\046\003\uff70\010" +
    "\uff70\012\uff70\013\uff70\014\uff70\015\uff70\026\uff70\027\uff70" +
    "\036\uff70\037\uff70\040\uff70\063\uff70\064\uff70\067\uff70\071" +
    "\uff70\072\uff70\073\uff70\076\uff70\001\002\000\024\003\063" +
    "\033\054\042\066\055\062\060\070\066\064\074\061\075" +
    "\057\076\067\001\002\000\024\003\063\033\054\042\066" +
    "\055\062\060\070\066\064\074\061\075\057\076\067\001" +
    "\002\000\046\003\uff6e\010\uff6e\012\uff6e\013\uff6e\014\uff6e" +
    "\015\uff6e\026\uff6e\027\uff6e\036\uff6e\037\uff6e\040\uff6e\063" +
    "\uff6e\064\uff6e\067\uff6e\071\uff6e\072\uff6e\073\uff6e\076\uff6e" +
    "\001\002\000\046\003\uff6f\010\uff6f\012\uff6f\013\uff6f\014" +
    "\uff6f\015\uff6f\026\uff6f\027\uff6f\036\uff6f\037\uff6f\040\uff6f" +
    "\063\uff6f\064\uff6f\067\uff6f\071\uff6f\072\uff6f\073\uff6f\076" +
    "\uff6f\001\002\000\004\070\176\001\002\000\040\003\037" +
    "\010\043\012\022\013\042\014\032\015\023\026\030\027" +
    "\024\036\044\037\033\040\034\063\035\064\036\071\uffa1" +
    "\076\040\001\002\000\004\071\200\001\002\000\042\003" +
    "\uff75\010\uff75\011\202\012\uff75\013\uff75\014\uff75\015\uff75" +
    "\026\uff75\027\uff75\036\uff75\037\uff75\040\uff75\063\uff75\064" +
    "\uff75\071\uff75\076\uff75\001\002\000\040\003\uff74\010\uff74" +
    "\012\uff74\013\uff74\014\uff74\015\uff74\026\uff74\027\uff74\036" +
    "\uff74\037\uff74\040\uff74\063\uff74\064\uff74\071\uff74\076\uff74" +
    "\001\002\000\006\010\203\070\204\001\002\000\004\066" +
    "\053\001\002\000\040\003\037\010\043\012\022\013\042" +
    "\014\032\015\023\026\030\027\024\036\044\037\033\040" +
    "\034\063\035\064\036\071\uffa1\076\040\001\002\000\004" +
    "\071\206\001\002\000\040\003\uff56\010\uff56\012\uff56\013" +
    "\uff56\014\uff56\015\uff56\026\uff56\027\uff56\036\uff56\037\uff56" +
    "\040\uff56\063\uff56\064\uff56\071\uff56\076\uff56\001\002\000" +
    "\040\003\uff57\010\uff57\012\uff57\013\uff57\014\uff57\015\uff57" +
    "\026\uff57\027\uff57\036\uff57\037\uff57\040\uff57\063\uff57\064" +
    "\uff57\071\uff57\076\uff57\001\002\000\052\003\uff6d\010\uff6d" +
    "\012\uff6d\013\uff6d\014\uff6d\015\uff6d\026\uff6d\027\uff6d\036" +
    "\uff6d\037\uff6d\040\uff6d\061\171\062\172\063\uff6d\064\uff6d" +
    "\067\uff6d\071\uff6d\072\uff6d\073\uff6d\076\uff6d\001\002\000" +
    "\046\003\uff72\010\uff72\012\uff72\013\uff72\014\uff72\015\uff72" +
    "\026\uff72\027\uff72\036\uff72\037\uff72\040\uff72\063\uff72\064" +
    "\uff72\067\uff72\071\uff72\072\uff72\073\uff72\076\uff72\001\002" +
    "\000\016\046\uff60\047\uff60\050\uff60\051\uff60\052\uff60\053" +
    "\uff60\001\002\000\016\046\uff5f\047\uff5f\050\uff5f\051\uff5f" +
    "\052\uff5f\053\uff5f\001\002\000\004\071\uffd3\001\002\000" +
    "\024\003\063\033\054\042\066\055\062\060\070\066\064" +
    "\074\061\075\057\076\067\001\002\000\004\073\217\001" +
    "\002\000\004\022\221\001\002\000\004\073\230\001\002" +
    "\000\016\003\115\033\111\055\114\066\116\074\113\076" +
    "\120\001\002\000\012\003\224\023\227\024\223\025\225" +
    "\001\002\000\046\003\uff9c\010\uff9c\012\uff9c\013\uff9c\014" +
    "\uff9c\015\uff9c\026\uff9c\027\uff9c\036\uff9c\037\uff9c\040\uff9c" +
    "\063\uff9c\064\uff9c\067\uff9c\071\uff9c\072\uff9c\073\uff9c\076" +
    "\uff9c\001\002\000\046\003\uff9a\010\uff9a\012\uff9a\013\uff9a" +
    "\014\uff9a\015\uff9a\026\uff9a\027\uff9a\036\uff9a\037\uff9a\040" +
    "\uff9a\063\uff9a\064\uff9a\067\uff9a\071\uff9a\072\uff9a\073\uff9a" +
    "\076\uff9a\001\002\000\046\003\uff9b\010\uff9b\012\uff9b\013" +
    "\uff9b\014\uff9b\015\uff9b\026\uff9b\027\uff9b\036\uff9b\037\uff9b" +
    "\040\uff9b\063\uff9b\064\uff9b\067\uff9b\071\uff9b\072\uff9b\073" +
    "\uff9b\076\uff9b\001\002\000\044\003\uff9e\010\uff9e\012\uff9e" +
    "\013\uff9e\014\uff9e\015\uff9e\026\uff9e\027\uff9e\036\uff9e\037" +
    "\uff9e\040\uff9e\063\uff9e\064\uff9e\071\uff9e\072\uff9e\073\uff9e" +
    "\076\uff9e\001\002\000\046\003\uff9d\010\uff9d\012\uff9d\013" +
    "\uff9d\014\uff9d\015\uff9d\026\uff9d\027\uff9d\036\uff9d\037\uff9d" +
    "\040\uff9d\063\uff9d\064\uff9d\067\uff9d\071\uff9d\072\uff9d\073" +
    "\uff9d\076\uff9d\001\002\000\024\003\063\033\054\042\066" +
    "\055\062\060\070\066\064\074\061\075\057\076\067\001" +
    "\002\000\004\067\232\001\002\000\042\003\uff54\010\uff54" +
    "\012\uff54\013\uff54\014\uff54\015\uff54\026\uff54\027\uff54\036" +
    "\uff54\037\uff54\040\uff54\063\uff54\064\uff54\071\uff54\072\uff54" +
    "\076\uff54\001\002\000\042\003\uffd8\010\uffd8\012\uffd8\013" +
    "\uffd8\014\uffd8\015\uffd8\026\uffd8\027\uffd8\036\uffd8\037\uffd8" +
    "\040\uffd8\063\uffd8\064\uffd8\071\uffd8\072\uffda\076\uffd8\001" +
    "\002\000\006\044\241\045\243\001\002\000\040\003\037" +
    "\010\043\012\022\013\042\014\032\015\023\026\030\027" +
    "\024\036\044\037\033\040\034\063\035\064\036\071\uffa1" +
    "\076\040\001\002\000\040\003\037\010\043\012\022\013" +
    "\042\014\032\015\023\026\030\027\024\036\044\037\033" +
    "\040\034\063\035\064\036\071\uffa1\076\040\001\002\000" +
    "\004\071\uffdb\001\002\000\004\071\uffdd\001\002\000\016" +
    "\003\115\033\111\055\114\066\116\074\113\076\120\001" +
    "\002\000\042\003\uff90\010\uff90\012\uff90\013\uff90\014\uff90" +
    "\015\uff90\026\uff90\027\uff90\036\uff90\037\uff90\040\uff90\063" +
    "\uff90\064\uff90\071\uff90\072\uff90\076\uff90\001\002\000\024" +
    "\003\063\033\054\042\066\055\062\060\070\066\064\074" +
    "\061\075\057\076\067\001\002\000\042\003\uff95\010\uff95" +
    "\012\uff95\013\uff95\014\uff95\015\uff95\026\uff95\027\uff95\036" +
    "\uff95\037\uff95\040\uff95\063\uff95\064\uff95\071\uff95\072\uff95" +
    "\076\uff95\001\002\000\042\003\uff96\010\uff96\012\uff96\013" +
    "\uff96\014\uff96\015\uff96\026\uff96\027\uff96\036\uff96\037\uff96" +
    "\040\uff96\063\uff96\064\uff96\071\uff96\072\uff96\076\uff96\001" +
    "\002\000\040\003\037\010\043\012\022\013\042\014\032" +
    "\015\023\026\030\027\024\036\044\037\033\040\034\063" +
    "\035\064\036\071\uffa1\076\040\001\002\000\004\072\250" +
    "\001\002\000\040\003\037\010\043\012\022\013\042\014" +
    "\032\015\023\026\030\027\024\036\044\037\033\040\034" +
    "\063\035\064\036\071\uffa1\076\040\001\002\000\004\071" +
    "\uffd9\001\002\000\004\071\uffd7\001\002\000\042\003\uffeb" +
    "\010\uffeb\012\uffeb\013\uffeb\014\uffeb\015\uffeb\026\uffeb\027" +
    "\uffeb\036\uffeb\037\uffeb\040\uffeb\063\uffeb\064\uffeb\071\uffeb" +
    "\072\uffed\076\uffeb\001\002\000\004\017\266\001\002\000" +
    "\004\065\264\001\002\000\042\003\uffe7\010\uffe7\012\uffe7" +
    "\013\uffe7\014\uffe7\015\uffe7\026\uffe7\027\uffe7\036\uffe7\037" +
    "\uffe7\040\uffe7\063\uffe7\064\uffe7\071\uffe7\072\uffe9\076\uffe7" +
    "\001\002\000\004\072\262\001\002\000\040\003\037\010" +
    "\043\012\022\013\042\014\032\015\023\026\030\027\024" +
    "\036\044\037\033\040\034\063\035\064\036\071\uffa1\076" +
    "\040\001\002\000\004\071\uffe6\001\002\000\040\003\037" +
    "\010\043\012\022\013\042\014\032\015\023\026\030\027" +
    "\024\036\044\037\033\040\034\063\035\064\036\071\uffa1" +
    "\076\040\001\002\000\004\071\uffe8\001\002\000\006\044" +
    "\241\045\243\001\002\000\042\003\uff93\010\uff93\012\uff93" +
    "\013\uff93\014\uff93\015\uff93\026\uff93\027\uff93\036\uff93\037" +
    "\uff93\040\uff93\063\uff93\064\uff93\071\uff93\072\uff93\076\uff93" +
    "\001\002\000\004\020\270\001\002\000\050\003\uff91\010" +
    "\uff91\012\uff91\013\uff91\014\uff91\015\uff91\026\uff91\027\uff91" +
    "\036\uff91\037\uff91\040\uff91\063\uff91\064\uff91\065\uff91\067" +
    "\uff91\071\uff91\072\uff91\073\uff91\076\uff91\001\002\000\010" +
    "\003\272\006\274\007\273\001\002\000\050\003\uff8f\010" +
    "\uff8f\012\uff8f\013\uff8f\014\uff8f\015\uff8f\026\uff8f\027\uff8f" +
    "\036\uff8f\037\uff8f\040\uff8f\063\uff8f\064\uff8f\065\uff8f\067" +
    "\uff8f\071\uff8f\072\uff8f\073\uff8f\076\uff8f\001\002\000\050" +
    "\003\uff8c\010\uff8c\012\uff8c\013\uff8c\014\uff8c\015\uff8c\026" +
    "\uff8c\027\uff8c\036\uff8c\037\uff8c\040\uff8c\063\uff8c\064\uff8c" +
    "\065\uff8c\067\uff8c\071\uff8c\072\uff8c\073\uff8c\076\uff8c\001" +
    "\002\000\050\003\uff8d\010\uff8d\012\uff8d\013\uff8d\014\uff8d" +
    "\015\uff8d\026\uff8d\027\uff8d\036\uff8d\037\uff8d\040\uff8d\063" +
    "\uff8d\064\uff8d\065\uff8d\067\uff8d\071\uff8d\072\uff8d\073\uff8d" +
    "\076\uff8d\001\002\000\050\003\uff8e\010\uff8e\012\uff8e\013" +
    "\uff8e\014\uff8e\015\uff8e\026\uff8e\027\uff8e\036\uff8e\037\uff8e" +
    "\040\uff8e\063\uff8e\064\uff8e\065\uff8e\067\uff8e\071\uff8e\072" +
    "\uff8e\073\uff8e\076\uff8e\001\002\000\040\003\037\010\043" +
    "\012\022\013\042\014\032\015\023\026\030\027\024\036" +
    "\044\037\033\040\034\063\035\064\036\071\uffa1\076\040" +
    "\001\002\000\004\072\277\001\002\000\040\003\037\010" +
    "\043\012\022\013\042\014\032\015\023\026\030\027\024" +
    "\036\044\037\033\040\034\063\035\064\036\071\uffa1\076" +
    "\040\001\002\000\004\071\uffec\001\002\000\004\071\uffea" +
    "\001\002\000\004\072\305\001\002\000\040\003\037\010" +
    "\043\012\022\013\042\014\032\015\023\026\030\027\024" +
    "\036\044\037\033\040\034\063\035\064\036\071\uffa1\076" +
    "\040\001\002\000\004\071\uffa4\001\002\000\040\003\037" +
    "\010\043\012\022\013\042\014\032\015\023\026\030\027" +
    "\024\036\044\037\033\040\034\063\035\064\036\071\uffa1" +
    "\076\040\001\002\000\004\071\uffa2\001\002\000\042\003" +
    "\uffdf\010\uffdf\012\uffdf\013\uffdf\014\uffdf\015\uffdf\026\uffdf" +
    "\027\uffdf\036\uffdf\037\uffdf\040\uffdf\063\uffdf\064\uffdf\071" +
    "\uffdf\072\uffe1\076\uffdf\001\002\000\040\003\037\010\043" +
    "\012\022\013\042\014\032\015\023\026\030\027\024\036" +
    "\044\037\033\040\034\063\035\064\036\071\uffa1\076\040" +
    "\001\002\000\004\072\312\001\002\000\040\003\037\010" +
    "\043\012\022\013\042\014\032\015\023\026\030\027\024" +
    "\036\044\037\033\040\034\063\035\064\036\071\uffa1\076" +
    "\040\001\002\000\004\071\uffe0\001\002\000\004\071\uffde" +
    "\001\002\000\042\003\uffe3\010\uffe3\012\uffe3\013\uffe3\014" +
    "\uffe3\015\uffe3\026\uffe3\027\uffe3\036\uffe3\037\uffe3\040\uffe3" +
    "\063\uffe3\064\uffe3\071\uffe3\072\uffe5\076\uffe3\001\002\000" +
    "\040\003\037\010\043\012\022\013\042\014\032\015\023" +
    "\026\030\027\024\036\044\037\033\040\034\063\035\064" +
    "\036\071\uffa1\076\040\001\002\000\004\072\320\001\002" +
    "\000\040\003\037\010\043\012\022\013\042\014\032\015" +
    "\023\026\030\027\024\036\044\037\033\040\034\063\035" +
    "\064\036\071\uffa1\076\040\001\002\000\004\071\uffe4\001" +
    "\002\000\004\071\uffe2\001\002\000\042\003\uffaa\010\uffaa" +
    "\012\uffaa\013\uffaa\014\uffaa\015\uffaa\026\uffaa\027\uffaa\036" +
    "\uffaa\037\uffaa\040\uffaa\063\uffaa\064\uffaa\071\uffaa\072\325" +
    "\076\uffaa\001\002\000\040\003\037\010\043\012\022\013" +
    "\042\014\032\015\023\026\030\027\024\036\044\037\033" +
    "\040\034\063\035\064\036\071\uffa1\076\040\001\002\000" +
    "\040\003\037\010\043\012\022\013\042\014\032\015\023" +
    "\026\030\027\024\036\044\037\033\040\034\063\035\064" +
    "\036\071\uffa1\076\040\001\002\000\004\071\uffab\001\002" +
    "\000\004\071\uffa9\001\002\000\042\003\uffc5\010\uffc5\012" +
    "\uffc5\013\uffc5\014\uffc5\015\uffc5\026\uffc5\027\uffc5\036\uffc5" +
    "\037\uffc5\040\uffc5\063\uffc5\064\uffc5\071\uffc5\072\331\076" +
    "\uffc5\001\002\000\040\003\037\010\043\012\022\013\042" +
    "\014\032\015\023\026\030\027\024\036\044\037\033\040" +
    "\034\063\035\064\036\071\uffa1\076\040\001\002\000\040" +
    "\003\037\010\043\012\022\013\042\014\032\015\023\026" +
    "\030\027\024\036\044\037\033\040\034\063\035\064\036" +
    "\071\uffa1\076\040\001\002\000\004\071\uffc4\001\002\000" +
    "\004\071\uffc6\001\002\000\042\003\uffa7\010\uffa7\012\uffa7" +
    "\013\uffa7\014\uffa7\015\uffa7\026\uffa7\027\uffa7\036\uffa7\037" +
    "\uffa7\040\uffa7\063\uffa7\064\uffa7\071\uffa7\072\337\076\uffa7" +
    "\001\002\000\040\003\037\010\043\012\022\013\042\014" +
    "\032\015\023\026\030\027\024\036\044\037\033\040\034" +
    "\063\035\064\036\071\uffa1\076\040\001\002\000\040\003" +
    "\037\010\043\012\022\013\042\014\032\015\023\026\030" +
    "\027\024\036\044\037\033\040\034\063\035\064\036\071" +
    "\uffa1\076\040\001\002\000\004\071\uffa8\001\002\000\004" +
    "\071\uffa6\001\002\000\040\003\037\010\043\012\022\013" +
    "\042\014\032\015\023\026\030\027\024\036\044\037\033" +
    "\040\034\063\035\064\036\071\uffa1\076\040\001\002\000" +
    "\040\003\037\010\043\012\022\013\042\014\032\015\023" +
    "\026\030\027\024\036\044\037\033\040\034\063\035\064" +
    "\036\071\uffa1\076\040\001\002\000\004\071\uffd2\001\002" +
    "\000\004\071\uffd0\001\002\000\006\022\221\032\363\001" +
    "\002\000\006\022\221\032\351\001\002\000\042\003\uffc2" +
    "\010\uffc2\012\uffc2\013\uffc2\014\uffc2\015\uffc2\026\uffc2\027" +
    "\uffc2\036\uffc2\037\uffc2\040\uffc2\063\uffc2\064\uffc2\071\uffc2" +
    "\072\356\076\uffc2\001\002\000\042\003\uffbf\010\uffbf\012" +
    "\uffbf\013\uffbf\014\uffbf\015\uffbf\026\uffbf\027\uffbf\036\uffbf" +
    "\037\uffbf\040\uffbf\063\uffbf\064\uffbf\071\uffbf\072\352\076" +
    "\uffbf\001\002\000\040\003\037\010\043\012\022\013\042" +
    "\014\032\015\023\026\030\027\024\036\044\037\033\040" +
    "\034\063\035\064\036\071\uffa1\076\040\001\002\000\040" +
    "\003\037\010\043\012\022\013\042\014\032\015\023\026" +
    "\030\027\024\036\044\037\033\040\034\063\035\064\036" +
    "\071\uffa1\076\040\001\002\000\004\071\uffbe\001\002\000" +
    "\004\071\uffc0\001\002\000\040\003\037\010\043\012\022" +
    "\013\042\014\032\015\023\026\030\027\024\036\044\037" +
    "\033\040\034\063\035\064\036\071\uffa1\076\040\001\002" +
    "\000\040\003\037\010\043\012\022\013\042\014\032\015" +
    "\023\026\030\027\024\036\044\037\033\040\034\063\035" +
    "\064\036\071\uffa1\076\040\001\002\000\004\071\uffc1\001" +
    "\002\000\004\071\uffc3\001\002\000\042\003\uffb6\010\uffb6" +
    "\012\uffb6\013\uffb6\014\uffb6\015\uffb6\026\uffb6\027\uffb6\036" +
    "\uffb6\037\uffb6\040\uffb6\063\uffb6\064\uffb6\071\uffb6\072\370" +
    "\076\uffb6\001\002\000\042\003\uffb3\010\uffb3\012\uffb3\013" +
    "\uffb3\014\uffb3\015\uffb3\026\uffb3\027\uffb3\036\uffb3\037\uffb3" +
    "\040\uffb3\063\uffb3\064\uffb3\071\uffb3\072\365\076\uffb3\001" +
    "\002\000\040\003\037\010\043\012\022\013\042\014\032" +
    "\015\023\026\030\027\024\036\044\037\033\040\034\063" +
    "\035\064\036\071\uffa1\076\040\001\002\000\040\003\037" +
    "\010\043\012\022\013\042\014\032\015\023\026\030\027" +
    "\024\036\044\037\033\040\034\063\035\064\036\071\uffa1" +
    "\076\040\001\002\000\004\071\uffb4\001\002\000\004\071" +
    "\uffb2\001\002\000\040\003\037\010\043\012\022\013\042" +
    "\014\032\015\023\026\030\027\024\036\044\037\033\040" +
    "\034\063\035\064\036\071\uffa1\076\040\001\002\000\040" +
    "\003\037\010\043\012\022\013\042\014\032\015\023\026" +
    "\030\027\024\036\044\037\033\040\034\063\035\064\036" +
    "\071\uffa1\076\040\001\002\000\004\071\uffb5\001\002\000" +
    "\004\071\uffb7\001\002\000\040\003\037\010\043\012\022" +
    "\013\042\014\032\015\023\026\030\027\024\036\044\037" +
    "\033\040\034\063\035\064\036\071\uffa1\076\040\001\002" +
    "\000\040\003\037\010\043\012\022\013\042\014\032\015" +
    "\023\026\030\027\024\036\044\037\033\040\034\063\035" +
    "\064\036\071\uffa1\076\040\001\002\000\004\071\uffd6\001" +
    "\002\000\004\071\uffd4\001\002\000\040\003\037\010\043" +
    "\012\022\013\042\014\032\015\023\026\030\027\024\036" +
    "\044\037\033\040\034\063\035\064\036\071\uffa1\076\040" +
    "\001\002\000\040\003\037\010\043\012\022\013\042\014" +
    "\032\015\023\026\030\027\024\036\044\037\033\040\034" +
    "\063\035\064\036\071\uffa1\076\040\001\002\000\004\071" +
    "\uffcf\001\002\000\004\071\uffcd\001\002\000\010\003\u0106" +
    "\043\u0107\071\u0108\001\002\000\004\002\uffff\001\002\000" +
    "\006\004\ufff9\076\ufff6\001\002\000\004\076\u010a\001\002" +
    "\000\004\004\u0109\001\002\000\004\002\ufffa\001\002\000" +
    "\004\066\ufff4\001\002\000\010\003\u0106\043\u0107\071\u0108" +
    "\001\002\000\004\002\ufff7\001\002\000\004\066\u010e\001" +
    "\002\000\006\067\uffee\076\u0110\001\002\000\004\067\u0115" +
    "\001\002\000\004\017\uff92\001\002\000\006\067\uffef\073" +
    "\ufff1\001\002\000\004\073\u0113\001\002\000\006\067\uffee" +
    "\076\u0110\001\002\000\004\067\ufff0\001\002\000\004\070" +
    "\u0116\001\002\000\040\003\ufff3\010\ufff3\012\ufff3\013\ufff3" +
    "\014\ufff3\015\ufff3\026\ufff3\027\ufff3\036\ufff3\037\ufff3\040" +
    "\ufff3\063\ufff3\064\ufff3\071\ufff3\076\ufff3\001\002\000\040" +
    "\003\037\010\043\012\022\013\042\014\032\015\023\026" +
    "\030\027\024\036\044\037\033\040\034\063\035\064\036" +
    "\071\uffa1\076\040\001\002\000\004\071\u0119\001\002\000" +
    "\010\003\ufff2\043\ufff2\071\ufff2\001\002\000\004\004\u011e" +
    "\001\002\000\004\076\u010a\001\002\000\010\003\u0106\043" +
    "\u0107\071\u0108\001\002\000\004\002\ufff5\001\002\000\004" +
    "\002\ufff8\001\002\000\006\022\221\032\u012c\001\002\000" +
    "\006\022\221\032\u0122\001\002\000\042\003\uffbc\010\uffbc" +
    "\012\uffbc\013\uffbc\014\uffbc\015\uffbc\026\uffbc\027\uffbc\036" +
    "\uffbc\037\uffbc\040\uffbc\063\uffbc\064\uffbc\071\uffbc\072\u0127" +
    "\076\uffbc\001\002\000\042\003\uffb9\010\uffb9\012\uffb9\013" +
    "\uffb9\014\uffb9\015\uffb9\026\uffb9\027\uffb9\036\uffb9\037\uffb9" +
    "\040\uffb9\063\uffb9\064\uffb9\071\uffb9\072\u0123\076\uffb9\001" +
    "\002\000\040\003\037\010\043\012\022\013\042\014\032" +
    "\015\023\026\030\027\024\036\044\037\033\040\034\063" +
    "\035\064\036\071\uffa1\076\040\001\002\000\040\003\037" +
    "\010\043\012\022\013\042\014\032\015\023\026\030\027" +
    "\024\036\044\037\033\040\034\063\035\064\036\071\uffa1" +
    "\076\040\001\002\000\004\071\uffb8\001\002\000\004\071" +
    "\uffba\001\002\000\040\003\037\010\043\012\022\013\042" +
    "\014\032\015\023\026\030\027\024\036\044\037\033\040" +
    "\034\063\035\064\036\071\uffa1\076\040\001\002\000\040" +
    "\003\037\010\043\012\022\013\042\014\032\015\023\026" +
    "\030\027\024\036\044\037\033\040\034\063\035\064\036" +
    "\071\uffa1\076\040\001\002\000\004\071\uffbb\001\002\000" +
    "\004\071\uffbd\001\002\000\042\003\uffb0\010\uffb0\012\uffb0" +
    "\013\uffb0\014\uffb0\015\uffb0\026\uffb0\027\uffb0\036\uffb0\037" +
    "\uffb0\040\uffb0\063\uffb0\064\uffb0\071\uffb0\072\u0132\076\uffb0" +
    "\001\002\000\042\003\uffad\010\uffad\012\uffad\013\uffad\014" +
    "\uffad\015\uffad\026\uffad\027\uffad\036\uffad\037\uffad\040\uffad" +
    "\063\uffad\064\uffad\071\uffad\072\u012e\076\uffad\001\002\000" +
    "\040\003\037\010\043\012\022\013\042\014\032\015\023" +
    "\026\030\027\024\036\044\037\033\040\034\063\035\064" +
    "\036\071\uffa1\076\040\001\002\000\040\003\037\010\043" +
    "\012\022\013\042\014\032\015\023\026\030\027\024\036" +
    "\044\037\033\040\034\063\035\064\036\071\uffa1\076\040" +
    "\001\002\000\004\071\uffae\001\002\000\004\071\uffac\001" +
    "\002\000\040\003\037\010\043\012\022\013\042\014\032" +
    "\015\023\026\030\027\024\036\044\037\033\040\034\063" +
    "\035\064\036\071\uffa1\076\040\001\002\000\040\003\037" +
    "\010\043\012\022\013\042\014\032\015\023\026\030\027" +
    "\024\036\044\037\033\040\034\063\035\064\036\071\uffa1" +
    "\076\040\001\002\000\004\071\uffb1\001\002\000\004\071" +
    "\uffaf\001\002\000\040\003\037\010\043\012\022\013\042" +
    "\014\032\015\023\026\030\027\024\036\044\037\033\040" +
    "\034\063\035\064\036\071\uffa1\076\040\001\002\000\040" +
    "\003\037\010\043\012\022\013\042\014\032\015\023\026" +
    "\030\027\024\036\044\037\033\040\034\063\035\064\036" +
    "\071\uffa1\076\040\001\002\000\004\071\uffcc\001\002\000" +
    "\004\071\uffca\001\002\000\004\022\221\001\002\000\004" +
    "\073\u013b\001\002\000\024\003\063\033\054\042\066\055" +
    "\062\060\070\066\064\074\061\075\057\076\067\001\002" +
    "\000\004\073\u013d\001\002\000\024\003\063\033\054\042" +
    "\066\055\062\060\070\066\064\074\061\075\057\076\067" +
    "\001\002\000\004\067\u013f\001\002\000\042\003\uff55\010" +
    "\uff55\012\uff55\013\uff55\014\uff55\015\uff55\026\uff55\027\uff55" +
    "\036\uff55\037\uff55\040\uff55\063\uff55\064\uff55\071\uff55\072" +
    "\uff55\076\uff55\001\002\000\012\003\uffa0\023\uffa0\024\uffa0" +
    "\025\uffa0\001\002\000\012\003\224\023\227\024\223\025" +
    "\225\001\002\000\004\067\uff9f\001\002\000\040\003\037" +
    "\010\043\012\022\013\042\014\032\015\023\026\030\027" +
    "\024\036\044\037\033\040\034\063\035\064\036\071\uffa1" +
    "\076\040\001\002\000\004\071\u0145\001\002\000\010\003" +
    "\u0106\043\u0107\071\u0108\001\002\000\004\002\ufffd\001\002" +
    "\000\040\003\037\010\043\012\022\013\042\014\032\015" +
    "\023\026\030\027\024\036\044\037\033\040\034\063\035" +
    "\064\036\071\uffa1\076\040\001\002\000\004\071\u0149\001" +
    "\002\000\010\003\u0106\043\u0107\071\u0108\001\002\000\004" +
    "\002\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0148\000\004\002\005\001\001\000\004\043\u0146\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\042\u0142\001\001\000\004\041\011\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\004\016\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\003\024\010\030\011\025\016\026" +
    "\031\040\001\001\000\002\001\001\000\004\067\u0134\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\066\377" +
    "\001\001\000\004\064\373\001\001\000\002\001\001\000" +
    "\004\065\341\001\001\000\004\005\334\001\001\000\002" +
    "\001\001\000\004\005\322\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\104\302\105\301\001\001\000\006" +
    "\107\254\110\253\001\001\000\006\007\232\061\235\001" +
    "\001\000\002\001\001\000\004\032\051\001\001\000\002" +
    "\001\001\000\004\070\046\001\001\000\014\003\050\010" +
    "\030\011\025\016\026\031\040\001\001\000\014\003\047" +
    "\010\030\011\025\016\026\031\040\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\003\213\010\030\011\025" +
    "\016\026\031\040\001\001\000\012\021\064\033\055\034" +
    "\057\040\054\001\001\000\002\001\001\000\004\117\207" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\120" +
    "\166\001\001\000\002\001\001\000\004\021\163\001\001" +
    "\000\002\001\001\000\012\021\064\033\157\034\057\040" +
    "\054\001\001\000\004\121\077\001\001\000\004\012\074" +
    "\001\001\000\002\001\001\000\004\040\071\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\037\105\001\001\000\012\020\111\022\156" +
    "\024\120\026\116\001\001\000\012\020\111\022\155\024" +
    "\120\026\116\001\001\000\012\020\111\022\154\024\120" +
    "\026\116\001\001\000\012\020\111\022\153\024\120\026" +
    "\116\001\001\000\012\020\111\022\152\024\120\026\116" +
    "\001\001\000\002\001\001\000\012\020\111\022\107\024" +
    "\120\026\116\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\147\001" +
    "\001\000\002\001\001\000\012\020\111\022\145\024\120" +
    "\026\116\001\001\000\004\114\133\001\001\000\002\001" +
    "\001\000\004\111\121\001\001\000\004\023\123\001\001" +
    "\000\010\020\111\024\130\026\116\001\001\000\002\001" +
    "\001\000\010\020\111\024\125\026\116\001\001\000\004" +
    "\112\126\001\001\000\004\023\127\001\001\000\002\001" +
    "\001\000\004\113\131\001\001\000\004\023\132\001\001" +
    "\000\002\001\001\000\004\025\134\001\001\000\002\001" +
    "\001\000\006\020\111\026\142\001\001\000\006\020\111" +
    "\026\137\001\001\000\004\115\140\001\001\000\004\025" +
    "\141\001\001\000\002\001\001\000\004\116\143\001\001" +
    "\000\004\025\144\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\122\164\001\001\000\004\037\165\001\001" +
    "\000\002\001\001\000\004\036\167\001\001\000\002\001" +
    "\001\000\012\021\064\033\173\034\057\040\054\001\001" +
    "\000\012\021\064\033\172\034\057\040\054\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\003\176\010\030\011\025\016\026\031\040\001\001\000" +
    "\002\001\001\000\004\035\200\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\032\206\001\001\000\014\003" +
    "\204\010\030\011\025\016\026\031\040\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\036" +
    "\210\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\021\064\033\215\034" +
    "\057\040\054\001\001\000\002\001\001\000\004\005\217" +
    "\001\001\000\002\001\001\000\012\020\111\022\221\024" +
    "\120\026\116\001\001\000\004\006\225\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\021\064\033\230\034\057" +
    "\040\054\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\062\246\063\245\001\001\000\004\017\241\001\001" +
    "\000\014\003\237\010\030\011\025\016\026\031\040\001" +
    "\001\000\014\003\236\010\030\011\025\016\026\031\040" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\020" +
    "\111\022\244\024\120\026\116\001\001\000\002\001\001" +
    "\000\012\021\064\033\243\034\057\040\054\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\003\251\010\030" +
    "\011\025\016\026\031\040\001\001\000\002\001\001\000" +
    "\014\003\250\010\030\011\025\016\026\031\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\051\275\052" +
    "\274\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\053\256\054\257\001\001\000\002\001\001\000\014\003" +
    "\260\010\030\011\025\016\026\031\040\001\001\000\002" +
    "\001\001\000\014\003\262\010\030\011\025\016\026\031" +
    "\040\001\001\000\002\001\001\000\004\017\264\001\001" +
    "\000\002\001\001\000\004\027\266\001\001\000\002\001" +
    "\001\000\004\030\270\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\003" +
    "\300\010\030\011\025\016\026\031\040\001\001\000\002" +
    "\001\001\000\014\003\277\010\030\011\025\016\026\031" +
    "\040\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\003\303\010\030\011\025\016\026\031" +
    "\040\001\001\000\002\001\001\000\014\003\305\010\030" +
    "\011\025\016\026\031\040\001\001\000\002\001\001\000" +
    "\006\057\310\060\307\001\001\000\014\003\313\010\030" +
    "\011\025\016\026\031\040\001\001\000\002\001\001\000" +
    "\014\003\312\010\030\011\025\016\026\031\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\055\316\056" +
    "\315\001\001\000\014\003\321\010\030\011\025\016\026" +
    "\031\040\001\001\000\002\001\001\000\014\003\320\010" +
    "\030\011\025\016\026\031\040\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\102\323\001\001\000\014\003" +
    "\326\010\030\011\025\016\026\031\040\001\001\000\014" +
    "\003\325\010\030\011\025\016\026\031\040\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\071\331\001\001" +
    "\000\014\003\333\010\030\011\025\016\026\031\040\001" +
    "\001\000\014\003\332\010\030\011\025\016\026\031\040" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\103" +
    "\335\001\001\000\014\003\340\010\030\011\025\016\026" +
    "\031\040\001\001\000\014\003\337\010\030\011\025\016" +
    "\026\031\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\003\344\010\030\011\025\016\026\031\040\001" +
    "\001\000\014\003\343\010\030\011\025\016\026\031\040" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\361\001\001\000\004\005\347\001\001\000\004\072\356" +
    "\001\001\000\004\073\352\001\001\000\014\003\354\010" +
    "\030\011\025\016\026\031\040\001\001\000\014\003\353" +
    "\010\030\011\025\016\026\031\040\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\003\360\010\030\011\025" +
    "\016\026\031\040\001\001\000\014\003\357\010\030\011" +
    "\025\016\026\031\040\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\076\370\001\001\000\004\077\363\001" +
    "\001\000\014\003\366\010\030\011\025\016\026\031\040" +
    "\001\001\000\014\003\365\010\030\011\025\016\026\031" +
    "\040\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\003\372\010\030\011\025\016\026\031\040\001\001\000" +
    "\014\003\371\010\030\011\025\016\026\031\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\003\376\010" +
    "\030\011\025\016\026\031\040\001\001\000\014\003\375" +
    "\010\030\011\025\016\026\031\040\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\003\u0102\010\030\011\025" +
    "\016\026\031\040\001\001\000\014\003\u0101\010\030\011" +
    "\025\016\026\031\040\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\014\u0104\001\001\000\002\001\001\000" +
    "\006\044\u0119\045\u011a\001\001\000\004\013\u010a\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\046\u010c\001" +
    "\001\000\004\014\u010b\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\015\u010e\031\u0110\001\001\000\002\001" +
    "\001\000\004\110\253\001\001\000\004\050\u0111\001\001" +
    "\000\002\001\001\000\006\015\u0113\031\u0110\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\047\u0116\001\001" +
    "\000\014\003\u0117\010\030\011\025\016\026\031\040\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\u011b\001\001\000\004\014\u011c\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\u012a\001\001" +
    "\000\004\005\u0120\001\001\000\004\074\u0127\001\001\000" +
    "\004\075\u0123\001\001\000\014\003\u0125\010\030\011\025" +
    "\016\026\031\040\001\001\000\014\003\u0124\010\030\011" +
    "\025\016\026\031\040\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\003\u0129\010\030\011\025\016\026\031" +
    "\040\001\001\000\014\003\u0128\010\030\011\025\016\026" +
    "\031\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\100\u0130\001\001\000\004\101\u012c\001\001\000\014" +
    "\003\u012f\010\030\011\025\016\026\031\040\001\001\000" +
    "\014\003\u012e\010\030\011\025\016\026\031\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\003\u0133\010" +
    "\030\011\025\016\026\031\040\001\001\000\014\003\u0132" +
    "\010\030\011\025\016\026\031\040\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\003\u0137\010\030\011\025" +
    "\016\026\031\040\001\001\000\014\003\u0136\010\030\011" +
    "\025\016\026\031\040\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\u0139\001\001\000\002\001\001\000" +
    "\012\021\064\033\u013b\034\057\040\054\001\001\000\002" +
    "\001\001\000\012\021\064\033\u013d\034\057\040\054\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\106\u0140" +
    "\001\001\000\004\006\u0141\001\001\000\002\001\001\000" +
    "\014\003\u0143\010\030\011\025\016\026\031\040\001\001" +
    "\000\002\001\001\000\004\014\u0145\001\001\000\002\001" +
    "\001\000\014\003\u0147\010\030\011\025\016\026\031\040" +
    "\001\001\000\002\001\001\000\004\014\u0149\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintaxPrueba$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintaxPrueba$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintaxPrueba$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private String ambito;
    private Symbol s;
    private int valActual = 0, relActual = 0;
    private boolean logActual = false;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    private void reportarError(String codigo, String encontrado){
        if(this.s == null) this.s = cur_token;
        FrmPrincipal.errores.agregarErrorSintactico(codigo, s.left + 1, sym.terminalNames[s.sym], encontrado);
    }

    private void reportarErrorSemantico(String codigo, String... valores){
        if(this.s == null) this.s = cur_token;
        FrmPrincipal.errores.agregarErrorSemantico(codigo, s.left + 1, valores);
    }

    public void report_fatal_error(String message, Object info){
        reportarError("ES8", null);
    }

    public SintaxPrueba(Lexer lexer){
        super(lexer);
    }

    private void ponerValor(String identificador, Object valor){
        String tipo = getTipo(identificador);
        if(tipo == null) {
            reportarErrorSemantico("ESM1", identificador);
            return;
        }

        if(tipo.equals("error")){
            reportarErrorSemantico("ESM6", identificador);
            return;
        }

        if(tipo.equals("logico") && !valor.getClass().getName().equals("java.lang.Boolean")){
            reportarErrorSemantico("ESM5", "entero", identificador, "logico");
            return;
        }

        if(tipo.equals("entero") && !valor.getClass().getName().equals("java.lang.Integer")){
            reportarErrorSemantico("ESM5", "logico", identificador, "entero");
            return;
        }
        FrmPrincipal.tablaSimbolos.agregarValor(new LlaveTabla(identificador, ambito), valor);
    }

    private void verificarIdentificador(String id, boolean declarando){
        if(!FrmPrincipal.tablaSimbolos.existe(new LlaveTabla(id, ambito)) && !declarando){
            reportarErrorSemantico("ESM1", id);
            agregarSimbolo(id, -1);
        }else if(FrmPrincipal.tablaSimbolos.existe(new LlaveTabla(id, ambito)) && declarando){
            reportarErrorSemantico("ESM4", id);
        }
    }

    private Object getValor(String identificador){
        return FrmPrincipal.tablaSimbolos.getValor(new LlaveTabla(identificador, ambito));
    }

    private String getTipo(String identificador){
        return FrmPrincipal.tablaSimbolos.getTipo(new LlaveTabla(identificador, ambito));
    }

    private void ponerTipoDato(String identificador, String tipo){
        FrmPrincipal.tablaSimbolos.agregarTipo(new LlaveTabla(identificador, ambito), tipo);
    }

    private void agregarSimbolo(String identificador, int linea){
        FrmPrincipal.tablaSimbolos.agregarSimbolo(new LlaveTabla(identificador, ambito), linea);
    }

    private void agregarFuncion(String id){
        FrmPrincipal.funciones.agregarFuncion(id);
    }

    private void agregarParametro(String parametro){
        FrmPrincipal.funciones.agregarParametro(ambito, new LlaveTabla(parametro, ambito));
    }

    private Integer validarEntero(String id){
        switch(getTipo(id)){
            case "logico" -> {
                reportarErrorSemantico("ESM2", id, "logico");
                return 0;
            }
            case "entero" -> {
                Object valor = getValor(id);
                if(getValor(id) == null){
                    reportarErrorSemantico("ESM3", id);
                    return 0;
                }
                return (int) valor;
            }
            default -> {
                reportarErrorSemantico("ESM2", id, "sin tipo");
                return 0;
            }
        }
    }

    private boolean validarLogico(String id){
        return false;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintaxPrueba$actions {
  private final SintaxPrueba parser;

  /** Constructor */
  CUP$SintaxPrueba$actions(SintaxPrueba parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintaxPrueba$do_action_part00000000(
    int                        CUP$SintaxPrueba$act_num,
    java_cup.runtime.lr_parser CUP$SintaxPrueba$parser,
    java.util.Stack            CUP$SintaxPrueba$stack,
    int                        CUP$SintaxPrueba$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintaxPrueba$result;

      /* select the action based on the action number */
      switch (CUP$SintaxPrueba$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		RESULT = start_val;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintaxPrueba$parser.done_parsing();
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;

            ambito = i;
            agregarFuncion(i);
        
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$0",31, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= INICIO IDENTIFICADOR NT$0 LLAVE_ABIERTA COMIENZO PARENTESIS_ABIERTO tiempo_cada PARENTESIS_CERRADO LLAVE_ABIERTA gramaticas LLAVE_CERRADA inicio_fin 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-9)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-10)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-10)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-10)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-11)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$1 ::= 
            {
              Object RESULT =null;

            reportarError("ES1", null);
            ambito="rutina_principal";
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$1",32, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // inicio ::= INICIO error NT$1 gramaticas LLAVE_CERRADA inicio_fin 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$2 ::= 
            {
              Object RESULT =null;

            reportarError("ES1", null);
            ambito = "rutina_principal";
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$2",33, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // inicio ::= error NT$2 gramaticas LLAVE_CERRADA inicio_fin 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // inicio_fin ::= LLAVE_CERRADA FIN 
            {
              Object RESULT =null;
		System.out.println("ANALISIS TERMINADO");
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("inicio_fin",10, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$3 ::= 
            {
              Object RESULT =null;
reportarError("ES1", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$3",34, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // inicio_fin ::= error NT$3 FIN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		System.out.println("ANALISIS TERMINADO");
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("inicio_fin",10, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // inicio_fin ::= FUNCION funcion inicio_fin 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("inicio_fin",10, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$4 ::= 
            {
              Object RESULT =null;
reportarError("ES1", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$4",35, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // inicio_fin ::= error NT$4 funcion inicio_fin 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("inicio_fin",10, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$5 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;

                                agregarFuncion(i);
                                ambito = i;
                            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$5",36, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$6 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-5)).value;

                
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$6",37, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // funcion ::= IDENTIFICADOR NT$5 PARENTESIS_ABIERTO parametros PARENTESIS_CERRADO LLAVE_ABIERTA NT$6 gramaticas LLAVE_CERRADA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-8)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-8)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("funcion",9, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-8)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$7 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
agregarParametro(i);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$7",38, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // parametros ::= declaracion_inicio NT$7 COMA parametros 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("parametros",11, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // parametros ::= declaracion_inicio 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		agregarParametro(i);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("parametros",11, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // parametros ::= 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("parametros",11, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$8 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

                verificarIdentificador(i, false);
                ponerValor(i, validarEntero(i) + 1);
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$8",39, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // gramaticas ::= IDENTIFICADOR INC NT$8 PUNTO_COMA gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$9 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

                reportarError("ES7", null);
                verificarIdentificador(i, false);
                ponerValor(i, validarEntero(i) + 1);
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$9",40, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // gramaticas ::= IDENTIFICADOR INC NT$9 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$10 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

                verificarIdentificador(i, false);
                ponerValor(i, validarEntero(i) - 1);
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$10",41, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // gramaticas ::= IDENTIFICADOR DEC NT$10 PUNTO_COMA gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$11 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

                reportarError("ES7", null);
                verificarIdentificador(i, false);
                ponerValor(i, validarEntero(i) - 1);
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$11",42, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // gramaticas ::= IDENTIFICADOR DEC NT$11 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$12 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;

                verificarIdentificador(i, false);
                ponerValor(i, validarEntero(i) + 1);
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$12",43, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // gramaticas ::= INC IDENTIFICADOR NT$12 PUNTO_COMA gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NT$13 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;

                reportarError("ES7", null);
                verificarIdentificador(i, false);
                ponerValor(i, validarEntero(i) + 1);
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$13",44, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // gramaticas ::= INC IDENTIFICADOR NT$13 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$14 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;

                verificarIdentificador(i, false);
                ponerValor(i, validarEntero(i) - 1);
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$14",45, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // gramaticas ::= DEC IDENTIFICADOR NT$14 PUNTO_COMA gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NT$15 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;

                reportarError("ES7", null);
                verificarIdentificador(i, false);
                ponerValor(i, validarEntero(i) - 1);
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$15",46, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // gramaticas ::= DEC IDENTIFICADOR NT$15 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // gramaticas ::= declaracion_inicio PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NT$16 ::= 
            {
              Object RESULT =null;
reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$16",47, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // gramaticas ::= declaracion_inicio NT$16 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // NT$17 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
ponerValor(i,v);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$17",48, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // gramaticas ::= declaracion_inicio declaracion_valor NT$17 PUNTO_COMA gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NT$18 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
reportarError("ES7", null);ponerValor(i,v);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$18",49, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // gramaticas ::= declaracion_inicio declaracion_valor NT$18 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // gramaticas ::= asignacion PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NT$19 ::= 
            {
              Object RESULT =null;
reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$19",50, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // gramaticas ::= asignacion NT$19 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // gramaticas ::= CONDICION condicion gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // gramaticas ::= ventilar PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // NT$20 ::= 
            {
              Object RESULT =null;
reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$20",51, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // gramaticas ::= ventilar NT$20 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // gramaticas ::= admitir PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // NT$21 ::= 
            {
              Object RESULT =null;
reportarError("ES7", null); 
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$21",52, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // gramaticas ::= admitir NT$21 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // gramaticas ::= SALIR PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // NT$22 ::= 
            {
              Object RESULT =null;
reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$22",53, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // gramaticas ::= SALIR NT$22 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // gramaticas ::= APAGAR LUCES PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NT$23 ::= 
            {
              Object RESULT =null;
reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$23",54, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // gramaticas ::= APAGAR LUCES NT$23 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // gramaticas ::= ENCENDER LUCES PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // NT$24 ::= 
            {
              Object RESULT =null;
reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$24",55, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // gramaticas ::= ENCENDER LUCES NT$24 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$24
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // gramaticas ::= ABRIR PUERTAS tiempo_por PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // NT$25 ::= 
            {
              Object RESULT =null;
reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$25",56, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // gramaticas ::= ABRIR PUERTAS tiempo_por NT$25 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$25
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // gramaticas ::= ABRIR PUERTAS MANTENER PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // NT$26 ::= 
            {
              Object RESULT =null;
reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$26",57, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // gramaticas ::= ABRIR PUERTAS MANTENER NT$26 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$26
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // gramaticas ::= CERRAR PUERTAS tiempo_por PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // NT$27 ::= 
            {
              Object RESULT =null;
reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$27",58, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // gramaticas ::= CERRAR PUERTAS tiempo_por NT$27 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$27
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // gramaticas ::= CERRAR PUERTAS MANTENER PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // NT$28 ::= 
            {
              Object RESULT =null;
reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$28",59, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // gramaticas ::= CERRAR PUERTAS MANTENER NT$28 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$28
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // gramaticas ::= ABRIR VENTANAS tiempo_por PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // NT$29 ::= 
            {
              Object RESULT =null;
reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$29",60, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // gramaticas ::= ABRIR VENTANAS tiempo_por NT$29 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$29
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // gramaticas ::= ABRIR VENTANAS MANTENER PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // NT$30 ::= 
            {
              Object RESULT =null;
reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$30",61, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // gramaticas ::= ABRIR VENTANAS MANTENER NT$30 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$30
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // gramaticas ::= CERRAR VENTANAS tiempo_por PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // NT$31 ::= 
            {
              Object RESULT =null;
reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$31",62, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // gramaticas ::= CERRAR VENTANAS tiempo_por NT$31 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$31
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // gramaticas ::= CERRAR VENTANAS MANTENER PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // NT$32 ::= 
            {
              Object RESULT =null;
reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$32",63, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // gramaticas ::= CERRAR VENTANAS MANTENER NT$32 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$32
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // gramaticas ::= SANITIZAR tiempo_por PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // NT$33 ::= 
            {
              Object RESULT =null;
reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$33",64, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // gramaticas ::= SANITIZAR tiempo_por NT$33 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$33
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // gramaticas ::= DISPENSAR tiempo_por PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // NT$34 ::= 
            {
              Object RESULT =null;
reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$34",65, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // gramaticas ::= DISPENSAR tiempo_por NT$34 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$34
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // NT$35 ::= 
            {
              Object RESULT =null;
reportarError("ES2", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$35",66, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // gramaticas ::= error NT$35 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$35
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // NT$36 ::= 
            {
              Object RESULT =null;
reportarError("ES2", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$36",67, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // gramaticas ::= error NT$36 PUNTO_COMA gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$36
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // gramaticas ::= 
            {
              Object RESULT =null;
		
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // NT$37 ::= 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$37",68, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // tiempo_cada ::= CADA NUMERO NT$37 unidad_tiempo 
            {
              Object RESULT =null;
              // propagate RESULT from NT$37
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("tiempo_cada",2, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // tiempo_por ::= POR op_aritmetica unidad_tiempo 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("tiempo_por",3, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // unidad_tiempo ::= SEG 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("unidad_tiempo",4, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // unidad_tiempo ::= MIN 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("unidad_tiempo",4, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // unidad_tiempo ::= HR 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("unidad_tiempo",4, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // unidad_tiempo ::= error 
            {
              Object RESULT =null;
		reportarError("ES3", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("unidad_tiempo",4, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // estado ::= LUCES 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("estado",8, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // estado ::= PUERTAS 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("estado",8, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // estado ::= VENTANAS 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("estado",8, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // expresion ::= A op_aritmetica 
            {
              Object RESULT =null;
		int oaleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int oaright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Integer oa = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=oa;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // expresion ::= B sentencia_booleana 
            {
              Object RESULT =null;
		int sbleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int sbright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Boolean sb = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=sb;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // NT$38 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;

                s = cur_token;
                verificarIdentificador(i, false);
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$38",69, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // asignacion ::= IDENTIFICADOR NT$38 ASIGNACION expresion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$38
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		ponerValor(i,e);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("asignacion",12, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // NT$39 ::= 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
s=cur_token;verificarIdentificador(i, true);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$39",70, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // declaracion_inicio ::= IDENTIFICADOR NT$39 DECLARAR declaracion_tipo_dato 
            {
              String RESULT =null;
              // propagate RESULT from NT$39
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		String td = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		
                        agregarSimbolo(i, cur_token.left+1);
                        ponerTipoDato(i,td);
                        System.out.println("Aqui hay error");
                        RESULT=i;
                    
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("declaracion_inicio",23, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // declaracion_valor ::= ASIGNACION expresion 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=e;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("declaracion_valor",5, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // declaracion_tipo_dato ::= COMO tipo_dato 
            {
              String RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		String td = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT = td;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("declaracion_tipo_dato",21, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // tipo_dato ::= ENTERO 
            {
              String RESULT =null;
		RESULT = "entero";
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("tipo_dato",22, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // tipo_dato ::= LOGICO 
            {
              String RESULT =null;
		RESULT = "logico";
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("tipo_dato",22, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // tipo_dato ::= error 
            {
              String RESULT =null;
		reportarError("ES4", null); RESULT = "error";
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("tipo_dato",22, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // NT$40 ::= 
            {
              Integer RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Integer v1 = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
RESULT=v1;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$40",71, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // op_aritmetica ::= op2 NT$40 op1 
            {
              Integer RESULT =null;
              // propagate RESULT from NT$40
                RESULT = (Integer) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).right;
		Integer v1 = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Integer v2 = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=v2; System.out.println("resultado= " + v2);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op_aritmetica",16, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // NT$41 ::= 
            {
              Integer RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Integer v = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
valActual+=v;RESULT=valActual;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$41",72, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // op1 ::= AR_SUMA op2 NT$41 op1 
            {
              Integer RESULT =null;
              // propagate RESULT from NT$41
                RESULT = (Integer) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).right;
		Integer v = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op1",17, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // NT$42 ::= 
            {
              Integer RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Integer v = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
valActual-=v;RESULT=valActual;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$42",73, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // op1 ::= AR_RESTA op2 NT$42 op1 
            {
              Integer RESULT =null;
              // propagate RESULT from NT$42
                RESULT = (Integer) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).right;
		Integer v = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op1",17, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // op1 ::= 
            {
              Integer RESULT =null;
		RESULT=valActual;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op1",17, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // NT$43 ::= 
            {
              Integer RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Integer v1 = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
RESULT=v1;valActual=v1;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$43",74, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // op2 ::= op4 NT$43 op3 
            {
              Integer RESULT =null;
              // propagate RESULT from NT$43
                RESULT = (Integer) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).right;
		Integer v1 = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Integer v2 = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=v2;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op2",18, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // NT$44 ::= 
            {
              Integer RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Integer v = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
valActual*=v;RESULT=valActual;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$44",75, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // op3 ::= AR_MULTIPLICACION op4 NT$44 op3 
            {
              Integer RESULT =null;
              // propagate RESULT from NT$44
                RESULT = (Integer) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).right;
		Integer v = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op3",19, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // NT$45 ::= 
            {
              Integer RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Integer v = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
valActual/=v;RESULT=valActual;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$45",76, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // op3 ::= AR_DIVISION op4 NT$45 op3 
            {
              Integer RESULT =null;
              // propagate RESULT from NT$45
                RESULT = (Integer) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).right;
		Integer v = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op3",19, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // op3 ::= 
            {
              Integer RESULT =null;
		RESULT=valActual;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op3",19, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // op4 ::= valores 
            {
              Integer RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Integer v = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=v;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op4",20, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // op4 ::= AR_RESTA valores 
            {
              Integer RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Integer v = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=-v;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op4",20, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // op4 ::= error 
            {
              Integer RESULT =null;
		reportarError("ES6", null);RESULT=0;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op4",20, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // valores ::= NUMERO 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=n;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("valores",14, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // valores ::= IDENTIFICADOR 
            {
              Integer RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		s=cur_token;verificarIdentificador(i, false);RESULT=validarEntero(i);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("valores",14, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // valores ::= OBTENER TEMPERATURA 
            {
              Integer RESULT =null;
		RESULT=0;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("valores",14, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // valores ::= OBTENER PERSONAS 
            {
              Integer RESULT =null;
		RESULT=0;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("valores",14, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // valores ::= PARENTESIS_ABIERTO op_aritmetica PARENTESIS_CERRADO 
            {
              Integer RESULT =null;
		int oaleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).left;
		int oaright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).right;
		Integer oa = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		RESULT=oa;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("valores",14, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // condicion ::= PARENTESIS_ABIERTO sentencia_booleana PARENTESIS_CERRADO LLAVE_ABIERTA gramaticas LLAVE_CERRADA 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("condicion",24, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // condicion ::= PARENTESIS_ABIERTO sentencia_booleana PARENTESIS_CERRADO LLAVE_ABIERTA gramaticas LLAVE_CERRADA sino 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("condicion",24, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // NT$46 ::= 
            {
              Boolean RESULT =null;
		int tlleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Boolean tl = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
logActual=tl;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$46",77, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // sentencia_booleana ::= terminal_logico NT$46 sb2 
            {
              Boolean RESULT =null;
              // propagate RESULT from NT$46
                RESULT = (Boolean) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int tlleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).right;
		Boolean tl = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Boolean r = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=r;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("sentencia_booleana",25, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // NT$47 ::= 
            {
              Boolean RESULT =null;
		int rbleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int rbright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Boolean rb = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
logActual=rb;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$47",78, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // sentencia_booleana ::= relacional_booleana NT$47 sb2 
            {
              Boolean RESULT =null;
              // propagate RESULT from NT$47
                RESULT = (Boolean) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int rbleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).left;
		int rbright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).right;
		Boolean rb = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Boolean r = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=r;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("sentencia_booleana",25, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // sb2 ::= LOGICO_AND sentencia_booleana 
            {
              Boolean RESULT =null;
		int sbleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int sbright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Boolean sb = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=logActual&&sb;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("sb2",28, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // sb2 ::= LOGICO_OR sentencia_booleana 
            {
              Boolean RESULT =null;
		int sbleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int sbright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Boolean sb = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=logActual||sb;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("sb2",28, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // sb2 ::= 
            {
              Boolean RESULT =null;
		RESULT=logActual;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("sb2",28, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // NT$48 ::= 
            {
              Boolean RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Integer v = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
relActual=v;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$48",79, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // relacional_booleana ::= valores_rel NT$48 rb2 
            {
              Boolean RESULT =null;
              // propagate RESULT from NT$48
                RESULT = (Boolean) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).right;
		Integer v = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Boolean r = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=r;System.out.println(r);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("relacional_booleana",26, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // NT$49 ::= 
            {
              Boolean RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Integer v = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
relActual=-v;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$49",80, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // relacional_booleana ::= AR_RESTA valores_rel NT$49 rb2 
            {
              Boolean RESULT =null;
              // propagate RESULT from NT$49
                RESULT = (Boolean) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).right;
		Integer v = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Boolean r = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=r;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("relacional_booleana",26, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // rb2 ::= REL_MENOR op_aritmetica 
            {
              Boolean RESULT =null;
		int oaleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int oaright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Integer oa = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=relActual<oa;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("rb2",29, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // rb2 ::= REL_MAYOR op_aritmetica 
            {
              Boolean RESULT =null;
		int oaleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int oaright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Integer oa = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=relActual>oa;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("rb2",29, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // rb2 ::= REL_MENOR_IGUAL op_aritmetica 
            {
              Boolean RESULT =null;
		int oaleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int oaright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Integer oa = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=relActual<=oa;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("rb2",29, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // rb2 ::= REL_MAYOR_IGUAL op_aritmetica 
            {
              Boolean RESULT =null;
		int oaleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int oaright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Integer oa = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=relActual>=oa;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("rb2",29, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // rb2 ::= REL_DIFERENTE op_aritmetica 
            {
              Boolean RESULT =null;
		int oaleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int oaright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Integer oa = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=relActual!=oa;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("rb2",29, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // rb2 ::= REL_IGUAL op_aritmetica 
            {
              Boolean RESULT =null;
		int oaleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int oaright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Integer oa = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=relActual==oa;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("rb2",29, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // valores_rel ::= IDENTIFICADOR 
            {
              Integer RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		validarEntero(i);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("valores_rel",15, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // valores_rel ::= NUMERO 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=n;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("valores_rel",15, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // valores_rel ::= OBTENER TEMPERATURA 
            {
              Integer RESULT =null;
		RESULT=0;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("valores_rel",15, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // valores_rel ::= OBTENER PERSONAS 
            {
              Integer RESULT =null;
		RESULT=0;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("valores_rel",15, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // valores_rel ::= error 
            {
              Integer RESULT =null;
		reportarError("ES6", null);RESULT=0;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("valores_rel",15, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // terminal_logico ::= IDENTIFICADOR 
            {
              Boolean RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		s=cur_token;verificarIdentificador(i, false);RESULT=validarLogico(i);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("terminal_logico",30, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // terminal_logico ::= OP_BOOLEANO 
            {
              Boolean RESULT =null;
		int obleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int obright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Boolean ob = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=ob;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("terminal_logico",30, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // terminal_logico ::= PARENTESIS_ABIERTO sentencia_booleana PARENTESIS_CERRADO 
            {
              Boolean RESULT =null;
		int sbleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).left;
		int sbright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).right;
		Boolean sb = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		RESULT=sb;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("terminal_logico",30, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // terminal_logico ::= ESTADO estado 
            {
              Boolean RESULT =null;
		RESULT=false;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("terminal_logico",30, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // terminal_logico ::= NEGACION terminal_logico 
            {
              Boolean RESULT =null;
		int tlleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Boolean tl = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT = !tl;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("terminal_logico",30, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // terminal_logico ::= error 
            {
              Boolean RESULT =null;
		reportarError("ES5", null); RESULT=false;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("terminal_logico",30, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // sino ::= SINO CONDICION condicion 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("sino",27, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // sino ::= SINO LLAVE_ABIERTA gramaticas LLAVE_CERRADA 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("sino",27, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // ventilar ::= VENTILAR PARENTESIS_ABIERTO tiempo_por COMA sentencia_booleana COMA sentencia_booleana PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("ventilar",6, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // admitir ::= ADMITIR PARENTESIS_ABIERTO sentencia_booleana COMA tiempo_por COMA sentencia_booleana PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("admitir",7, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintaxPrueba$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintaxPrueba$do_action(
    int                        CUP$SintaxPrueba$act_num,
    java_cup.runtime.lr_parser CUP$SintaxPrueba$parser,
    java.util.Stack            CUP$SintaxPrueba$stack,
    int                        CUP$SintaxPrueba$top)
    throws java.lang.Exception
    {
              return CUP$SintaxPrueba$do_action_part00000000(
                               CUP$SintaxPrueba$act_num,
                               CUP$SintaxPrueba$parser,
                               CUP$SintaxPrueba$stack,
                               CUP$SintaxPrueba$top);
    }
}

}
