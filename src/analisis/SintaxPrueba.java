
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analisis;

import java_cup.runtime.Symbol;
import codigo.FrmPrincipal;
import herramientas.ArbolSintactico;
import herramientas.NodoSintactico;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintaxPrueba extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public SintaxPrueba() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintaxPrueba(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintaxPrueba(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\236\000\002\002\004\000\002\034\002\000\002\035" +
    "\002\000\002\036\002\000\002\037\002\000\002\002\021" +
    "\000\002\040\002\000\002\002\010\000\002\041\002\000" +
    "\002\002\007\000\002\016\004\000\002\042\002\000\002" +
    "\016\005\000\002\043\002\000\002\016\006\000\002\044" +
    "\002\000\002\016\006\000\002\045\002\000\002\015\012" +
    "\000\002\017\005\000\002\017\003\000\002\017\002\000" +
    "\002\003\003\000\002\003\005\000\002\046\002\000\002" +
    "\003\005\000\002\003\005\000\002\047\002\000\002\003" +
    "\005\000\002\003\005\000\002\003\006\000\002\050\002" +
    "\000\002\003\006\000\002\003\006\000\002\051\002\000" +
    "\002\003\006\000\002\003\006\000\002\052\002\000\002" +
    "\003\006\000\002\003\005\000\002\053\002\000\002\003" +
    "\005\000\002\003\006\000\002\054\002\000\002\003\006" +
    "\000\002\003\006\000\002\055\002\000\002\003\006\000" +
    "\002\003\007\000\002\056\002\000\002\003\007\000\002" +
    "\003\007\000\002\057\002\000\002\003\007\000\002\003" +
    "\007\000\002\060\002\000\002\003\007\000\002\003\007" +
    "\000\002\061\002\000\002\003\007\000\002\003\007\000" +
    "\002\062\002\000\002\003\007\000\002\003\007\000\002" +
    "\063\002\000\002\003\007\000\002\003\007\000\002\064" +
    "\002\000\002\003\007\000\002\003\007\000\002\065\002" +
    "\000\002\003\007\000\002\003\006\000\002\066\002\000" +
    "\002\003\006\000\002\003\006\000\002\067\002\000\002" +
    "\003\006\000\002\003\006\000\002\070\002\000\002\003" +
    "\006\000\002\003\006\000\002\071\002\000\002\003\006" +
    "\000\002\003\006\000\002\072\002\000\002\003\006\000" +
    "\002\073\002\000\002\003\006\000\002\074\002\000\002" +
    "\075\002\000\002\003\013\000\002\003\002\000\002\025" +
    "\006\000\002\025\006\000\002\025\006\000\002\025\006" +
    "\000\002\076\002\000\002\004\006\000\002\077\002\000" +
    "\002\005\006\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\020\005\000\002\100\002" +
    "\000\002\020\005\000\002\007\003\000\002\007\004\000" +
    "\002\023\005\000\002\010\004\000\002\010\004\000\002" +
    "\021\004\000\002\022\003\000\002\022\003\000\002\022" +
    "\003\000\002\024\005\000\002\024\005\000\002\024\005" +
    "\000\002\024\005\000\002\024\005\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\026\010\000\002" +
    "\026\011\000\002\027\003\000\002\027\005\000\002\027" +
    "\005\000\002\027\003\000\002\027\010\000\002\027\003" +
    "\000\002\027\005\000\002\027\005\000\002\027\003\000" +
    "\002\027\005\000\002\027\005\000\002\027\003\000\002" +
    "\027\005\000\002\027\005\000\002\027\003\000\002\030" +
    "\004\000\002\031\006\000\002\032\005\000\002\032\005" +
    "\000\002\032\005\000\002\032\005\000\002\032\005\000" +
    "\002\032\005\000\002\033\005\000\002\033\006\000\002" +
    "\011\012\000\002\012\012\000\002\013\014" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u014b\000\006\003\004\017\005\001\002\000\046\003" +
    "\ufff9\010\ufff9\012\ufff9\013\ufff9\014\ufff9\015\ufff9\016\ufff9" +
    "\027\ufff9\030\ufff9\034\ufff9\037\ufff9\040\ufff9\041\ufff9\043" +
    "\ufff9\062\ufff9\063\ufff9\070\ufff9\075\ufff9\001\002\000\006" +
    "\003\010\075\011\001\002\000\004\002\007\001\002\000" +
    "\004\002\001\001\002\000\046\003\ufffb\010\ufffb\012\ufffb" +
    "\013\ufffb\014\ufffb\015\ufffb\016\ufffb\027\ufffb\030\ufffb\034" +
    "\ufffb\037\ufffb\040\ufffb\041\ufffb\043\ufffb\062\ufffb\063\ufffb" +
    "\070\ufffb\075\ufffb\001\002\000\004\067\000\001\002\000" +
    "\004\067\013\001\002\000\004\005\014\001\002\000\004" +
    "\065\015\001\002\000\004\022\uffff\001\002\000\004\022" +
    "\017\001\002\000\004\073\u0143\001\002\000\004\066\021" +
    "\001\002\000\004\067\022\001\002\000\046\003\ufffe\010" +
    "\ufffe\012\ufffe\013\ufffe\014\ufffe\015\ufffe\016\ufffe\027\ufffe" +
    "\030\ufffe\034\ufffe\037\ufffe\040\ufffe\041\ufffe\043\ufffe\062" +
    "\ufffe\063\ufffe\070\ufffe\075\ufffe\001\002\000\046\003\042" +
    "\010\047\012\024\013\046\014\031\015\034\016\025\027" +
    "\032\030\027\034\044\037\051\040\036\041\037\043\050" +
    "\062\040\063\041\070\uffa5\075\043\001\002\000\004\012" +
    "\u0136\001\002\000\050\003\uffd9\010\uffd9\012\uffd9\013\uffd9" +
    "\014\uffd9\015\uffd9\016\uffd9\027\uffd9\030\uffd9\034\uffd9\037" +
    "\uffd9\040\uffd9\041\uffd9\043\uffd9\062\uffd9\063\uffd9\070\uffd9" +
    "\071\u0132\075\uffd9\001\002\000\004\070\uffeb\001\002\000" +
    "\006\031\u011c\032\u011d\001\002\000\004\070\u0105\001\002" +
    "\000\004\014\367\001\002\000\006\031\340\032\341\001" +
    "\002\000\050\003\uffe6\010\uffe6\012\uffe6\013\uffe6\014\uffe6" +
    "\015\uffe6\016\uffe6\027\uffe6\030\uffe6\034\uffe6\037\uffe6\040" +
    "\uffe6\041\uffe6\043\uffe6\062\uffe6\063\uffe6\070\uffe6\071\334" +
    "\075\uffe6\001\002\000\004\023\206\001\002\000\050\003" +
    "\uffe9\010\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9" +
    "\027\uffe9\030\uffe9\034\uffe9\037\uffe9\040\uffe9\041\uffe9\043" +
    "\uffe9\062\uffe9\063\uffe9\070\uffe9\071\324\075\uffe9\001\002" +
    "\000\004\042\316\001\002\000\004\023\206\001\002\000" +
    "\004\075\306\001\002\000\004\075\303\001\002\000\010" +
    "\064\uff94\071\uffaa\075\uffa8\001\002\000\012\020\245\062" +
    "\244\063\246\064\243\001\002\000\006\035\231\036\232" +
    "\001\002\000\052\003\uff92\010\uff92\012\uff92\013\uff92\014" +
    "\uff92\015\uff92\016\uff92\027\uff92\030\uff92\034\uff92\037\uff92" +
    "\040\uff92\041\uff92\043\uff92\062\uff92\063\uff92\064\226\070" +
    "\uff92\071\uff92\075\uff92\001\002\000\004\013\201\001\002" +
    "\000\004\065\070\001\002\000\010\031\057\032\062\042" +
    "\060\001\002\000\004\042\052\001\002\000\050\003\uffd6" +
    "\010\uffd6\012\uffd6\013\uffd6\014\uffd6\015\uffd6\016\uffd6\027" +
    "\uffd6\030\uffd6\034\uffd6\037\uffd6\040\uffd6\041\uffd6\043\uffd6" +
    "\062\uffd6\063\uffd6\070\uffd6\071\053\075\uffd6\001\002\000" +
    "\046\003\042\010\047\012\024\013\046\014\031\015\034" +
    "\016\025\027\032\030\027\034\044\037\051\040\036\041" +
    "\037\043\050\062\040\063\041\070\uffa5\075\043\001\002" +
    "\000\046\003\042\010\047\012\024\013\046\014\031\015" +
    "\034\016\025\027\032\030\027\034\044\037\051\040\036" +
    "\041\037\043\050\062\040\063\041\070\uffa5\075\043\001" +
    "\002\000\004\070\uffd5\001\002\000\004\070\uffd7\001\002" +
    "\000\050\003\uff96\010\uff96\012\uff96\013\uff96\014\uff96\015" +
    "\uff96\016\uff96\027\uff96\030\uff96\034\uff96\037\uff96\040\uff96" +
    "\041\uff96\043\uff96\062\uff96\063\uff96\070\uff96\071\uff96\075" +
    "\uff96\001\002\000\050\003\uff98\010\uff98\012\uff98\013\uff98" +
    "\014\uff98\015\uff98\016\uff98\027\uff98\030\uff98\034\uff98\037" +
    "\uff98\040\uff98\041\uff98\043\uff98\062\uff98\063\uff98\070\uff98" +
    "\071\uff98\075\uff98\001\002\000\050\003\uffac\010\uffac\012" +
    "\uffac\013\uffac\014\uffac\015\uffac\016\uffac\027\uffac\030\uffac" +
    "\034\uffac\037\uffac\040\uffac\041\uffac\043\uffac\062\uffac\063" +
    "\uffac\070\uffac\071\064\075\uffac\001\002\000\050\003\uff97" +
    "\010\uff97\012\uff97\013\uff97\014\uff97\015\uff97\016\uff97\027" +
    "\uff97\030\uff97\034\uff97\037\uff97\040\uff97\041\uff97\043\uff97" +
    "\062\uff97\063\uff97\070\uff97\071\uff97\075\uff97\001\002\000" +
    "\046\003\042\010\047\012\024\013\046\014\031\015\034" +
    "\016\025\027\032\030\027\034\044\037\051\040\036\041" +
    "\037\043\050\062\040\063\041\070\uffa5\075\043\001\002" +
    "\000\046\003\042\010\047\012\024\013\046\014\031\015" +
    "\034\016\025\027\032\030\027\034\044\037\051\040\036" +
    "\041\037\043\050\062\040\063\041\070\uffa5\075\043\001" +
    "\002\000\004\070\uffad\001\002\000\004\070\uffab\001\002" +
    "\000\046\003\042\010\047\012\024\013\046\014\031\015" +
    "\034\016\025\027\032\030\027\034\044\037\051\040\036" +
    "\041\037\043\050\062\040\063\041\070\uffa5\075\043\001" +
    "\002\000\012\003\073\057\077\074\100\075\076\001\002" +
    "\000\004\066\164\001\002\000\014\060\161\061\160\066" +
    "\uff74\072\uff74\075\uff74\001\002\000\010\066\uff71\072\uff71" +
    "\075\uff71\001\002\000\014\060\154\061\155\066\uff7a\072" +
    "\uff7a\075\uff7a\001\002\000\014\060\151\061\150\066\uff77" +
    "\072\uff77\075\uff77\001\002\000\026\045\113\046\114\047" +
    "\111\050\112\051\115\052\117\060\116\066\uff7c\072\uff7c" +
    "\075\uff7c\001\002\000\006\065\106\075\105\001\002\000" +
    "\014\060\102\061\101\066\uff7f\072\uff7f\075\uff7f\001\002" +
    "\000\012\003\073\057\077\074\100\075\076\001\002\000" +
    "\012\003\073\057\077\074\100\075\076\001\002\000\010" +
    "\066\uff7e\072\uff7e\075\uff7e\001\002\000\010\066\uff7d\072" +
    "\uff7d\075\uff7d\001\002\000\014\060\uff70\061\uff70\066\uff70" +
    "\072\uff70\075\uff70\001\002\000\012\003\073\057\077\074" +
    "\100\075\076\001\002\000\004\066\110\001\002\000\014" +
    "\060\uff6f\061\uff6f\066\uff6f\072\uff6f\075\uff6f\001\002\000" +
    "\012\003\121\065\124\073\120\075\122\001\002\000\012" +
    "\003\121\065\124\073\120\075\122\001\002\000\012\003" +
    "\121\065\124\073\120\075\122\001\002\000\012\003\121" +
    "\065\124\073\120\075\122\001\002\000\012\003\121\065" +
    "\124\073\120\075\122\001\002\000\012\003\073\057\077" +
    "\074\100\075\076\001\002\000\012\003\121\065\124\073" +
    "\120\075\122\001\002\000\070\003\uff84\010\uff84\012\uff84" +
    "\013\uff84\014\uff84\015\uff84\016\uff84\027\uff84\030\uff84\034" +
    "\uff84\037\uff84\040\uff84\041\uff84\043\uff84\053\131\054\127" +
    "\055\132\056\130\060\uff84\061\uff84\062\uff84\063\uff84\066" +
    "\uff84\070\uff84\071\uff84\072\uff84\075\uff84\001\002\000\060" +
    "\003\uff82\010\uff82\012\uff82\013\uff82\014\uff82\015\uff82\016" +
    "\uff82\027\uff82\030\uff82\034\uff82\037\uff82\040\uff82\041\uff82" +
    "\043\uff82\060\uff82\061\uff82\062\uff82\063\uff82\066\uff82\070" +
    "\uff82\071\uff82\072\uff82\075\uff82\001\002\000\060\003\uff83" +
    "\010\uff83\012\uff83\013\uff83\014\uff83\015\uff83\016\uff83\027" +
    "\uff83\030\uff83\034\uff83\037\uff83\040\uff83\041\uff83\043\uff83" +
    "\060\uff83\061\uff83\062\uff83\063\uff83\066\uff83\070\uff83\071" +
    "\uff83\072\uff83\075\uff83\001\002\000\014\060\uff69\061\uff69" +
    "\066\uff69\072\uff69\075\uff69\001\002\000\012\003\121\065" +
    "\124\073\120\075\122\001\002\000\004\066\126\001\002" +
    "\000\060\003\uff89\010\uff89\012\uff89\013\uff89\014\uff89\015" +
    "\uff89\016\uff89\027\uff89\030\uff89\034\uff89\037\uff89\040\uff89" +
    "\041\uff89\043\uff89\060\uff89\061\uff89\062\uff89\063\uff89\066" +
    "\uff89\070\uff89\071\uff89\072\uff89\075\uff89\001\002\000\012" +
    "\003\121\065\124\073\120\075\122\001\002\000\012\003" +
    "\121\065\124\073\120\075\122\001\002\000\012\003\121" +
    "\065\124\073\120\075\122\001\002\000\012\003\121\065" +
    "\124\073\120\075\122\001\002\000\060\003\uff86\010\uff86" +
    "\012\uff86\013\uff86\014\uff86\015\uff86\016\uff86\027\uff86\030" +
    "\uff86\034\uff86\037\uff86\040\uff86\041\uff86\043\uff86\060\uff86" +
    "\061\uff86\062\uff86\063\uff86\066\uff86\070\uff86\071\uff86\072" +
    "\uff86\075\uff86\001\002\000\060\003\uff88\010\uff88\012\uff88" +
    "\013\uff88\014\uff88\015\uff88\016\uff88\027\uff88\030\uff88\034" +
    "\uff88\037\uff88\040\uff88\041\uff88\043\uff88\060\uff88\061\uff88" +
    "\062\uff88\063\uff88\066\uff88\070\uff88\071\uff88\072\uff88\075" +
    "\uff88\001\002\000\060\003\uff85\010\uff85\012\uff85\013\uff85" +
    "\014\uff85\015\uff85\016\uff85\027\uff85\030\uff85\034\uff85\037" +
    "\uff85\040\uff85\041\uff85\043\uff85\060\uff85\061\uff85\062\uff85" +
    "\063\uff85\066\uff85\070\uff85\071\uff85\072\uff85\075\uff85\001" +
    "\002\000\060\003\uff87\010\uff87\012\uff87\013\uff87\014\uff87" +
    "\015\uff87\016\uff87\027\uff87\030\uff87\034\uff87\037\uff87\040" +
    "\uff87\041\uff87\043\uff87\060\uff87\061\uff87\062\uff87\063\uff87" +
    "\066\uff87\070\uff87\071\uff87\072\uff87\075\uff87\001\002\000" +
    "\004\075\140\001\002\000\004\061\141\001\002\000\012" +
    "\003\073\057\077\074\100\075\076\001\002\000\010\066" +
    "\uff7b\072\uff7b\075\uff7b\001\002\000\014\060\uff6a\061\uff6a" +
    "\066\uff6a\072\uff6a\075\uff6a\001\002\000\014\060\uff6d\061" +
    "\uff6d\066\uff6d\072\uff6d\075\uff6d\001\002\000\014\060\uff6e" +
    "\061\uff6e\066\uff6e\072\uff6e\075\uff6e\001\002\000\014\060" +
    "\uff6b\061\uff6b\066\uff6b\072\uff6b\075\uff6b\001\002\000\014" +
    "\060\uff6c\061\uff6c\066\uff6c\072\uff6c\075\uff6c\001\002\000" +
    "\012\003\073\057\077\074\100\075\076\001\002\000\012" +
    "\003\073\057\077\074\100\075\076\001\002\000\010\066" +
    "\uff76\072\uff76\075\uff76\001\002\000\010\066\uff75\072\uff75" +
    "\075\uff75\001\002\000\012\003\073\057\077\074\100\075" +
    "\076\001\002\000\012\003\073\057\077\074\100\075\076" +
    "\001\002\000\010\066\uff78\072\uff78\075\uff78\001\002\000" +
    "\010\066\uff79\072\uff79\075\uff79\001\002\000\012\003\073" +
    "\057\077\074\100\075\076\001\002\000\012\003\073\057" +
    "\077\074\100\075\076\001\002\000\010\066\uff73\072\uff73" +
    "\075\uff73\001\002\000\010\066\uff72\072\uff72\075\uff72\001" +
    "\002\000\004\067\165\001\002\000\046\003\042\010\047" +
    "\012\024\013\046\014\031\015\034\016\025\027\032\030" +
    "\027\034\044\037\051\040\036\041\037\043\050\062\040" +
    "\063\041\070\uffa5\075\043\001\002\000\004\070\167\001" +
    "\002\000\050\003\uff81\010\uff81\011\171\012\uff81\013\uff81" +
    "\014\uff81\015\uff81\016\uff81\027\uff81\030\uff81\034\uff81\037" +
    "\uff81\040\uff81\041\uff81\043\uff81\062\uff81\063\uff81\070\uff81" +
    "\075\uff81\001\002\000\046\003\uff80\010\uff80\012\uff80\013" +
    "\uff80\014\uff80\015\uff80\016\uff80\027\uff80\030\uff80\034\uff80" +
    "\037\uff80\040\uff80\041\uff80\043\uff80\062\uff80\063\uff80\070" +
    "\uff80\075\uff80\001\002\000\006\010\172\067\173\001\002" +
    "\000\004\065\070\001\002\000\046\003\042\010\047\012" +
    "\024\013\046\014\031\015\034\016\025\027\032\030\027" +
    "\034\044\037\051\040\036\041\037\043\050\062\040\063" +
    "\041\070\uffa5\075\043\001\002\000\004\070\175\001\002" +
    "\000\046\003\uff67\010\uff67\012\uff67\013\uff67\014\uff67\015" +
    "\uff67\016\uff67\027\uff67\030\uff67\034\uff67\037\uff67\040\uff67" +
    "\041\uff67\043\uff67\062\uff67\063\uff67\070\uff67\075\uff67\001" +
    "\002\000\046\003\uff68\010\uff68\012\uff68\013\uff68\014\uff68" +
    "\015\uff68\016\uff68\027\uff68\030\uff68\034\uff68\037\uff68\040" +
    "\uff68\041\uff68\043\uff68\062\uff68\063\uff68\070\uff68\075\uff68" +
    "\001\002\000\004\070\uffe4\001\002\000\050\003\uffdf\010" +
    "\uffdf\012\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf\027\uffdf" +
    "\030\uffdf\034\uffdf\037\uffdf\040\uffdf\041\uffdf\043\uffdf\062" +
    "\uffdf\063\uffdf\070\uffdf\071\221\075\uffdf\001\002\000\004" +
    "\065\202\001\002\000\012\003\073\057\077\074\100\075" +
    "\076\001\002\000\004\072\204\001\002\000\004\023\206" +
    "\001\002\000\004\072\216\001\002\000\004\073\207\001" +
    "\002\000\012\003\uff9e\024\uff9e\025\uff9e\026\uff9e\001\002" +
    "\000\012\003\212\024\215\025\211\026\213\001\002\000" +
    "\054\003\uff9b\010\uff9b\012\uff9b\013\uff9b\014\uff9b\015\uff9b" +
    "\016\uff9b\027\uff9b\030\uff9b\034\uff9b\037\uff9b\040\uff9b\041" +
    "\uff9b\043\uff9b\062\uff9b\063\uff9b\066\uff9b\070\uff9b\071\uff9b" +
    "\072\uff9b\075\uff9b\001\002\000\054\003\uff99\010\uff99\012" +
    "\uff99\013\uff99\014\uff99\015\uff99\016\uff99\027\uff99\030\uff99" +
    "\034\uff99\037\uff99\040\uff99\041\uff99\043\uff99\062\uff99\063" +
    "\uff99\066\uff99\070\uff99\071\uff99\072\uff99\075\uff99\001\002" +
    "\000\054\003\uff9a\010\uff9a\012\uff9a\013\uff9a\014\uff9a\015" +
    "\uff9a\016\uff9a\027\uff9a\030\uff9a\034\uff9a\037\uff9a\040\uff9a" +
    "\041\uff9a\043\uff9a\062\uff9a\063\uff9a\066\uff9a\070\uff9a\071" +
    "\uff9a\072\uff9a\075\uff9a\001\002\000\052\003\uff9d\010\uff9d" +
    "\012\uff9d\013\uff9d\014\uff9d\015\uff9d\016\uff9d\027\uff9d\030" +
    "\uff9d\034\uff9d\037\uff9d\040\uff9d\041\uff9d\043\uff9d\062\uff9d" +
    "\063\uff9d\070\uff9d\071\uff9d\072\uff9d\075\uff9d\001\002\000" +
    "\054\003\uff9c\010\uff9c\012\uff9c\013\uff9c\014\uff9c\015\uff9c" +
    "\016\uff9c\027\uff9c\030\uff9c\034\uff9c\037\uff9c\040\uff9c\041" +
    "\uff9c\043\uff9c\062\uff9c\063\uff9c\066\uff9c\070\uff9c\071\uff9c" +
    "\072\uff9c\075\uff9c\001\002\000\012\003\073\057\077\074" +
    "\100\075\076\001\002\000\004\066\220\001\002\000\050" +
    "\003\uff65\010\uff65\012\uff65\013\uff65\014\uff65\015\uff65\016" +
    "\uff65\027\uff65\030\uff65\034\uff65\037\uff65\040\uff65\041\uff65" +
    "\043\uff65\062\uff65\063\uff65\070\uff65\071\uff65\075\uff65\001" +
    "\002\000\046\003\042\010\047\012\024\013\046\014\031" +
    "\015\034\016\025\027\032\030\027\034\044\037\051\040" +
    "\036\041\037\043\050\062\040\063\041\070\uffa5\075\043" +
    "\001\002\000\046\003\042\010\047\012\024\013\046\014" +
    "\031\015\034\016\025\027\032\030\027\034\044\037\051" +
    "\040\036\041\037\043\050\062\040\063\041\070\uffa5\075" +
    "\043\001\002\000\004\070\uffde\001\002\000\004\070\uffe0" +
    "\001\002\000\050\003\uff91\010\uff91\012\uff91\013\uff91\014" +
    "\uff91\015\uff91\016\uff91\027\uff91\030\uff91\034\uff91\037\uff91" +
    "\040\uff91\041\uff91\043\uff91\062\uff91\063\uff91\070\uff91\071" +
    "\uff91\075\uff91\001\002\000\014\003\121\065\124\073\120" +
    "\074\230\075\122\001\002\000\050\003\uff8e\010\uff8e\012" +
    "\uff8e\013\uff8e\014\uff8e\015\uff8e\016\uff8e\027\uff8e\030\uff8e" +
    "\034\uff8e\037\uff8e\040\uff8e\041\uff8e\043\uff8e\062\uff8e\063" +
    "\uff8e\070\uff8e\071\uff8e\075\uff8e\001\002\000\050\003\uff8f" +
    "\010\uff8f\012\uff8f\013\uff8f\014\uff8f\015\uff8f\016\uff8f\027" +
    "\uff8f\030\uff8f\034\uff8f\037\uff8f\040\uff8f\041\uff8f\043\uff8f" +
    "\062\uff8f\063\uff8f\070\uff8f\071\uff8f\075\uff8f\001\002\000" +
    "\050\003\uffb8\010\uffb8\012\uffb8\013\uffb8\014\uffb8\015\uffb8" +
    "\016\uffb8\027\uffb8\030\uffb8\034\uffb8\037\uffb8\040\uffb8\041" +
    "\uffb8\043\uffb8\062\uffb8\063\uffb8\070\uffb8\071\237\075\uffb8" +
    "\001\002\000\050\003\uffb5\010\uffb5\012\uffb5\013\uffb5\014" +
    "\uffb5\015\uffb5\016\uffb5\027\uffb5\030\uffb5\034\uffb5\037\uffb5" +
    "\040\uffb5\041\uffb5\043\uffb5\062\uffb5\063\uffb5\070\uffb5\071" +
    "\233\075\uffb5\001\002\000\046\003\042\010\047\012\024" +
    "\013\046\014\031\015\034\016\025\027\032\030\027\034" +
    "\044\037\051\040\036\041\037\043\050\062\040\063\041" +
    "\070\uffa5\075\043\001\002\000\046\003\042\010\047\012" +
    "\024\013\046\014\031\015\034\016\025\027\032\030\027" +
    "\034\044\037\051\040\036\041\037\043\050\062\040\063" +
    "\041\070\uffa5\075\043\001\002\000\004\070\uffb4\001\002" +
    "\000\004\070\uffb6\001\002\000\046\003\042\010\047\012" +
    "\024\013\046\014\031\015\034\016\025\027\032\030\027" +
    "\034\044\037\051\040\036\041\037\043\050\062\040\063" +
    "\041\070\uffa5\075\043\001\002\000\046\003\042\010\047" +
    "\012\024\013\046\014\031\015\034\016\025\027\032\030" +
    "\027\034\044\037\051\040\036\041\037\043\050\062\040" +
    "\063\041\070\uffa5\075\043\001\002\000\004\070\uffb7\001" +
    "\002\000\004\070\uffb9\001\002\000\012\003\121\065\124" +
    "\073\120\075\122\001\002\000\004\071\257\001\002\000" +
    "\004\021\252\001\002\000\004\071\247\001\002\000\046" +
    "\003\042\010\047\012\024\013\046\014\031\015\034\016" +
    "\025\027\032\030\027\034\044\037\051\040\036\041\037" +
    "\043\050\062\040\063\041\070\uffa5\075\043\001\002\000" +
    "\004\070\uffa3\001\002\000\056\003\uff90\010\uff90\012\uff90" +
    "\013\uff90\014\uff90\015\uff90\016\uff90\027\uff90\030\uff90\034" +
    "\uff90\037\uff90\040\uff90\041\uff90\043\uff90\062\uff90\063\uff90" +
    "\064\uff90\066\uff90\070\uff90\071\uff90\072\uff90\075\uff90\001" +
    "\002\000\010\003\254\006\256\007\255\001\002\000\056" +
    "\003\uff8d\010\uff8d\012\uff8d\013\uff8d\014\uff8d\015\uff8d\016" +
    "\uff8d\027\uff8d\030\uff8d\034\uff8d\037\uff8d\040\uff8d\041\uff8d" +
    "\043\uff8d\062\uff8d\063\uff8d\064\uff8d\066\uff8d\070\uff8d\071" +
    "\uff8d\072\uff8d\075\uff8d\001\002\000\056\003\uff8a\010\uff8a" +
    "\012\uff8a\013\uff8a\014\uff8a\015\uff8a\016\uff8a\027\uff8a\030" +
    "\uff8a\034\uff8a\037\uff8a\040\uff8a\041\uff8a\043\uff8a\062\uff8a" +
    "\063\uff8a\064\uff8a\066\uff8a\070\uff8a\071\uff8a\072\uff8a\075" +
    "\uff8a\001\002\000\056\003\uff8b\010\uff8b\012\uff8b\013\uff8b" +
    "\014\uff8b\015\uff8b\016\uff8b\027\uff8b\030\uff8b\034\uff8b\037" +
    "\uff8b\040\uff8b\041\uff8b\043\uff8b\062\uff8b\063\uff8b\064\uff8b" +
    "\066\uff8b\070\uff8b\071\uff8b\072\uff8b\075\uff8b\001\002\000" +
    "\056\003\uff8c\010\uff8c\012\uff8c\013\uff8c\014\uff8c\015\uff8c" +
    "\016\uff8c\027\uff8c\030\uff8c\034\uff8c\037\uff8c\040\uff8c\041" +
    "\uff8c\043\uff8c\062\uff8c\063\uff8c\064\uff8c\066\uff8c\070\uff8c" +
    "\071\uff8c\072\uff8c\075\uff8c\001\002\000\046\003\042\010" +
    "\047\012\024\013\046\014\031\015\034\016\025\027\032" +
    "\030\027\034\044\037\051\040\036\041\037\043\050\062" +
    "\040\063\041\070\uffa5\075\043\001\002\000\004\070\uffa4" +
    "\001\002\000\050\003\uff95\010\uff95\012\uff95\013\uff95\014" +
    "\uff95\015\uff95\016\uff95\027\uff95\030\uff95\034\uff95\037\uff95" +
    "\040\uff95\041\uff95\043\uff95\062\uff95\063\uff95\070\uff95\071" +
    "\uff95\075\uff95\001\002\000\004\075\270\001\002\000\004" +
    "\071\266\001\002\000\004\064\265\001\002\000\050\003" +
    "\uff93\010\uff93\012\uff93\013\uff93\014\uff93\015\uff93\016\uff93" +
    "\027\uff93\030\uff93\034\uff93\037\uff93\040\uff93\041\uff93\043" +
    "\uff93\062\uff93\063\uff93\070\uff93\071\uff93\075\uff93\001\002" +
    "\000\046\003\042\010\047\012\024\013\046\014\031\015" +
    "\034\016\025\027\032\030\027\034\044\037\051\040\036" +
    "\041\037\043\050\062\040\063\041\070\uffa5\075\043\001" +
    "\002\000\004\070\uffa9\001\002\000\004\065\uffa7\001\002" +
    "\000\004\065\272\001\002\000\006\066\uffec\075\274\001" +
    "\002\000\004\066\300\001\002\000\004\020\245\001\002" +
    "\000\006\066\uffed\072\276\001\002\000\006\066\uffec\075" +
    "\274\001\002\000\004\066\uffee\001\002\000\004\067\301" +
    "\001\002\000\046\003\042\010\047\012\024\013\046\014" +
    "\031\015\034\016\025\027\032\030\027\034\044\037\051" +
    "\040\036\041\037\043\050\062\040\063\041\070\uffa5\075" +
    "\043\001\002\000\004\070\uffa6\001\002\000\004\071\304" +
    "\001\002\000\046\003\042\010\047\012\024\013\046\014" +
    "\031\015\034\016\025\027\032\030\027\034\044\037\051" +
    "\040\036\041\037\043\050\062\040\063\041\070\uffa5\075" +
    "\043\001\002\000\004\070\uffa1\001\002\000\004\071\307" +
    "\001\002\000\046\003\042\010\047\012\024\013\046\014" +
    "\031\015\034\016\025\027\032\030\027\034\044\037\051" +
    "\040\036\041\037\043\050\062\040\063\041\070\uffa5\075" +
    "\043\001\002\000\004\070\uffa2\001\002\000\050\003\uffb2" +
    "\010\uffb2\012\uffb2\013\uffb2\014\uffb2\015\uffb2\016\uffb2\027" +
    "\uffb2\030\uffb2\034\uffb2\037\uffb2\040\uffb2\041\uffb2\043\uffb2" +
    "\062\uffb2\063\uffb2\070\uffb2\071\312\075\uffb2\001\002\000" +
    "\046\003\042\010\047\012\024\013\046\014\031\015\034" +
    "\016\025\027\032\030\027\034\044\037\051\040\036\041" +
    "\037\043\050\062\040\063\041\070\uffa5\075\043\001\002" +
    "\000\046\003\042\010\047\012\024\013\046\014\031\015" +
    "\034\016\025\027\032\030\027\034\044\037\051\040\036" +
    "\041\037\043\050\062\040\063\041\070\uffa5\075\043\001" +
    "\002\000\004\070\uffb1\001\002\000\004\070\uffb3\001\002" +
    "\000\050\003\uffd3\010\uffd3\012\uffd3\013\uffd3\014\uffd3\015" +
    "\uffd3\016\uffd3\027\uffd3\030\uffd3\034\uffd3\037\uffd3\040\uffd3" +
    "\041\uffd3\043\uffd3\062\uffd3\063\uffd3\070\uffd3\071\320\075" +
    "\uffd3\001\002\000\046\003\042\010\047\012\024\013\046" +
    "\014\031\015\034\016\025\027\032\030\027\034\044\037" +
    "\051\040\036\041\037\043\050\062\040\063\041\070\uffa5" +
    "\075\043\001\002\000\046\003\042\010\047\012\024\013" +
    "\046\014\031\015\034\016\025\027\032\030\027\034\044" +
    "\037\051\040\036\041\037\043\050\062\040\063\041\070" +
    "\uffa5\075\043\001\002\000\004\070\uffd4\001\002\000\004" +
    "\070\uffd2\001\002\000\046\003\042\010\047\012\024\013" +
    "\046\014\031\015\034\016\025\027\032\030\027\034\044" +
    "\037\051\040\036\041\037\043\050\062\040\063\041\070" +
    "\uffa5\075\043\001\002\000\046\003\042\010\047\012\024" +
    "\013\046\014\031\015\034\016\025\027\032\030\027\034" +
    "\044\037\051\040\036\041\037\043\050\062\040\063\041" +
    "\070\uffa5\075\043\001\002\000\004\070\uffea\001\002\000" +
    "\004\070\uffe8\001\002\000\050\003\uffaf\010\uffaf\012\uffaf" +
    "\013\uffaf\014\uffaf\015\uffaf\016\uffaf\027\uffaf\030\uffaf\034" +
    "\uffaf\037\uffaf\040\uffaf\041\uffaf\043\uffaf\062\uffaf\063\uffaf" +
    "\070\uffaf\071\331\075\uffaf\001\002\000\046\003\042\010" +
    "\047\012\024\013\046\014\031\015\034\016\025\027\032" +
    "\030\027\034\044\037\051\040\036\041\037\043\050\062" +
    "\040\063\041\070\uffa5\075\043\001\002\000\046\003\042" +
    "\010\047\012\024\013\046\014\031\015\034\016\025\027" +
    "\032\030\027\034\044\037\051\040\036\041\037\043\050" +
    "\062\040\063\041\070\uffa5\075\043\001\002\000\004\070" +
    "\uffb0\001\002\000\004\070\uffae\001\002\000\046\003\042" +
    "\010\047\012\024\013\046\014\031\015\034\016\025\027" +
    "\032\030\027\034\044\037\051\040\036\041\037\043\050" +
    "\062\040\063\041\070\uffa5\075\043\001\002\000\046\003" +
    "\042\010\047\012\024\013\046\014\031\015\034\016\025" +
    "\027\032\030\027\034\044\037\051\040\036\041\037\043" +
    "\050\062\040\063\041\070\uffa5\075\043\001\002\000\004" +
    "\070\uffe5\001\002\000\004\070\uffe7\001\002\000\006\023" +
    "\206\033\355\001\002\000\006\023\206\033\343\001\002" +
    "\000\050\003\uffd0\010\uffd0\012\uffd0\013\uffd0\014\uffd0\015" +
    "\uffd0\016\uffd0\027\uffd0\030\uffd0\034\uffd0\037\uffd0\040\uffd0" +
    "\041\uffd0\043\uffd0\062\uffd0\063\uffd0\070\uffd0\071\351\075" +
    "\uffd0\001\002\000\050\003\uffcd\010\uffcd\012\uffcd\013\uffcd" +
    "\014\uffcd\015\uffcd\016\uffcd\027\uffcd\030\uffcd\034\uffcd\037" +
    "\uffcd\040\uffcd\041\uffcd\043\uffcd\062\uffcd\063\uffcd\070\uffcd" +
    "\071\345\075\uffcd\001\002\000\046\003\042\010\047\012" +
    "\024\013\046\014\031\015\034\016\025\027\032\030\027" +
    "\034\044\037\051\040\036\041\037\043\050\062\040\063" +
    "\041\070\uffa5\075\043\001\002\000\046\003\042\010\047" +
    "\012\024\013\046\014\031\015\034\016\025\027\032\030" +
    "\027\034\044\037\051\040\036\041\037\043\050\062\040" +
    "\063\041\070\uffa5\075\043\001\002\000\004\070\uffce\001" +
    "\002\000\004\070\uffcc\001\002\000\046\003\042\010\047" +
    "\012\024\013\046\014\031\015\034\016\025\027\032\030" +
    "\027\034\044\037\051\040\036\041\037\043\050\062\040" +
    "\063\041\070\uffa5\075\043\001\002\000\046\003\042\010" +
    "\047\012\024\013\046\014\031\015\034\016\025\027\032" +
    "\030\027\034\044\037\051\040\036\041\037\043\050\062" +
    "\040\063\041\070\uffa5\075\043\001\002\000\004\070\uffd1" +
    "\001\002\000\004\070\uffcf\001\002\000\050\003\uffc4\010" +
    "\uffc4\012\uffc4\013\uffc4\014\uffc4\015\uffc4\016\uffc4\027\uffc4" +
    "\030\uffc4\034\uffc4\037\uffc4\040\uffc4\041\uffc4\043\uffc4\062" +
    "\uffc4\063\uffc4\070\uffc4\071\363\075\uffc4\001\002\000\050" +
    "\003\uffc1\010\uffc1\012\uffc1\013\uffc1\014\uffc1\015\uffc1\016" +
    "\uffc1\027\uffc1\030\uffc1\034\uffc1\037\uffc1\040\uffc1\041\uffc1" +
    "\043\uffc1\062\uffc1\063\uffc1\070\uffc1\071\356\075\uffc1\001" +
    "\002\000\046\003\042\010\047\012\024\013\046\014\031" +
    "\015\034\016\025\027\032\030\027\034\044\037\051\040" +
    "\036\041\037\043\050\062\040\063\041\070\uffa5\075\043" +
    "\001\002\000\046\003\042\010\047\012\024\013\046\014" +
    "\031\015\034\016\025\027\032\030\027\034\044\037\051" +
    "\040\036\041\037\043\050\062\040\063\041\070\uffa5\075" +
    "\043\001\002\000\004\070\uffc0\001\002\000\004\070\uffc2" +
    "\001\002\000\046\003\042\010\047\012\024\013\046\014" +
    "\031\015\034\016\025\027\032\030\027\034\044\037\051" +
    "\040\036\041\037\043\050\062\040\063\041\070\uffa5\075" +
    "\043\001\002\000\046\003\042\010\047\012\024\013\046" +
    "\014\031\015\034\016\025\027\032\030\027\034\044\037" +
    "\051\040\036\041\037\043\050\062\040\063\041\070\uffa5" +
    "\075\043\001\002\000\004\070\uffc5\001\002\000\004\070" +
    "\uffc3\001\002\000\050\003\uffdc\010\uffdc\012\uffdc\013\uffdc" +
    "\014\uffdc\015\uffdc\016\uffdc\027\uffdc\030\uffdc\034\uffdc\037" +
    "\uffdc\040\uffdc\041\uffdc\043\uffdc\062\uffdc\063\uffdc\070\uffdc" +
    "\071\u0101\075\uffdc\001\002\000\004\065\370\001\002\000" +
    "\012\003\073\057\077\074\100\075\076\001\002\000\004" +
    "\072\372\001\002\000\004\023\206\001\002\000\004\072" +
    "\374\001\002\000\012\003\073\057\077\074\100\075\076" +
    "\001\002\000\004\072\376\001\002\000\012\003\073\057" +
    "\077\074\100\075\076\001\002\000\004\066\u0100\001\002" +
    "\000\050\003\uff64\010\uff64\012\uff64\013\uff64\014\uff64\015" +
    "\uff64\016\uff64\027\uff64\030\uff64\034\uff64\037\uff64\040\uff64" +
    "\041\uff64\043\uff64\062\uff64\063\uff64\070\uff64\071\uff64\075" +
    "\uff64\001\002\000\046\003\042\010\047\012\024\013\046" +
    "\014\031\015\034\016\025\027\032\030\027\034\044\037" +
    "\051\040\036\041\037\043\050\062\040\063\041\070\uffa5" +
    "\075\043\001\002\000\046\003\042\010\047\012\024\013" +
    "\046\014\031\015\034\016\025\027\032\030\027\034\044" +
    "\037\051\040\036\041\037\043\050\062\040\063\041\070" +
    "\uffa5\075\043\001\002\000\004\070\uffdb\001\002\000\004" +
    "\070\uffdd\001\002\000\010\003\ufffd\044\ufffd\070\ufffd\001" +
    "\002\000\010\003\u0108\044\u0109\070\u010a\001\002\000\004" +
    "\002\ufffc\001\002\000\006\004\ufff6\075\ufff2\001\002\000" +
    "\004\075\ufff4\001\002\000\004\004\u010b\001\002\000\004" +
    "\002\ufff7\001\002\000\004\075\u010d\001\002\000\004\065" +
    "\ufff0\001\002\000\010\003\u0108\044\u0109\070\u010a\001\002" +
    "\000\004\002\ufff3\001\002\000\004\065\u0111\001\002\000" +
    "\006\066\uffec\075\274\001\002\000\004\066\u0113\001\002" +
    "\000\004\067\u0114\001\002\000\046\003\042\010\047\012" +
    "\024\013\046\014\031\015\034\016\025\027\032\030\027" +
    "\034\044\037\051\040\036\041\037\043\050\062\040\063" +
    "\041\070\uffa5\075\043\001\002\000\004\070\u0116\001\002" +
    "\000\010\003\uffef\044\uffef\070\uffef\001\002\000\004\075" +
    "\u010d\001\002\000\004\004\u0119\001\002\000\004\002\ufff5" +
    "\001\002\000\010\003\u0108\044\u0109\070\u010a\001\002\000" +
    "\004\002\ufff1\001\002\000\006\023\206\033\u0129\001\002" +
    "\000\006\023\206\033\u011f\001\002\000\050\003\uffca\010" +
    "\uffca\012\uffca\013\uffca\014\uffca\015\uffca\016\uffca\027\uffca" +
    "\030\uffca\034\uffca\037\uffca\040\uffca\041\uffca\043\uffca\062" +
    "\uffca\063\uffca\070\uffca\071\u0125\075\uffca\001\002\000\050" +
    "\003\uffc7\010\uffc7\012\uffc7\013\uffc7\014\uffc7\015\uffc7\016" +
    "\uffc7\027\uffc7\030\uffc7\034\uffc7\037\uffc7\040\uffc7\041\uffc7" +
    "\043\uffc7\062\uffc7\063\uffc7\070\uffc7\071\u0121\075\uffc7\001" +
    "\002\000\046\003\042\010\047\012\024\013\046\014\031" +
    "\015\034\016\025\027\032\030\027\034\044\037\051\040" +
    "\036\041\037\043\050\062\040\063\041\070\uffa5\075\043" +
    "\001\002\000\046\003\042\010\047\012\024\013\046\014" +
    "\031\015\034\016\025\027\032\030\027\034\044\037\051" +
    "\040\036\041\037\043\050\062\040\063\041\070\uffa5\075" +
    "\043\001\002\000\004\070\uffc8\001\002\000\004\070\uffc6" +
    "\001\002\000\046\003\042\010\047\012\024\013\046\014" +
    "\031\015\034\016\025\027\032\030\027\034\044\037\051" +
    "\040\036\041\037\043\050\062\040\063\041\070\uffa5\075" +
    "\043\001\002\000\046\003\042\010\047\012\024\013\046" +
    "\014\031\015\034\016\025\027\032\030\027\034\044\037" +
    "\051\040\036\041\037\043\050\062\040\063\041\070\uffa5" +
    "\075\043\001\002\000\004\070\uffcb\001\002\000\004\070" +
    "\uffc9\001\002\000\050\003\uffbe\010\uffbe\012\uffbe\013\uffbe" +
    "\014\uffbe\015\uffbe\016\uffbe\027\uffbe\030\uffbe\034\uffbe\037" +
    "\uffbe\040\uffbe\041\uffbe\043\uffbe\062\uffbe\063\uffbe\070\uffbe" +
    "\071\u012e\075\uffbe\001\002\000\050\003\uffbb\010\uffbb\012" +
    "\uffbb\013\uffbb\014\uffbb\015\uffbb\016\uffbb\027\uffbb\030\uffbb" +
    "\034\uffbb\037\uffbb\040\uffbb\041\uffbb\043\uffbb\062\uffbb\063" +
    "\uffbb\070\uffbb\071\u012a\075\uffbb\001\002\000\046\003\042" +
    "\010\047\012\024\013\046\014\031\015\034\016\025\027" +
    "\032\030\027\034\044\037\051\040\036\041\037\043\050" +
    "\062\040\063\041\070\uffa5\075\043\001\002\000\046\003" +
    "\042\010\047\012\024\013\046\014\031\015\034\016\025" +
    "\027\032\030\027\034\044\037\051\040\036\041\037\043" +
    "\050\062\040\063\041\070\uffa5\075\043\001\002\000\004" +
    "\070\uffba\001\002\000\004\070\uffbc\001\002\000\046\003" +
    "\042\010\047\012\024\013\046\014\031\015\034\016\025" +
    "\027\032\030\027\034\044\037\051\040\036\041\037\043" +
    "\050\062\040\063\041\070\uffa5\075\043\001\002\000\046" +
    "\003\042\010\047\012\024\013\046\014\031\015\034\016" +
    "\025\027\032\030\027\034\044\037\051\040\036\041\037" +
    "\043\050\062\040\063\041\070\uffa5\075\043\001\002\000" +
    "\004\070\uffbd\001\002\000\004\070\uffbf\001\002\000\046" +
    "\003\042\010\047\012\024\013\046\014\031\015\034\016" +
    "\025\027\032\030\027\034\044\037\051\040\036\041\037" +
    "\043\050\062\040\063\041\070\uffa5\075\043\001\002\000" +
    "\046\003\042\010\047\012\024\013\046\014\031\015\034" +
    "\016\025\027\032\030\027\034\044\037\051\040\036\041" +
    "\037\043\050\062\040\063\041\070\uffa5\075\043\001\002" +
    "\000\004\070\uffd8\001\002\000\004\070\uffda\001\002\000" +
    "\004\065\u013c\001\002\000\050\003\uffe2\010\uffe2\012\uffe2" +
    "\013\uffe2\014\uffe2\015\uffe2\016\uffe2\027\uffe2\030\uffe2\034" +
    "\uffe2\037\uffe2\040\uffe2\041\uffe2\043\uffe2\062\uffe2\063\uffe2" +
    "\070\uffe2\071\u0138\075\uffe2\001\002\000\046\003\042\010" +
    "\047\012\024\013\046\014\031\015\034\016\025\027\032" +
    "\030\027\034\044\037\051\040\036\041\037\043\050\062" +
    "\040\063\041\070\uffa5\075\043\001\002\000\046\003\042" +
    "\010\047\012\024\013\046\014\031\015\034\016\025\027" +
    "\032\030\027\034\044\037\051\040\036\041\037\043\050" +
    "\062\040\063\041\070\uffa5\075\043\001\002\000\004\070" +
    "\uffe1\001\002\000\004\070\uffe3\001\002\000\004\023\206" +
    "\001\002\000\004\072\u013e\001\002\000\012\003\073\057" +
    "\077\074\100\075\076\001\002\000\004\072\u0140\001\002" +
    "\000\012\003\073\057\077\074\100\075\076\001\002\000" +
    "\004\066\u0142\001\002\000\050\003\uff66\010\uff66\012\uff66" +
    "\013\uff66\014\uff66\015\uff66\016\uff66\027\uff66\030\uff66\034" +
    "\uff66\037\uff66\040\uff66\041\uff66\043\uff66\062\uff66\063\uff66" +
    "\070\uff66\071\uff66\075\uff66\001\002\000\012\003\uffa0\024" +
    "\uffa0\025\uffa0\026\uffa0\001\002\000\012\003\212\024\215" +
    "\025\211\026\213\001\002\000\004\066\uff9f\001\002\000" +
    "\046\003\042\010\047\012\024\013\046\014\031\015\034" +
    "\016\025\027\032\030\027\034\044\037\051\040\036\041" +
    "\037\043\050\062\040\063\041\070\uffa5\075\043\001\002" +
    "\000\004\070\u0148\001\002\000\010\003\u0108\044\u0109\070" +
    "\u010a\001\002\000\004\002\ufffa\001\002\000\046\003\042" +
    "\010\047\012\024\013\046\014\031\015\034\016\025\027" +
    "\032\030\027\034\044\037\051\040\036\041\037\043\050" +
    "\062\040\063\041\070\uffa5\075\043\001\002\000\004\070" +
    "\u014c\001\002\000\010\003\u0108\044\u0109\070\u010a\001\002" +
    "\000\004\002\ufff8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u014b\000\004\002\005\001\001\000\004\041\u0149\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\040\u0145\001\001\000\004\034\011\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\035\015\001\001\000\004\004\017\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\036\022" +
    "\001\001\000\014\003\027\007\034\020\032\023\044\025" +
    "\025\001\001\000\004\011\u0136\001\001\000\004\053\u0132" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\365\001\001\000\002\001\001\000\004" +
    "\047\334\001\001\000\004\005\326\001\001\000\004\046" +
    "\322\001\001\000\002\001\001\000\004\005\310\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\073\262\074" +
    "\261\100\263\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\224\001\001\000\004\012\177\001\001\000" +
    "\004\026\066\001\001\000\004\014\060\001\001\000\002" +
    "\001\001\000\004\054\053\001\001\000\014\003\055\007" +
    "\034\020\032\023\044\025\025\001\001\000\014\003\054" +
    "\007\034\020\032\023\044\025\025\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\072\062\001\001\000\002\001\001\000\014\003" +
    "\065\007\034\020\032\023\044\025\025\001\001\000\014" +
    "\003\064\007\034\020\032\023\044\025\025\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\003\176\007\034" +
    "\020\032\023\044\025\025\001\001\000\012\027\070\030" +
    "\073\031\074\032\071\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\027\103\030\073\031\074\032\071\001\001\000" +
    "\012\027\102\030\073\031\074\032\071\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\027" +
    "\106\030\073\031\074\032\071\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\024\146\001\001\000\004\024" +
    "\145\001\001\000\004\024\144\001\001\000\004\024\143" +
    "\001\001\000\004\024\142\001\001\000\012\027\136\030" +
    "\073\031\074\032\071\001\001\000\004\024\122\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\024\124\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\024\135\001\001\000\004\024" +
    "\134\001\001\000\004\024\133\001\001\000\004\024\132" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\027\141\030\073\031\074\032\071\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\027" +
    "\152\030\073\031\074\032\071\001\001\000\012\027\151" +
    "\030\073\031\074\032\071\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\027\156\030\073\031\074\032\071" +
    "\001\001\000\012\027\155\030\073\031\074\032\071\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\027\162" +
    "\030\073\031\074\032\071\001\001\000\012\027\161\030" +
    "\073\031\074\032\071\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\003\165\007\034\020" +
    "\032\023\044\025\025\001\001\000\002\001\001\000\004" +
    "\033\167\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\026\175\001\001\000\014\003\173\007\034\020\032" +
    "\023\044\025\025\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\051\221" +
    "\001\001\000\002\001\001\000\012\027\202\030\073\031" +
    "\074\032\071\001\001\000\002\001\001\000\004\005\204" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\077" +
    "\207\001\001\000\004\006\213\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\027\216\030\073\031\074\032\071" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\003" +
    "\223\007\034\020\032\023\044\025\025\001\001\000\014" +
    "\003\222\007\034\020\032\023\044\025\025\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\024\226\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\066\237\001\001\000\004\067\233\001\001\000\014" +
    "\003\235\007\034\020\032\023\044\025\025\001\001\000" +
    "\014\003\234\007\034\020\032\023\044\025\025\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\003\241\007" +
    "\034\020\032\023\044\025\025\001\001\000\014\003\240" +
    "\007\034\020\032\023\044\025\025\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\024\260\001\001\000\002" +
    "\001\001\000\004\021\250\001\001\000\002\001\001\000" +
    "\014\003\247\007\034\020\032\023\044\025\025\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\252\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\003\257\007\034\020\032\023" +
    "\044\025\025\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\003\266\007\034\020\032\023\044" +
    "\025\025\001\001\000\002\001\001\000\004\075\270\001" +
    "\001\000\002\001\001\000\006\017\272\023\274\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\017\276\023\274\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\003\301\007\034\020\032\023\044\025" +
    "\025\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\003\304\007\034\020\032\023\044\025\025\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\003\307\007\034" +
    "\020\032\023\044\025\025\001\001\000\002\001\001\000" +
    "\004\070\312\001\001\000\014\003\314\007\034\020\032" +
    "\023\044\025\025\001\001\000\014\003\313\007\034\020" +
    "\032\023\044\025\025\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\055\316\001\001\000\014\003\321\007" +
    "\034\020\032\023\044\025\025\001\001\000\014\003\320" +
    "\007\034\020\032\023\044\025\025\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\003\325\007\034\020\032" +
    "\023\044\025\025\001\001\000\014\003\324\007\034\020" +
    "\032\023\044\025\025\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\071\327\001\001\000\014\003\332\007" +
    "\034\020\032\023\044\025\025\001\001\000\014\003\331" +
    "\007\034\020\032\023\044\025\025\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\003\336\007\034\020\032" +
    "\023\044\025\025\001\001\000\014\003\335\007\034\020" +
    "\032\023\044\025\025\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\353\001\001\000\004\005\341\001" +
    "\001\000\004\056\347\001\001\000\004\057\343\001\001" +
    "\000\014\003\346\007\034\020\032\023\044\025\025\001" +
    "\001\000\014\003\345\007\034\020\032\023\044\025\025" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\003" +
    "\352\007\034\020\032\023\044\025\025\001\001\000\014" +
    "\003\351\007\034\020\032\023\044\025\025\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\062\361\001\001" +
    "\000\004\063\356\001\001\000\014\003\360\007\034\020" +
    "\032\023\044\025\025\001\001\000\014\003\357\007\034" +
    "\020\032\023\044\025\025\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\003\364\007\034\020\032\023\044" +
    "\025\025\001\001\000\014\003\363\007\034\020\032\023" +
    "\044\025\025\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\052\u0101\001\001\000\002\001\001\000\012\027" +
    "\370\030\073\031\074\032\071\001\001\000\002\001\001" +
    "\000\004\005\372\001\001\000\002\001\001\000\012\027" +
    "\374\030\073\031\074\032\071\001\001\000\002\001\001" +
    "\000\012\027\376\030\073\031\074\032\071\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\003\u0103\007\034" +
    "\020\032\023\044\025\025\001\001\000\014\003\u0102\007" +
    "\034\020\032\023\044\025\025\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\037\u0105\001\001\000\004\016" +
    "\u0106\001\001\000\002\001\001\000\006\042\u0117\044\u0116" +
    "\001\001\000\004\043\u010b\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\u010d\001\001\000\004\045\u010f" +
    "\001\001\000\004\016\u010e\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\017\u0111\023\274\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\003\u0114\007\034\020" +
    "\032\023\044\025\025\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\u0119\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\016\u011a\001\001\000\002\001\001" +
    "\000\004\005\u0127\001\001\000\004\005\u011d\001\001\000" +
    "\004\060\u0123\001\001\000\004\061\u011f\001\001\000\014" +
    "\003\u0122\007\034\020\032\023\044\025\025\001\001\000" +
    "\014\003\u0121\007\034\020\032\023\044\025\025\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\003\u0126\007" +
    "\034\020\032\023\044\025\025\001\001\000\014\003\u0125" +
    "\007\034\020\032\023\044\025\025\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\064\u012e\001\001\000\004" +
    "\065\u012a\001\001\000\014\003\u012c\007\034\020\032\023" +
    "\044\025\025\001\001\000\014\003\u012b\007\034\020\032" +
    "\023\044\025\025\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\003\u0130\007\034\020\032\023\044\025\025" +
    "\001\001\000\014\003\u012f\007\034\020\032\023\044\025" +
    "\025\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\003\u0134\007\034\020\032\023\044\025\025\001\001\000" +
    "\014\003\u0133\007\034\020\032\023\044\025\025\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\050\u0138\001\001\000\014\003\u013a\007\034\020\032" +
    "\023\044\025\025\001\001\000\014\003\u0139\007\034\020" +
    "\032\023\044\025\025\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\u013c\001\001\000\002\001\001\000" +
    "\012\027\u013e\030\073\031\074\032\071\001\001\000\002" +
    "\001\001\000\012\027\u0140\030\073\031\074\032\071\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\076\u0143" +
    "\001\001\000\004\006\u0144\001\001\000\002\001\001\000" +
    "\014\003\u0146\007\034\020\032\023\044\025\025\001\001" +
    "\000\002\001\001\000\004\016\u0148\001\001\000\002\001" +
    "\001\000\014\003\u014a\007\034\020\032\023\044\025\025" +
    "\001\001\000\002\001\001\000\004\016\u014c\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintaxPrueba$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintaxPrueba$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintaxPrueba$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private String ambito;
    private Symbol s;
    public ArbolSintactico arbolSintactico;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    private void reportarError(String codigo, String encontrado){
        if(this.s == null) this.s = cur_token;
        FrmPrincipal.errores.agregarErrorSintactico(codigo, s.left + 1, sym.terminalNames[s.sym], encontrado);
    }

    public void report_fatal_error(String message, Object info){
        System.out.println(message + " " + sym.terminalNames[((Symbol) info).sym]);
    }

    public SintaxPrueba(Lexer lexer){
        super(lexer);
    }

    private void ponerValor(LlaveTabla identificador, Object valor){
        FrmPrincipal.tablaSimbolos.agregarValor(identificador, valor);
    }

    private void ponerTipoDato(LlaveTabla identificador, String tipo){
        FrmPrincipal.tablaSimbolos.agregarTipo(identificador, tipo);
    }

    private void ponerAmbito(LlaveTabla identificador){
        FrmPrincipal.tablaSimbolos.agregarAmbito(identificador, ambito);
    }

    private void agregarFuncion(LlaveTabla id){
        FrmPrincipal.tablaSimbolos.quitarDeTabla(id);
        FrmPrincipal.funciones.agregarFuncion(id.id);
    }

    private void agregarParametro(LlaveTabla parametro){
        FrmPrincipal.funciones.agregarParametro(ambito, parametro);
    }

    private void agregarHijos(Object... hijos){
        arbolSintactico.agregarHijos(hijos);
    }

    private void agregarHijo(Object hijo){
        arbolSintactico.agregarHijo(hijo);
    }

    private void agregarHijo(Object hijo, boolean moverse){
        arbolSintactico.agregarHijo(hijo, moverse);
    }

    private void retroceder(){
        arbolSintactico.retroceder();
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintaxPrueba$actions {
  private final SintaxPrueba parser;

  /** Constructor */
  CUP$SintaxPrueba$actions(SintaxPrueba parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintaxPrueba$do_action_part00000000(
    int                        CUP$SintaxPrueba$act_num,
    java_cup.runtime.lr_parser CUP$SintaxPrueba$parser,
    java.util.Stack            CUP$SintaxPrueba$stack,
    int                        CUP$SintaxPrueba$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintaxPrueba$result;

      /* select the action based on the action number */
      switch (CUP$SintaxPrueba$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		RESULT = start_val;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintaxPrueba$parser.done_parsing();
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		LlaveTabla i = (LlaveTabla)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;

            arbolSintactico=new ArbolSintactico("inicio");
            agregarHijos("INICIO", i);
            ambito = i.id;
            ponerAmbito(i);
            agregarFuncion(i);
        
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$0",26, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)).right;
		LlaveTabla i = (LlaveTabla)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)).value;

            agregarHijos("LLAVE_ABIERTA", "COMIENZO", "PARENTESIS_ABIERTO");
            agregarHijo("tiempo_cada", true);
        
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$1",27, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$2 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-8)).right;
		LlaveTabla i = (LlaveTabla)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-8)).value;

            agregarHijos("PARENTESIS_CERRADO", "LLAVE_ABIERTA");
            agregarHijo("gramaticas", true);
        
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$2",28, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$3 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-11)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-11)).right;
		LlaveTabla i = (LlaveTabla)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-11)).value;
agregarHijo("LLAVE_CERRADA"); System.out.println("Agregando llave e inicio_fin");agregarHijo("inicio_fin", true);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$3",29, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // inicio ::= INICIO IDENTIFICADOR NT$0 LLAVE_ABIERTA COMIENZO PARENTESIS_ABIERTO NT$1 tiempo_cada PARENTESIS_CERRADO LLAVE_ABIERTA NT$2 gramaticas LLAVE_CERRADA NT$3 inicio_fin 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-13)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-13)).right;
		LlaveTabla i = (LlaveTabla)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-13)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-14)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$4 ::= 
            {
              Object RESULT =null;

            arbolSintactico=new ArbolSintactico("inicio");
            agregarHijos("INICIO", "error");
            agregarHijo("gramaticas", true);
            reportarError("ES1", null);
            ambito="rutina_principal";
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$4",30, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // inicio ::= INICIO error NT$4 gramaticas LLAVE_CERRADA inicio_fin 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$5 ::= 
            {
              Object RESULT =null;

            arbolSintactico=new ArbolSintactico("inicio");
            agregarHijo("error");
            agregarHijo("gramaticas", true);
            reportarError("ES1", null);
            ambito = "rutina_principal";
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$5",31, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // inicio ::= error NT$5 gramaticas LLAVE_CERRADA inicio_fin 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // inicio_fin ::= LLAVE_CERRADA FIN 
            {
              Object RESULT =null;
		
                    System.out.println("ANALISIS TERMINADO");
                    agregarHijos("LLAVE_CERRADA", "FIN");
                
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("inicio_fin",12, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$6 ::= 
            {
              Object RESULT =null;
reportarError("ES1", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$6",32, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // inicio_fin ::= error NT$6 FIN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		
                    System.out.println("ANALISIS TERMINADO");
                    agregarHijos("error", "FIN");
                
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("inicio_fin",12, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$7 ::= 
            {
              Object RESULT =null;
agregarHijo("FUNCION"); agregarHijo("funcion", true);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$7",33, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // inicio_fin ::= FUNCION NT$7 funcion inicio_fin 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("inicio_fin",12, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$8 ::= 
            {
              Object RESULT =null;

                    reportarError("ES1", null);
                    agregarHijo("error");
                    agregarHijo("funcion", true);
                
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$8",34, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // inicio_fin ::= error NT$8 funcion inicio_fin 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("inicio_fin",12, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$9 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		LlaveTabla i = (LlaveTabla)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;

                                
                                agregarFuncion(i);
                                ambito = i.id;
                            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$9",35, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // funcion ::= IDENTIFICADOR NT$9 PARENTESIS_ABIERTO parametros PARENTESIS_CERRADO LLAVE_ABIERTA gramaticas LLAVE_CERRADA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-7)).right;
		LlaveTabla i = (LlaveTabla)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-7)).value;
		agregarHijo("LLAVE_CERRADA"); /*retroceder();*/
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("funcion",11, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // parametros ::= declaracion_inicio COMA parametros 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).right;
		LlaveTabla i = (LlaveTabla)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		agregarParametro(i);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("parametros",13, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // parametros ::= declaracion_inicio 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		LlaveTabla i = (LlaveTabla)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		agregarParametro(i);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("parametros",13, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // parametros ::= 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("parametros",13, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // gramaticas ::= incdec 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // gramaticas ::= declaracion PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$10 ::= 
            {
              Object RESULT =null;
reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$10",36, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // gramaticas ::= declaracion NT$10 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // gramaticas ::= asignacion PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$11 ::= 
            {
              Object RESULT =null;
reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$11",37, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // gramaticas ::= asignacion NT$11 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // gramaticas ::= CONDICION condicion gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // gramaticas ::= VENTILAR ventilar PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NT$12 ::= 
            {
              Object RESULT =null;
reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$12",38, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // gramaticas ::= VENTILAR ventilar NT$12 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // gramaticas ::= ADMITIR admitir PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NT$13 ::= 
            {
              Object RESULT =null;
reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$13",39, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // gramaticas ::= ADMITIR admitir NT$13 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // gramaticas ::= AULAVACIA aula_vacia PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NT$14 ::= 
            {
              Object RESULT =null;
reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$14",40, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // gramaticas ::= AULAVACIA aula_vacia NT$14 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // gramaticas ::= SALIR PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NT$15 ::= 
            {
              Object RESULT =null;
reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$15",41, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // gramaticas ::= SALIR NT$15 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // gramaticas ::= APAGAR LUCES PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$16 ::= 
            {
              Object RESULT =null;
reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$16",42, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // gramaticas ::= APAGAR LUCES NT$16 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // gramaticas ::= ENCENDER LUCES PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NT$17 ::= 
            {
              Object RESULT =null;
reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$17",43, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // gramaticas ::= ENCENDER LUCES NT$17 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // gramaticas ::= ABRIR PUERTAS tiempo_por PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // NT$18 ::= 
            {
              Object RESULT =null;
reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$18",44, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // gramaticas ::= ABRIR PUERTAS tiempo_por NT$18 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // gramaticas ::= ABRIR PUERTAS MANTENER PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // NT$19 ::= 
            {
              Object RESULT =null;
reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$19",45, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // gramaticas ::= ABRIR PUERTAS MANTENER NT$19 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // gramaticas ::= CERRAR PUERTAS tiempo_por PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // NT$20 ::= 
            {
              Object RESULT =null;
reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$20",46, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // gramaticas ::= CERRAR PUERTAS tiempo_por NT$20 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // gramaticas ::= CERRAR PUERTAS MANTENER PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // NT$21 ::= 
            {
              Object RESULT =null;
reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$21",47, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // gramaticas ::= CERRAR PUERTAS MANTENER NT$21 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // gramaticas ::= ABRIR VENTANAS tiempo_por PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // NT$22 ::= 
            {
              Object RESULT =null;
reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$22",48, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // gramaticas ::= ABRIR VENTANAS tiempo_por NT$22 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // gramaticas ::= ABRIR VENTANAS MANTENER PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // NT$23 ::= 
            {
              Object RESULT =null;
reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$23",49, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // gramaticas ::= ABRIR VENTANAS MANTENER NT$23 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // gramaticas ::= CERRAR VENTANAS tiempo_por PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // NT$24 ::= 
            {
              Object RESULT =null;
reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$24",50, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // gramaticas ::= CERRAR VENTANAS tiempo_por NT$24 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$24
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // gramaticas ::= CERRAR VENTANAS MANTENER PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // NT$25 ::= 
            {
              Object RESULT =null;
reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$25",51, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // gramaticas ::= CERRAR VENTANAS MANTENER NT$25 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$25
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // gramaticas ::= OBTENER TEMPERATURA PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // NT$26 ::= 
            {
              Object RESULT =null;
reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$26",52, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // gramaticas ::= OBTENER TEMPERATURA NT$26 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$26
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // gramaticas ::= OBTENER PERSONAS PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // NT$27 ::= 
            {
              Object RESULT =null;
reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$27",53, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // gramaticas ::= OBTENER PERSONAS NT$27 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$27
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // gramaticas ::= SANITIZAR tiempo_por PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // NT$28 ::= 
            {
              Object RESULT =null;
reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$28",54, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // gramaticas ::= SANITIZAR tiempo_por NT$28 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$28
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // gramaticas ::= DISPENSAR tiempo_por PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // NT$29 ::= 
            {
              Object RESULT =null;
reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$29",55, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // gramaticas ::= DISPENSAR tiempo_por NT$29 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$29
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // gramaticas ::= ESTADO estado PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // NT$30 ::= 
            {
              Object RESULT =null;
reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$30",56, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // gramaticas ::= ESTADO estado NT$30 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$30
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // NT$31 ::= 
            {
              Object RESULT =null;
reportarError("ES2", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$31",57, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // gramaticas ::= error NT$31 PUNTO_COMA gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$31
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // NT$32 ::= 
            {
              Object RESULT =null;
reportarError("ES1", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$32",58, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // NT$33 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		LlaveTabla i = (LlaveTabla)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;

                                agregarFuncion(i);
                                ambito = i.id;
                            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$33",59, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // gramaticas ::= error NT$32 IDENTIFICADOR NT$33 PARENTESIS_ABIERTO parametros PARENTESIS_CERRADO LLAVE_ABIERTA gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$33
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-6)).right;
		LlaveTabla i = (LlaveTabla)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-6)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-8)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // gramaticas ::= 
            {
              Object RESULT =null;
		retroceder();
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // incdec ::= IDENTIFICADOR INC PUNTO_COMA gramaticas 
            {
              Integer RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("incdec",19, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // incdec ::= IDENTIFICADOR DEC PUNTO_COMA gramaticas 
            {
              Integer RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("incdec",19, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // incdec ::= INC IDENTIFICADOR PUNTO_COMA gramaticas 
            {
              Integer RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("incdec",19, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // incdec ::= DEC IDENTIFICADOR PUNTO_COMA gramaticas 
            {
              Integer RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("incdec",19, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // NT$34 ::= 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;

                agregarHijos("CADA", n); 
                agregarHijo("unidad_tiempo", true);
                
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$34",60, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // tiempo_cada ::= CADA NUMERO NT$34 unidad_tiempo 
            {
              Object RESULT =null;
              // propagate RESULT from NT$34
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("tiempo_cada",2, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // NT$35 ::= 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;

                agregarHijos("POR", n);
                agregarHijo("unidad_tiempo", true);
                
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$35",61, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // tiempo_por ::= POR NUMERO NT$35 unidad_tiempo 
            {
              Object RESULT =null;
              // propagate RESULT from NT$35
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("tiempo_por",3, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // unidad_tiempo ::= SEG 
            {
              Object RESULT =null;
		agregarHijo("SEG"); retroceder();retroceder();
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("unidad_tiempo",4, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // unidad_tiempo ::= MIN 
            {
              Object RESULT =null;
		agregarHijo("SEG"); retroceder();retroceder();
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("unidad_tiempo",4, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // unidad_tiempo ::= HR 
            {
              Object RESULT =null;
		agregarHijo("SEG"); retroceder();retroceder();
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("unidad_tiempo",4, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // unidad_tiempo ::= error 
            {
              Object RESULT =null;
		
                reportarError("ES3", null); 
                agregarHijo("error");
                retroceder(); retroceder();
                
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("unidad_tiempo",4, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // estado ::= LUCES 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("estado",10, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // estado ::= PUERTAS 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("estado",10, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // estado ::= VENTANAS 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("estado",10, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // asignacion ::= IDENTIFICADOR ASIGNACION op_aritmetica 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("asignacion",14, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // NT$36 ::= 
            {
              Object RESULT =null;
System.out.println("Error de asignacion");
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$36",62, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // asignacion ::= error NT$36 ASIGNACION 
            {
              Object RESULT =null;
              // propagate RESULT from NT$36
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("asignacion",14, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // declaracion ::= declaracion_inicio 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // declaracion ::= declaracion_inicio declaracion_valor 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).right;
		LlaveTabla i = (LlaveTabla)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		ponerValor(i,valor);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // declaracion_inicio ::= IDENTIFICADOR DECLARAR declaracion_tipo_dato 
            {
              LlaveTabla RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).right;
		LlaveTabla i = (LlaveTabla)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		String td = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		ponerAmbito(i);ponerTipoDato(i,td);RESULT=i;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("declaracion_inicio",17, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // declaracion_valor ::= ASIGNACION OP_BOOLEANO 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Boolean valor = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=valor;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("declaracion_valor",6, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // declaracion_valor ::= ASIGNACION op_aritmetica 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Integer valor = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=valor;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("declaracion_valor",6, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // declaracion_tipo_dato ::= COMO tipo_dato 
            {
              String RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		String td = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT = td;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("declaracion_tipo_dato",15, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // tipo_dato ::= ENTERO 
            {
              String RESULT =null;
		RESULT = "entero";
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("tipo_dato",16, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // tipo_dato ::= LOGICO 
            {
              String RESULT =null;
		RESULT = "logico";
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("tipo_dato",16, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // tipo_dato ::= error 
            {
              String RESULT =null;
		reportarError("ES4", null); RESULT = "error";
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("tipo_dato",16, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // op_aritmetica ::= PARENTESIS_ABIERTO op_aritmetica PARENTESIS_CERRADO 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op_aritmetica",18, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // op_aritmetica ::= NUMERO AR_SUMA op_aritmetica 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op_aritmetica",18, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // op_aritmetica ::= NUMERO AR_RESTA op_aritmetica 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op_aritmetica",18, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // op_aritmetica ::= NUMERO AR_MULTIPLICACION op_aritmetica 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op_aritmetica",18, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // op_aritmetica ::= NUMERO AR_DIVISION op_aritmetica 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op_aritmetica",18, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // op_aritmetica ::= NUMERO 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op_aritmetica",18, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // op_aritmetica ::= IDENTIFICADOR 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		LlaveTabla a = (LlaveTabla)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op_aritmetica",18, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // op_aritmetica ::= error 
            {
              Integer RESULT =null;
		reportarError("ES6", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op_aritmetica",18, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // condicion ::= PARENTESIS_ABIERTO sentencia_booleana PARENTESIS_CERRADO LLAVE_ABIERTA gramaticas LLAVE_CERRADA 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("condicion",20, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // condicion ::= PARENTESIS_ABIERTO sentencia_booleana PARENTESIS_CERRADO LLAVE_ABIERTA gramaticas LLAVE_CERRADA sino 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("condicion",20, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // sentencia_booleana ::= OP_BOOLEANO 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("sentencia_booleana",21, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // sentencia_booleana ::= OP_BOOLEANO LOGICO_AND sentencia_booleana 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("sentencia_booleana",21, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // sentencia_booleana ::= OP_BOOLEANO LOGICO_OR sentencia_booleana 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("sentencia_booleana",21, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // sentencia_booleana ::= IDENTIFICADOR 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("sentencia_booleana",21, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // sentencia_booleana ::= IDENTIFICADOR LOGICO_AND sentencia_booleana IDENTIFICADOR LOGICO_OR sentencia_booleana 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("sentencia_booleana",21, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // sentencia_booleana ::= negacion_identificador 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("sentencia_booleana",21, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // sentencia_booleana ::= negacion_identificador LOGICO_AND sentencia_booleana 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("sentencia_booleana",21, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // sentencia_booleana ::= negacion_identificador LOGICO_OR sentencia_booleana 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("sentencia_booleana",21, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // sentencia_booleana ::= negacion_booleana 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("sentencia_booleana",21, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // sentencia_booleana ::= negacion_booleana LOGICO_AND sentencia_booleana 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("sentencia_booleana",21, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // sentencia_booleana ::= negacion_booleana LOGICO_OR sentencia_booleana 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("sentencia_booleana",21, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // sentencia_booleana ::= relacional_booleana 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("sentencia_booleana",21, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // sentencia_booleana ::= relacional_booleana LOGICO_AND sentencia_booleana 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("sentencia_booleana",21, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // sentencia_booleana ::= relacional_booleana LOGICO_OR sentencia_booleana 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("sentencia_booleana",21, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // sentencia_booleana ::= error 
            {
              Boolean RESULT =null;
		reportarError("ES5", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("sentencia_booleana",21, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // negacion_identificador ::= NEGACION IDENTIFICADOR 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("negacion_identificador",22, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // negacion_booleana ::= NEGACION PARENTESIS_ABIERTO sentencia_booleana PARENTESIS_CERRADO 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("negacion_booleana",23, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // relacional_booleana ::= IDENTIFICADOR REL_MENOR op_aritmetica 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("relacional_booleana",24, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // relacional_booleana ::= IDENTIFICADOR REL_MAYOR op_aritmetica 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("relacional_booleana",24, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // relacional_booleana ::= IDENTIFICADOR REL_MENOR_IGUAL op_aritmetica 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("relacional_booleana",24, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // relacional_booleana ::= IDENTIFICADOR REL_MAYOR_IGUAL op_aritmetica 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("relacional_booleana",24, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // relacional_booleana ::= IDENTIFICADOR REL_DIFERENTE op_aritmetica 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("relacional_booleana",24, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // relacional_booleana ::= IDENTIFICADOR REL_IGUAL op_aritmetica 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("relacional_booleana",24, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // sino ::= SINO CONDICION condicion 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("sino",25, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // sino ::= SINO LLAVE_ABIERTA gramaticas LLAVE_CERRADA 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("sino",25, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // ventilar ::= VENTILAR PARENTESIS_ABIERTO tiempo_por COMA sentencia_booleana COMA sentencia_booleana PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("ventilar",7, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // admitir ::= ADMITIR PARENTESIS_ABIERTO sentencia_booleana COMA tiempo_por COMA sentencia_booleana PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("admitir",8, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // aula_vacia ::= AULAVACIA PARENTESIS_ABIERTO sentencia_booleana COMA tiempo_por COMA sentencia_booleana COMA sentencia_booleana PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("aula_vacia",9, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-9)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintaxPrueba$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintaxPrueba$do_action(
    int                        CUP$SintaxPrueba$act_num,
    java_cup.runtime.lr_parser CUP$SintaxPrueba$parser,
    java.util.Stack            CUP$SintaxPrueba$stack,
    int                        CUP$SintaxPrueba$top)
    throws java.lang.Exception
    {
              return CUP$SintaxPrueba$do_action_part00000000(
                               CUP$SintaxPrueba$act_num,
                               CUP$SintaxPrueba$parser,
                               CUP$SintaxPrueba$stack,
                               CUP$SintaxPrueba$top);
    }
}

}
