
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analisis;

import java_cup.runtime.Symbol;
import codigo.FrmPrincipal;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintaxPrueba extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public SintaxPrueba() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintaxPrueba(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintaxPrueba(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\332\000\002\002\004\000\002\042\002\000\002\002" +
    "\016\000\002\043\002\000\002\044\002\000\002\002\017" +
    "\000\002\045\002\000\002\002\016\000\002\046\002\000" +
    "\002\002\014\000\002\047\002\000\002\002\013\000\002" +
    "\014\004\000\002\014\005\000\002\014\003\000\002\050" +
    "\002\000\002\014\005\000\002\051\002\000\002\013\012" +
    "\000\002\052\002\000\002\013\012\000\002\053\002\000" +
    "\002\015\006\000\002\015\003\000\002\015\002\000\002" +
    "\054\002\000\002\003\007\000\002\055\002\000\002\003" +
    "\006\000\002\056\002\000\002\003\007\000\002\057\002" +
    "\000\002\003\006\000\002\060\002\000\002\003\007\000" +
    "\002\061\002\000\002\003\006\000\002\062\002\000\002" +
    "\003\007\000\002\063\002\000\002\003\006\000\002\003" +
    "\005\000\002\064\002\000\002\003\005\000\002\065\002" +
    "\000\002\003\007\000\002\066\002\000\002\003\006\000" +
    "\002\003\005\000\002\067\002\000\002\003\005\000\002" +
    "\003\005\000\002\003\006\000\002\070\002\000\002\003" +
    "\006\000\002\003\006\000\002\071\002\000\002\003\006" +
    "\000\002\003\007\000\002\072\002\000\002\003\007\000" +
    "\002\003\007\000\002\073\002\000\002\003\007\000\002" +
    "\003\007\000\002\074\002\000\002\003\007\000\002\003" +
    "\007\000\002\075\002\000\002\003\007\000\002\003\006" +
    "\000\002\076\002\000\002\003\006\000\002\003\006\000" +
    "\002\077\002\000\002\003\006\000\002\003\005\000\002" +
    "\100\002\000\002\003\005\000\002\003\004\000\002\003" +
    "\003\000\002\003\004\000\002\003\005\000\002\101\002" +
    "\000\002\003\006\000\002\102\002\000\002\003\007\000" +
    "\002\103\002\000\002\003\007\000\002\104\002\000\002" +
    "\003\007\000\002\105\002\000\002\003\007\000\002\106" +
    "\002\000\002\003\006\000\002\107\002\000\002\003\007" +
    "\000\002\110\002\000\002\003\007\000\002\111\002\000" +
    "\002\003\007\000\002\112\002\000\002\003\010\000\002" +
    "\113\002\000\002\003\010\000\002\114\002\000\002\003" +
    "\007\000\002\003\002\000\002\033\003\000\002\033\003" +
    "\000\002\033\003\000\002\021\004\000\002\021\004\000" +
    "\002\021\004\000\002\021\004\000\002\021\004\000\002" +
    "\021\004\000\002\115\002\000\002\034\007\000\002\116" +
    "\002\000\002\034\007\000\002\034\003\000\002\117\002" +
    "\000\002\020\006\000\002\020\003\000\002\120\002\000" +
    "\002\121\002\000\002\020\007\000\002\020\002\000\002" +
    "\004\005\000\002\122\002\000\002\004\006\000\002\123" +
    "\002\000\002\005\006\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\124\002\000\002\016\006\000\002\125\002\000\002\016" +
    "\006\000\002\126\002\000\002\016\005\000\002\127\002" +
    "\000\002\037\006\000\002\130\002\000\002\037\006\000" +
    "\002\131\002\000\002\037\005\000\002\007\004\000\002" +
    "\035\004\000\002\036\003\000\002\036\003\000\002\036" +
    "\003\000\002\132\002\000\002\017\005\000\002\133\002" +
    "\000\002\134\002\000\002\023\007\000\002\135\002\000" +
    "\002\136\002\000\002\023\007\000\002\023\002\000\002" +
    "\137\002\000\002\024\005\000\002\140\002\000\002\025" +
    "\005\000\002\141\002\000\002\025\005\000\002\142\002" +
    "\000\002\025\005\000\002\143\002\000\002\025\005\000" +
    "\002\144\002\000\002\025\005\000\002\145\002\000\002" +
    "\025\005\000\002\025\002\000\002\146\002\000\002\026" +
    "\005\000\002\147\002\000\002\150\002\000\002\027\007" +
    "\000\002\151\002\000\002\152\002\000\002\027\007\000" +
    "\002\027\002\000\002\153\002\000\002\030\005\000\002" +
    "\154\002\000\002\155\002\000\002\031\007\000\002\156" +
    "\002\000\002\157\002\000\002\031\007\000\002\031\002" +
    "\000\002\032\003\000\002\032\004\000\002\032\004\000" +
    "\002\032\003\000\002\022\003\000\002\022\003\000\002" +
    "\022\004\000\002\022\004\000\002\022\003\000\002\022" +
    "\004\000\002\022\005\000\002\040\010\000\002\040\011" +
    "\000\002\041\005\000\002\041\006\000\002\010\012\000" +
    "\002\011\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u019e\000\006\003\004\016\005\001\002\000\010\005" +
    "\ufff9\065\ufff7\075\ufffe\001\002\000\006\003\010\075\011" +
    "\001\002\000\004\002\007\001\002\000\004\002\001\001" +
    "\002\000\004\067\ufffb\001\002\000\004\067\000\001\002" +
    "\000\004\067\013\001\002\000\004\005\014\001\002\000" +
    "\004\065\015\001\002\000\006\003\016\021\017\001\002" +
    "\000\024\003\uff7f\033\uff7f\042\uff7f\054\uff7f\057\uff7f\065" +
    "\uff7f\073\uff7f\074\uff7f\075\uff7f\001\002\000\024\003\061" +
    "\033\053\042\065\054\060\057\067\065\063\073\056\074" +
    "\055\075\070\001\002\000\004\066\021\001\002\000\004" +
    "\067\022\001\002\000\036\003\035\010\042\014\030\015" +
    "\031\026\043\027\033\036\024\037\027\040\023\044\034" +
    "\062\037\063\040\070\uff96\075\041\001\002\000\004\022" +
    "\052\001\002\000\006\003\u0167\041\u0168\001\002\000\042" +
    "\003\uffd7\010\uffd7\014\uffd7\015\uffd7\026\uffd7\027\uffd7\036" +
    "\uffd7\037\uffd7\040\uffd7\044\uffd7\062\uffd7\063\uffd7\064\u015c" +
    "\070\uffd7\071\u015e\075\uffd7\001\002\000\004\070\u013b\001" +
    "\002\000\006\003\u0132\041\u0133\001\002\000\004\022\052" +
    "\001\002\000\010\003\u012a\070\uffb1\071\u012b\001\002\000" +
    "\040\003\uffd0\010\uffd0\014\uffd0\015\uffd0\026\uffd0\027\uffd0" +
    "\036\uffd0\037\uffd0\040\uffd0\044\uffd0\062\uffd0\063\uffd0\070" +
    "\uffd0\071\u0127\075\uffd0\001\002\000\006\030\u011a\031\u011b" +
    "\001\002\000\012\003\325\012\314\013\334\075\330\001" +
    "\002\000\040\003\325\012\314\013\334\017\uff6b\020\uff69" +
    "\022\uff98\030\uff9a\031\uff9c\041\uffa2\062\uffac\063\uffaa\064" +
    "\uff71\065\uffa4\071\uffae\075\330\001\002\000\040\003\uffb4" +
    "\010\uffb4\014\uffb4\015\uffb4\026\uffb4\027\uffb4\036\uffb4\037" +
    "\uffb4\040\uffb4\044\uffb4\062\uffb4\063\uffb4\070\uffb4\071\311" +
    "\075\uffb4\001\002\000\006\003\276\075\277\001\002\000" +
    "\006\003\264\075\265\001\002\000\034\003\uff6f\017\uff6d" +
    "\033\uff6f\042\uff6f\054\uff6f\057\uff6f\062\233\063\236\064" +
    "\uff73\065\uff6f\073\uff6f\074\uff6f\075\uff6f\001\002\000\004" +
    "\065\215\001\002\000\006\030\044\031\045\001\002\000" +
    "\010\003\047\022\052\032\051\001\002\000\010\003\047" +
    "\022\052\032\051\001\002\000\040\003\uffc6\010\uffc6\014" +
    "\uffc6\015\uffc6\026\uffc6\027\uffc6\036\uffc6\037\uffc6\040\uffc6" +
    "\044\uffc6\062\uffc6\063\uffc6\070\uffc6\071\203\075\uffc6\001" +
    "\002\000\040\003\uff93\010\uff93\014\uff93\015\uff93\026\uff93" +
    "\027\uff93\036\uff93\037\uff93\040\uff93\044\uff93\062\uff93\063" +
    "\uff93\070\uff93\071\uff93\075\uff93\001\002\000\040\003\uff94" +
    "\010\uff94\014\uff94\015\uff94\026\uff94\027\uff94\036\uff94\037" +
    "\uff94\040\uff94\044\uff94\062\uff94\063\uff94\070\uff94\071\uff94" +
    "\075\uff94\001\002\000\040\003\uff95\010\uff95\014\uff95\015" +
    "\uff95\026\uff95\027\uff95\036\uff95\037\uff95\040\uff95\044\uff95" +
    "\062\uff95\063\uff95\070\uff95\071\uff95\075\uff95\001\002\000" +
    "\024\003\061\033\053\042\065\054\060\057\067\065\063" +
    "\073\056\074\055\075\070\001\002\000\006\034\201\035" +
    "\202\001\002\000\102\003\uff38\010\uff38\014\uff38\015\uff38" +
    "\023\uff38\024\uff38\025\uff38\026\uff38\027\uff38\036\uff38\037" +
    "\uff38\040\uff38\044\uff38\045\uff38\046\uff38\047\uff38\050\uff38" +
    "\051\uff38\052\uff38\053\uff38\054\uff38\055\uff38\056\uff38\060" +
    "\uff38\061\uff38\062\uff38\063\uff38\066\uff38\070\uff38\071\uff38" +
    "\072\uff38\075\uff38\001\002\000\102\003\uff30\010\uff30\014" +
    "\uff30\015\uff30\023\uff30\024\uff30\025\uff30\026\uff30\027\uff30" +
    "\036\uff30\037\uff30\040\uff30\044\uff30\045\uff30\046\uff30\047" +
    "\uff30\050\uff30\051\uff30\052\uff30\053\uff30\054\uff30\055\uff30" +
    "\056\uff30\060\uff30\061\uff30\062\uff30\063\uff30\066\uff30\070" +
    "\uff30\071\uff30\072\uff30\075\uff30\001\002\000\102\003\uff34" +
    "\010\uff34\014\uff34\015\uff34\023\uff34\024\uff34\025\uff34\026" +
    "\uff34\027\uff34\036\uff34\037\uff34\040\uff34\044\uff34\045\uff34" +
    "\046\uff34\047\uff34\050\uff34\051\uff34\052\uff34\053\uff34\054" +
    "\uff34\055\uff34\056\uff34\060\uff34\061\uff34\062\uff34\063\uff34" +
    "\066\uff34\070\uff34\071\uff34\072\uff34\075\uff34\001\002\000" +
    "\012\003\uff7d\023\uff7d\024\uff7d\025\uff7d\001\002\000\016" +
    "\033\053\042\065\065\063\073\056\074\055\075\070\001" +
    "\002\000\102\003\uff35\010\uff35\014\uff35\015\uff35\023\uff35" +
    "\024\uff35\025\uff35\026\uff35\027\uff35\036\uff35\037\uff35\040" +
    "\uff35\044\uff35\045\uff35\046\uff35\047\uff35\050\uff35\051\uff35" +
    "\052\uff35\053\uff35\054\uff35\055\uff35\056\uff35\060\uff35\061" +
    "\uff35\062\uff35\063\uff35\066\uff35\070\uff35\071\uff35\072\uff35" +
    "\075\uff35\001\002\000\102\003\uff41\010\uff41\014\uff41\015" +
    "\uff41\023\uff41\024\uff41\025\uff41\026\uff41\027\uff41\036\uff41" +
    "\037\uff41\040\uff41\044\uff41\045\uff41\046\uff41\047\uff41\050" +
    "\uff41\051\uff41\052\uff41\053\uff41\054\uff41\055\uff41\056\uff41" +
    "\060\uff41\061\uff41\062\uff41\063\uff41\066\uff41\070\uff41\071" +
    "\uff41\072\uff41\075\uff41\001\002\000\024\003\061\033\053" +
    "\042\065\054\060\057\067\065\063\073\056\074\055\075" +
    "\070\001\002\000\076\003\uff4a\010\uff4a\014\uff4a\015\uff4a" +
    "\023\uff4a\024\uff4a\025\uff4a\026\uff4a\027\uff4a\036\uff4a\037" +
    "\uff4a\040\uff4a\044\uff4a\045\uff4a\046\uff4a\047\uff4a\050\uff4a" +
    "\051\uff4a\052\uff4a\053\uff4a\054\uff4a\060\uff4a\061\uff4a\062" +
    "\uff4a\063\uff4a\066\uff4a\070\uff4a\071\uff4a\072\uff4a\075\uff4a" +
    "\001\002\000\012\003\133\030\134\031\137\041\135\001" +
    "\002\000\072\003\uff59\010\uff59\014\uff59\015\uff59\023\uff59" +
    "\024\uff59\025\uff59\026\uff59\027\uff59\036\uff59\037\uff59\040" +
    "\uff59\044\uff59\045\uff59\046\uff59\047\uff59\050\uff59\051\uff59" +
    "\052\uff59\060\uff59\061\uff59\062\uff59\063\uff59\066\uff59\070" +
    "\uff59\071\uff59\072\uff59\075\uff59\001\002\000\016\033\053" +
    "\042\065\065\063\073\056\074\055\075\070\001\002\000" +
    "\102\003\uff33\010\uff33\014\uff33\015\uff33\023\uff33\024\uff33" +
    "\025\uff33\026\uff33\027\uff33\036\uff33\037\uff33\040\uff33\044" +
    "\uff33\045\uff33\046\uff33\047\uff33\050\uff33\051\uff33\052\uff33" +
    "\053\uff33\054\uff33\055\uff33\056\uff33\060\uff33\061\uff33\062" +
    "\uff33\063\uff33\066\uff33\070\uff33\071\uff33\072\uff33\075\uff33" +
    "\001\002\000\056\003\uff62\010\uff62\014\uff62\015\uff62\023" +
    "\uff62\024\uff62\025\uff62\026\uff62\027\uff62\036\uff62\037\uff62" +
    "\040\uff62\044\uff62\060\uff62\061\uff62\062\uff62\063\uff62\066" +
    "\uff62\070\uff62\071\uff62\072\uff62\075\uff62\001\002\000\056" +
    "\003\uff5a\010\uff5a\014\uff5a\015\uff5a\023\uff5a\024\uff5a\025" +
    "\uff5a\026\uff5a\027\uff5a\036\uff5a\037\uff5a\040\uff5a\044\uff5a" +
    "\060\074\061\075\062\uff5a\063\uff5a\066\uff5a\070\uff5a\071" +
    "\uff5a\072\uff5a\075\uff5a\001\002\000\052\003\uff61\010\uff61" +
    "\014\uff61\015\uff61\023\uff61\024\uff61\025\uff61\026\uff61\027" +
    "\uff61\036\uff61\037\uff61\040\uff61\044\uff61\062\uff61\063\uff61" +
    "\066\uff61\070\uff61\071\uff61\072\uff61\075\uff61\001\002\000" +
    "\024\003\uff60\033\uff60\042\uff60\054\uff60\057\uff60\065\uff60" +
    "\073\uff60\074\uff60\075\uff60\001\002\000\024\003\uff5d\033" +
    "\uff5d\042\uff5d\054\uff5d\057\uff5d\065\uff5d\073\uff5d\074\uff5d" +
    "\075\uff5d\001\002\000\024\003\061\033\053\042\065\054" +
    "\060\057\067\065\063\073\056\074\055\075\070\001\002" +
    "\000\056\003\uff5c\010\uff5c\014\uff5c\015\uff5c\023\uff5c\024" +
    "\uff5c\025\uff5c\026\uff5c\027\uff5c\036\uff5c\037\uff5c\040\uff5c" +
    "\044\uff5c\060\uff5c\061\uff5c\062\uff5c\063\uff5c\066\uff5c\070" +
    "\uff5c\071\uff5c\072\uff5c\075\uff5c\001\002\000\056\003\uff5a" +
    "\010\uff5a\014\uff5a\015\uff5a\023\uff5a\024\uff5a\025\uff5a\026" +
    "\uff5a\027\uff5a\036\uff5a\037\uff5a\040\uff5a\044\uff5a\060\074" +
    "\061\075\062\uff5a\063\uff5a\066\uff5a\070\uff5a\071\uff5a\072" +
    "\uff5a\075\uff5a\001\002\000\052\003\uff5b\010\uff5b\014\uff5b" +
    "\015\uff5b\023\uff5b\024\uff5b\025\uff5b\026\uff5b\027\uff5b\036" +
    "\uff5b\037\uff5b\040\uff5b\044\uff5b\062\uff5b\063\uff5b\066\uff5b" +
    "\070\uff5b\071\uff5b\072\uff5b\075\uff5b\001\002\000\024\003" +
    "\061\033\053\042\065\054\060\057\067\065\063\073\056" +
    "\074\055\075\070\001\002\000\056\003\uff5f\010\uff5f\014" +
    "\uff5f\015\uff5f\023\uff5f\024\uff5f\025\uff5f\026\uff5f\027\uff5f" +
    "\036\uff5f\037\uff5f\040\uff5f\044\uff5f\060\uff5f\061\uff5f\062" +
    "\uff5f\063\uff5f\066\uff5f\070\uff5f\071\uff5f\072\uff5f\075\uff5f" +
    "\001\002\000\056\003\uff5a\010\uff5a\014\uff5a\015\uff5a\023" +
    "\uff5a\024\uff5a\025\uff5a\026\uff5a\027\uff5a\036\uff5a\037\uff5a" +
    "\040\uff5a\044\uff5a\060\074\061\075\062\uff5a\063\uff5a\066" +
    "\uff5a\070\uff5a\071\uff5a\072\uff5a\075\uff5a\001\002\000\052" +
    "\003\uff5e\010\uff5e\014\uff5e\015\uff5e\023\uff5e\024\uff5e\025" +
    "\uff5e\026\uff5e\027\uff5e\036\uff5e\037\uff5e\040\uff5e\044\uff5e" +
    "\062\uff5e\063\uff5e\066\uff5e\070\uff5e\071\uff5e\072\uff5e\075" +
    "\uff5e\001\002\000\102\003\uff36\010\uff36\014\uff36\015\uff36" +
    "\023\uff36\024\uff36\025\uff36\026\uff36\027\uff36\036\uff36\037" +
    "\uff36\040\uff36\044\uff36\045\uff36\046\uff36\047\uff36\050\uff36" +
    "\051\uff36\052\uff36\053\uff36\054\uff36\055\uff36\056\uff36\060" +
    "\uff36\061\uff36\062\uff36\063\uff36\066\uff36\070\uff36\071\uff36" +
    "\072\uff36\075\uff36\001\002\000\072\003\uff4b\010\uff4b\014" +
    "\uff4b\015\uff4b\023\uff4b\024\uff4b\025\uff4b\026\uff4b\027\uff4b" +
    "\036\uff4b\037\uff4b\040\uff4b\044\uff4b\045\112\046\114\047" +
    "\111\050\110\051\115\052\116\060\uff4b\061\uff4b\062\uff4b" +
    "\063\uff4b\066\uff4b\070\uff4b\071\uff4b\072\uff4b\075\uff4b\001" +
    "\002\000\024\003\uff51\033\uff51\042\uff51\054\uff51\057\uff51" +
    "\065\uff51\073\uff51\074\uff51\075\uff51\001\002\000\024\003" +
    "\uff53\033\uff53\042\uff53\054\uff53\057\uff53\065\uff53\073\uff53" +
    "\074\uff53\075\uff53\001\002\000\024\003\uff57\033\uff57\042" +
    "\uff57\054\uff57\057\uff57\065\uff57\073\uff57\074\uff57\075\uff57" +
    "\001\002\000\056\003\uff58\010\uff58\014\uff58\015\uff58\023" +
    "\uff58\024\uff58\025\uff58\026\uff58\027\uff58\036\uff58\037\uff58" +
    "\040\uff58\044\uff58\060\uff58\061\uff58\062\uff58\063\uff58\066" +
    "\uff58\070\uff58\071\uff58\072\uff58\075\uff58\001\002\000\024" +
    "\003\uff55\033\uff55\042\uff55\054\uff55\057\uff55\065\uff55\073" +
    "\uff55\074\uff55\075\uff55\001\002\000\024\003\uff4f\033\uff4f" +
    "\042\uff4f\054\uff4f\057\uff4f\065\uff4f\073\uff4f\074\uff4f\075" +
    "\uff4f\001\002\000\024\003\uff4d\033\uff4d\042\uff4d\054\uff4d" +
    "\057\uff4d\065\uff4d\073\uff4d\074\uff4d\075\uff4d\001\002\000" +
    "\024\003\061\033\053\042\065\054\060\057\067\065\063" +
    "\073\056\074\055\075\070\001\002\000\056\003\uff4c\010" +
    "\uff4c\014\uff4c\015\uff4c\023\uff4c\024\uff4c\025\uff4c\026\uff4c" +
    "\027\uff4c\036\uff4c\037\uff4c\040\uff4c\044\uff4c\060\uff4c\061" +
    "\uff4c\062\uff4c\063\uff4c\066\uff4c\070\uff4c\071\uff4c\072\uff4c" +
    "\075\uff4c\001\002\000\024\003\061\033\053\042\065\054" +
    "\060\057\067\065\063\073\056\074\055\075\070\001\002" +
    "\000\056\003\uff4e\010\uff4e\014\uff4e\015\uff4e\023\uff4e\024" +
    "\uff4e\025\uff4e\026\uff4e\027\uff4e\036\uff4e\037\uff4e\040\uff4e" +
    "\044\uff4e\060\uff4e\061\uff4e\062\uff4e\063\uff4e\066\uff4e\070" +
    "\uff4e\071\uff4e\072\uff4e\075\uff4e\001\002\000\024\003\061" +
    "\033\053\042\065\054\060\057\067\065\063\073\056\074" +
    "\055\075\070\001\002\000\056\003\uff54\010\uff54\014\uff54" +
    "\015\uff54\023\uff54\024\uff54\025\uff54\026\uff54\027\uff54\036" +
    "\uff54\037\uff54\040\uff54\044\uff54\060\uff54\061\uff54\062\uff54" +
    "\063\uff54\066\uff54\070\uff54\071\uff54\072\uff54\075\uff54\001" +
    "\002\000\024\003\061\033\053\042\065\054\060\057\067" +
    "\065\063\073\056\074\055\075\070\001\002\000\056\003" +
    "\uff56\010\uff56\014\uff56\015\uff56\023\uff56\024\uff56\025\uff56" +
    "\026\uff56\027\uff56\036\uff56\037\uff56\040\uff56\044\uff56\060" +
    "\uff56\061\uff56\062\uff56\063\uff56\066\uff56\070\uff56\071\uff56" +
    "\072\uff56\075\uff56\001\002\000\024\003\061\033\053\042" +
    "\065\054\060\057\067\065\063\073\056\074\055\075\070" +
    "\001\002\000\056\003\uff52\010\uff52\014\uff52\015\uff52\023" +
    "\uff52\024\uff52\025\uff52\026\uff52\027\uff52\036\uff52\037\uff52" +
    "\040\uff52\044\uff52\060\uff52\061\uff52\062\uff52\063\uff52\066" +
    "\uff52\070\uff52\071\uff52\072\uff52\075\uff52\001\002\000\024" +
    "\003\061\033\053\042\065\054\060\057\067\065\063\073" +
    "\056\074\055\075\070\001\002\000\056\003\uff50\010\uff50" +
    "\014\uff50\015\uff50\023\uff50\024\uff50\025\uff50\026\uff50\027" +
    "\uff50\036\uff50\037\uff50\040\uff50\044\uff50\060\uff50\061\uff50" +
    "\062\uff50\063\uff50\066\uff50\070\uff50\071\uff50\072\uff50\075" +
    "\uff50\001\002\000\102\003\uff74\010\uff74\014\uff74\015\uff74" +
    "\023\uff74\024\uff74\025\uff74\026\uff74\027\uff74\036\uff74\037" +
    "\uff74\040\uff74\044\uff74\045\uff74\046\uff74\047\uff74\050\uff74" +
    "\051\uff74\052\uff74\053\uff74\054\uff74\055\uff74\056\uff74\060" +
    "\uff74\061\uff74\062\uff74\063\uff74\066\uff74\070\uff74\071\uff74" +
    "\072\uff74\075\uff74\001\002\000\102\003\uff75\010\uff75\014" +
    "\uff75\015\uff75\023\uff75\024\uff75\025\uff75\026\uff75\027\uff75" +
    "\036\uff75\037\uff75\040\uff75\044\uff75\045\uff75\046\uff75\047" +
    "\uff75\050\uff75\051\uff75\052\uff75\053\uff75\054\uff75\055\uff75" +
    "\056\uff75\060\uff75\061\uff75\062\uff75\063\uff75\066\uff75\070" +
    "\uff75\071\uff75\072\uff75\075\uff75\001\002\000\102\003\uff77" +
    "\010\uff77\014\uff77\015\uff77\023\uff77\024\uff77\025\uff77\026" +
    "\uff77\027\uff77\036\uff77\037\uff77\040\uff77\044\uff77\045\uff77" +
    "\046\uff77\047\uff77\050\uff77\051\uff77\052\uff77\053\uff77\054" +
    "\uff77\055\uff77\056\uff77\060\uff77\061\uff77\062\uff77\063\uff77" +
    "\066\uff77\070\uff77\071\uff77\072\uff77\075\uff77\001\002\000" +
    "\102\003\uff2f\010\uff2f\014\uff2f\015\uff2f\023\uff2f\024\uff2f" +
    "\025\uff2f\026\uff2f\027\uff2f\036\uff2f\037\uff2f\040\uff2f\044" +
    "\uff2f\045\uff2f\046\uff2f\047\uff2f\050\uff2f\051\uff2f\052\uff2f" +
    "\053\uff2f\054\uff2f\055\uff2f\056\uff2f\060\uff2f\061\uff2f\062" +
    "\uff2f\063\uff2f\066\uff2f\070\uff2f\071\uff2f\072\uff2f\075\uff2f" +
    "\001\002\000\102\003\uff76\010\uff76\014\uff76\015\uff76\023" +
    "\uff76\024\uff76\025\uff76\026\uff76\027\uff76\036\uff76\037\uff76" +
    "\040\uff76\044\uff76\045\uff76\046\uff76\047\uff76\050\uff76\051" +
    "\uff76\052\uff76\053\uff76\054\uff76\055\uff76\056\uff76\060\uff76" +
    "\061\uff76\062\uff76\063\uff76\066\uff76\070\uff76\071\uff76\072" +
    "\uff76\075\uff76\001\002\000\076\003\uff42\010\uff42\014\uff42" +
    "\015\uff42\023\uff42\024\uff42\025\uff42\026\uff42\027\uff42\036" +
    "\uff42\037\uff42\040\uff42\044\uff42\045\uff42\046\uff42\047\uff42" +
    "\050\uff42\051\uff42\052\uff42\053\143\054\142\060\uff42\061" +
    "\uff42\062\uff42\063\uff42\066\uff42\070\uff42\071\uff42\072\uff42" +
    "\075\uff42\001\002\000\072\003\uff49\010\uff49\014\uff49\015" +
    "\uff49\023\uff49\024\uff49\025\uff49\026\uff49\027\uff49\036\uff49" +
    "\037\uff49\040\uff49\044\uff49\045\uff49\046\uff49\047\uff49\050" +
    "\uff49\051\uff49\052\uff49\060\uff49\061\uff49\062\uff49\063\uff49" +
    "\066\uff49\070\uff49\071\uff49\072\uff49\075\uff49\001\002\000" +
    "\024\003\uff45\033\uff45\042\uff45\054\uff45\057\uff45\065\uff45" +
    "\073\uff45\074\uff45\075\uff45\001\002\000\024\003\uff48\033" +
    "\uff48\042\uff48\054\uff48\057\uff48\065\uff48\073\uff48\074\uff48" +
    "\075\uff48\001\002\000\024\003\061\033\053\042\065\054" +
    "\060\057\067\065\063\073\056\074\055\075\070\001\002" +
    "\000\076\003\uff47\010\uff47\014\uff47\015\uff47\023\uff47\024" +
    "\uff47\025\uff47\026\uff47\027\uff47\036\uff47\037\uff47\040\uff47" +
    "\044\uff47\045\uff47\046\uff47\047\uff47\050\uff47\051\uff47\052" +
    "\uff47\053\uff47\054\uff47\060\uff47\061\uff47\062\uff47\063\uff47" +
    "\066\uff47\070\uff47\071\uff47\072\uff47\075\uff47\001\002\000" +
    "\076\003\uff42\010\uff42\014\uff42\015\uff42\023\uff42\024\uff42" +
    "\025\uff42\026\uff42\027\uff42\036\uff42\037\uff42\040\uff42\044" +
    "\uff42\045\uff42\046\uff42\047\uff42\050\uff42\051\uff42\052\uff42" +
    "\053\143\054\142\060\uff42\061\uff42\062\uff42\063\uff42\066" +
    "\uff42\070\uff42\071\uff42\072\uff42\075\uff42\001\002\000\072" +
    "\003\uff46\010\uff46\014\uff46\015\uff46\023\uff46\024\uff46\025" +
    "\uff46\026\uff46\027\uff46\036\uff46\037\uff46\040\uff46\044\uff46" +
    "\045\uff46\046\uff46\047\uff46\050\uff46\051\uff46\052\uff46\060" +
    "\uff46\061\uff46\062\uff46\063\uff46\066\uff46\070\uff46\071\uff46" +
    "\072\uff46\075\uff46\001\002\000\024\003\061\033\053\042" +
    "\065\054\060\057\067\065\063\073\056\074\055\075\070" +
    "\001\002\000\076\003\uff44\010\uff44\014\uff44\015\uff44\023" +
    "\uff44\024\uff44\025\uff44\026\uff44\027\uff44\036\uff44\037\uff44" +
    "\040\uff44\044\uff44\045\uff44\046\uff44\047\uff44\050\uff44\051" +
    "\uff44\052\uff44\053\uff44\054\uff44\060\uff44\061\uff44\062\uff44" +
    "\063\uff44\066\uff44\070\uff44\071\uff44\072\uff44\075\uff44\001" +
    "\002\000\076\003\uff42\010\uff42\014\uff42\015\uff42\023\uff42" +
    "\024\uff42\025\uff42\026\uff42\027\uff42\036\uff42\037\uff42\040" +
    "\uff42\044\uff42\045\uff42\046\uff42\047\uff42\050\uff42\051\uff42" +
    "\052\uff42\053\143\054\142\060\uff42\061\uff42\062\uff42\063" +
    "\uff42\066\uff42\070\uff42\071\uff42\072\uff42\075\uff42\001\002" +
    "\000\072\003\uff43\010\uff43\014\uff43\015\uff43\023\uff43\024" +
    "\uff43\025\uff43\026\uff43\027\uff43\036\uff43\037\uff43\040\uff43" +
    "\044\uff43\045\uff43\046\uff43\047\uff43\050\uff43\051\uff43\052" +
    "\uff43\060\uff43\061\uff43\062\uff43\063\uff43\066\uff43\070\uff43" +
    "\071\uff43\072\uff43\075\uff43\001\002\000\004\066\155\001" +
    "\002\000\102\003\uff2e\010\uff2e\014\uff2e\015\uff2e\023\uff2e" +
    "\024\uff2e\025\uff2e\026\uff2e\027\uff2e\036\uff2e\037\uff2e\040" +
    "\uff2e\044\uff2e\045\uff2e\046\uff2e\047\uff2e\050\uff2e\051\uff2e" +
    "\052\uff2e\053\uff2e\054\uff2e\055\uff2e\056\uff2e\060\uff2e\061" +
    "\uff2e\062\uff2e\063\uff2e\066\uff2e\070\uff2e\071\uff2e\072\uff2e" +
    "\075\uff2e\001\002\000\102\003\uff39\010\uff39\014\uff39\015" +
    "\uff39\023\uff39\024\uff39\025\uff39\026\uff39\027\uff39\036\uff39" +
    "\037\uff39\040\uff39\044\uff39\045\uff39\046\uff39\047\uff39\050" +
    "\uff39\051\uff39\052\uff39\053\uff39\054\uff39\055\160\056\157" +
    "\060\uff39\061\uff39\062\uff39\063\uff39\066\uff39\070\uff39\071" +
    "\uff39\072\uff39\075\uff39\001\002\000\024\003\uff3f\033\uff3f" +
    "\042\uff3f\054\uff3f\057\uff3f\065\uff3f\073\uff3f\074\uff3f\075" +
    "\uff3f\001\002\000\024\003\uff3c\033\uff3c\042\uff3c\054\uff3c" +
    "\057\uff3c\065\uff3c\073\uff3c\074\uff3c\075\uff3c\001\002\000" +
    "\076\003\uff40\010\uff40\014\uff40\015\uff40\023\uff40\024\uff40" +
    "\025\uff40\026\uff40\027\uff40\036\uff40\037\uff40\040\uff40\044" +
    "\uff40\045\uff40\046\uff40\047\uff40\050\uff40\051\uff40\052\uff40" +
    "\053\uff40\054\uff40\060\uff40\061\uff40\062\uff40\063\uff40\066" +
    "\uff40\070\uff40\071\uff40\072\uff40\075\uff40\001\002\000\024" +
    "\003\061\033\053\042\065\054\060\057\067\065\063\073" +
    "\056\074\055\075\070\001\002\000\102\003\uff3b\010\uff3b" +
    "\014\uff3b\015\uff3b\023\uff3b\024\uff3b\025\uff3b\026\uff3b\027" +
    "\uff3b\036\uff3b\037\uff3b\040\uff3b\044\uff3b\045\uff3b\046\uff3b" +
    "\047\uff3b\050\uff3b\051\uff3b\052\uff3b\053\uff3b\054\uff3b\055" +
    "\uff3b\056\uff3b\060\uff3b\061\uff3b\062\uff3b\063\uff3b\066\uff3b" +
    "\070\uff3b\071\uff3b\072\uff3b\075\uff3b\001\002\000\102\003" +
    "\uff39\010\uff39\014\uff39\015\uff39\023\uff39\024\uff39\025\uff39" +
    "\026\uff39\027\uff39\036\uff39\037\uff39\040\uff39\044\uff39\045" +
    "\uff39\046\uff39\047\uff39\050\uff39\051\uff39\052\uff39\053\uff39" +
    "\054\uff39\055\160\056\157\060\uff39\061\uff39\062\uff39\063" +
    "\uff39\066\uff39\070\uff39\071\uff39\072\uff39\075\uff39\001\002" +
    "\000\076\003\uff3a\010\uff3a\014\uff3a\015\uff3a\023\uff3a\024" +
    "\uff3a\025\uff3a\026\uff3a\027\uff3a\036\uff3a\037\uff3a\040\uff3a" +
    "\044\uff3a\045\uff3a\046\uff3a\047\uff3a\050\uff3a\051\uff3a\052" +
    "\uff3a\053\uff3a\054\uff3a\060\uff3a\061\uff3a\062\uff3a\063\uff3a" +
    "\066\uff3a\070\uff3a\071\uff3a\072\uff3a\075\uff3a\001\002\000" +
    "\024\003\061\033\053\042\065\054\060\057\067\065\063" +
    "\073\056\074\055\075\070\001\002\000\102\003\uff3e\010" +
    "\uff3e\014\uff3e\015\uff3e\023\uff3e\024\uff3e\025\uff3e\026\uff3e" +
    "\027\uff3e\036\uff3e\037\uff3e\040\uff3e\044\uff3e\045\uff3e\046" +
    "\uff3e\047\uff3e\050\uff3e\051\uff3e\052\uff3e\053\uff3e\054\uff3e" +
    "\055\uff3e\056\uff3e\060\uff3e\061\uff3e\062\uff3e\063\uff3e\066" +
    "\uff3e\070\uff3e\071\uff3e\072\uff3e\075\uff3e\001\002\000\102" +
    "\003\uff39\010\uff39\014\uff39\015\uff39\023\uff39\024\uff39\025" +
    "\uff39\026\uff39\027\uff39\036\uff39\037\uff39\040\uff39\044\uff39" +
    "\045\uff39\046\uff39\047\uff39\050\uff39\051\uff39\052\uff39\053" +
    "\uff39\054\uff39\055\160\056\157\060\uff39\061\uff39\062\uff39" +
    "\063\uff39\066\uff39\070\uff39\071\uff39\072\uff39\075\uff39\001" +
    "\002\000\076\003\uff3d\010\uff3d\014\uff3d\015\uff3d\023\uff3d" +
    "\024\uff3d\025\uff3d\026\uff3d\027\uff3d\036\uff3d\037\uff3d\040" +
    "\uff3d\044\uff3d\045\uff3d\046\uff3d\047\uff3d\050\uff3d\051\uff3d" +
    "\052\uff3d\053\uff3d\054\uff3d\060\uff3d\061\uff3d\062\uff3d\063" +
    "\uff3d\066\uff3d\070\uff3d\071\uff3d\072\uff3d\075\uff3d\001\002" +
    "\000\102\003\uff37\010\uff37\014\uff37\015\uff37\023\uff37\024" +
    "\uff37\025\uff37\026\uff37\027\uff37\036\uff37\037\uff37\040\uff37" +
    "\044\uff37\045\uff37\046\uff37\047\uff37\050\uff37\051\uff37\052" +
    "\uff37\053\uff37\054\uff37\055\uff37\056\uff37\060\uff37\061\uff37" +
    "\062\uff37\063\uff37\066\uff37\070\uff37\071\uff37\072\uff37\075" +
    "\uff37\001\002\000\012\003\175\023\200\024\174\025\176" +
    "\001\002\000\044\003\uff7a\010\uff7a\014\uff7a\015\uff7a\026" +
    "\uff7a\027\uff7a\036\uff7a\037\uff7a\040\uff7a\044\uff7a\062\uff7a" +
    "\063\uff7a\066\uff7a\070\uff7a\071\uff7a\072\uff7a\075\uff7a\001" +
    "\002\000\044\003\uff78\010\uff78\014\uff78\015\uff78\026\uff78" +
    "\027\uff78\036\uff78\037\uff78\040\uff78\044\uff78\062\uff78\063" +
    "\uff78\066\uff78\070\uff78\071\uff78\072\uff78\075\uff78\001\002" +
    "\000\044\003\uff79\010\uff79\014\uff79\015\uff79\026\uff79\027" +
    "\uff79\036\uff79\037\uff79\040\uff79\044\uff79\062\uff79\063\uff79" +
    "\066\uff79\070\uff79\071\uff79\072\uff79\075\uff79\001\002\000" +
    "\044\003\uff7c\010\uff7c\014\uff7c\015\uff7c\026\uff7c\027\uff7c" +
    "\036\uff7c\037\uff7c\040\uff7c\044\uff7c\062\uff7c\063\uff7c\066" +
    "\uff7c\070\uff7c\071\uff7c\072\uff7c\075\uff7c\001\002\000\044" +
    "\003\uff7b\010\uff7b\014\uff7b\015\uff7b\026\uff7b\027\uff7b\036" +
    "\uff7b\037\uff7b\040\uff7b\044\uff7b\062\uff7b\063\uff7b\066\uff7b" +
    "\070\uff7b\071\uff7b\072\uff7b\075\uff7b\001\002\000\102\003" +
    "\uff32\010\uff32\014\uff32\015\uff32\023\uff32\024\uff32\025\uff32" +
    "\026\uff32\027\uff32\036\uff32\037\uff32\040\uff32\044\uff32\045" +
    "\uff32\046\uff32\047\uff32\050\uff32\051\uff32\052\uff32\053\uff32" +
    "\054\uff32\055\uff32\056\uff32\060\uff32\061\uff32\062\uff32\063" +
    "\uff32\066\uff32\070\uff32\071\uff32\072\uff32\075\uff32\001\002" +
    "\000\102\003\uff31\010\uff31\014\uff31\015\uff31\023\uff31\024" +
    "\uff31\025\uff31\026\uff31\027\uff31\036\uff31\037\uff31\040\uff31" +
    "\044\uff31\045\uff31\046\uff31\047\uff31\050\uff31\051\uff31\052" +
    "\uff31\053\uff31\054\uff31\055\uff31\056\uff31\060\uff31\061\uff31" +
    "\062\uff31\063\uff31\066\uff31\070\uff31\071\uff31\072\uff31\075" +
    "\uff31\001\002\000\036\003\035\010\042\014\030\015\031" +
    "\026\043\027\033\036\024\037\027\040\023\044\034\062" +
    "\037\063\040\070\uff96\075\041\001\002\000\036\003\035" +
    "\010\042\014\030\015\031\026\043\027\033\036\024\037" +
    "\027\040\023\044\034\062\037\063\040\070\uff96\075\041" +
    "\001\002\000\004\070\uffc5\001\002\000\004\070\uffc7\001" +
    "\002\000\040\003\uffc0\010\uffc0\014\uffc0\015\uffc0\026\uffc0" +
    "\027\uffc0\036\uffc0\037\uffc0\040\uffc0\044\uffc0\062\uffc0\063" +
    "\uffc0\070\uffc0\071\210\075\uffc0\001\002\000\036\003\035" +
    "\010\042\014\030\015\031\026\043\027\033\036\024\037" +
    "\027\040\023\044\034\062\037\063\040\070\uff96\075\041" +
    "\001\002\000\036\003\035\010\042\014\030\015\031\026" +
    "\043\027\033\036\024\037\027\040\023\044\034\062\037" +
    "\063\040\070\uff96\075\041\001\002\000\004\070\uffbf\001" +
    "\002\000\004\070\uffc1\001\002\000\036\003\035\010\042" +
    "\014\030\015\031\026\043\027\033\036\024\037\027\040" +
    "\023\044\034\062\037\063\040\070\uff96\075\041\001\002" +
    "\000\024\003\061\033\053\042\065\054\060\057\067\065" +
    "\063\073\056\074\055\075\070\001\002\000\004\066\217" +
    "\001\002\000\004\067\220\001\002\000\036\003\035\010" +
    "\042\014\030\015\031\026\043\027\033\036\024\037\027" +
    "\040\023\044\034\062\037\063\040\070\uff96\075\041\001" +
    "\002\000\004\070\222\001\002\000\040\003\uff2d\010\uff2d" +
    "\011\224\014\uff2d\015\uff2d\026\uff2d\027\uff2d\036\uff2d\037" +
    "\uff2d\040\uff2d\044\uff2d\062\uff2d\063\uff2d\070\uff2d\075\uff2d" +
    "\001\002\000\036\003\uff2c\010\uff2c\014\uff2c\015\uff2c\026" +
    "\uff2c\027\uff2c\036\uff2c\037\uff2c\040\uff2c\044\uff2c\062\uff2c" +
    "\063\uff2c\070\uff2c\075\uff2c\001\002\000\006\010\225\067" +
    "\226\001\002\000\004\065\215\001\002\000\036\003\035" +
    "\010\042\014\030\015\031\026\043\027\033\036\024\037" +
    "\027\040\023\044\034\062\037\063\040\070\uff96\075\041" +
    "\001\002\000\004\070\230\001\002\000\036\003\uff2a\010" +
    "\uff2a\014\uff2a\015\uff2a\026\uff2a\027\uff2a\036\uff2a\037\uff2a" +
    "\040\uff2a\044\uff2a\062\uff2a\063\uff2a\070\uff2a\075\uff2a\001" +
    "\002\000\036\003\uff2b\010\uff2b\014\uff2b\015\uff2b\026\uff2b" +
    "\027\uff2b\036\uff2b\037\uff2b\040\uff2b\044\uff2b\062\uff2b\063" +
    "\uff2b\070\uff2b\075\uff2b\001\002\000\004\070\uffce\001\002" +
    "\000\040\003\uffe6\010\uffe6\014\uffe6\015\uffe6\026\uffe6\027" +
    "\uffe6\036\uffe6\037\uffe6\040\uffe6\044\uffe6\062\uffe6\063\uffe6" +
    "\070\uffe6\071\uffe8\075\uffe6\001\002\000\004\017\250\001" +
    "\002\000\024\003\061\033\053\042\065\054\060\057\067" +
    "\065\063\073\056\074\055\075\070\001\002\000\040\003" +
    "\uffe2\010\uffe2\014\uffe2\015\uffe2\026\uffe2\027\uffe2\036\uffe2" +
    "\037\uffe2\040\uffe2\044\uffe2\062\uffe2\063\uffe2\070\uffe2\071" +
    "\uffe4\075\uffe2\001\002\000\004\064\240\001\002\000\024" +
    "\003\061\033\053\042\065\054\060\057\067\065\063\073" +
    "\056\074\055\075\070\001\002\000\040\003\uff72\010\uff72" +
    "\014\uff72\015\uff72\026\uff72\027\uff72\036\uff72\037\uff72\040" +
    "\uff72\044\uff72\062\uff72\063\uff72\070\uff72\071\uff72\075\uff72" +
    "\001\002\000\036\003\035\010\042\014\030\015\031\026" +
    "\043\027\033\036\024\037\027\040\023\044\034\062\037" +
    "\063\040\070\uff96\075\041\001\002\000\004\071\244\001" +
    "\002\000\036\003\035\010\042\014\030\015\031\026\043" +
    "\027\033\036\024\037\027\040\023\044\034\062\037\063" +
    "\040\070\uff96\075\041\001\002\000\004\070\uffe3\001\002" +
    "\000\004\070\uffe1\001\002\000\040\003\uff6e\010\uff6e\014" +
    "\uff6e\015\uff6e\026\uff6e\027\uff6e\036\uff6e\037\uff6e\040\uff6e" +
    "\044\uff6e\062\uff6e\063\uff6e\070\uff6e\071\uff6e\075\uff6e\001" +
    "\002\000\004\020\252\001\002\000\046\003\uff6c\010\uff6c" +
    "\014\uff6c\015\uff6c\026\uff6c\027\uff6c\036\uff6c\037\uff6c\040" +
    "\uff6c\044\uff6c\062\uff6c\063\uff6c\064\uff6c\066\uff6c\070\uff6c" +
    "\071\uff6c\072\uff6c\075\uff6c\001\002\000\010\003\254\006" +
    "\256\007\255\001\002\000\046\003\uff66\010\uff66\014\uff66" +
    "\015\uff66\026\uff66\027\uff66\036\uff66\037\uff66\040\uff66\044" +
    "\uff66\062\uff66\063\uff66\064\uff66\066\uff66\070\uff66\071\uff66" +
    "\072\uff66\075\uff66\001\002\000\046\003\uff63\010\uff63\014" +
    "\uff63\015\uff63\026\uff63\027\uff63\036\uff63\037\uff63\040\uff63" +
    "\044\uff63\062\uff63\063\uff63\064\uff63\066\uff63\070\uff63\071" +
    "\uff63\072\uff63\075\uff63\001\002\000\046\003\uff64\010\uff64" +
    "\014\uff64\015\uff64\026\uff64\027\uff64\036\uff64\037\uff64\040" +
    "\uff64\044\uff64\062\uff64\063\uff64\064\uff64\066\uff64\070\uff64" +
    "\071\uff64\072\uff64\075\uff64\001\002\000\046\003\uff65\010" +
    "\uff65\014\uff65\015\uff65\026\uff65\027\uff65\036\uff65\037\uff65" +
    "\040\uff65\044\uff65\062\uff65\063\uff65\064\uff65\066\uff65\070" +
    "\uff65\071\uff65\072\uff65\075\uff65\001\002\000\004\071\262" +
    "\001\002\000\036\003\035\010\042\014\030\015\031\026" +
    "\043\027\033\036\024\037\027\040\023\044\034\062\037" +
    "\063\040\070\uff96\075\041\001\002\000\004\070\uffe5\001" +
    "\002\000\036\003\035\010\042\014\030\015\031\026\043" +
    "\027\033\036\024\037\027\040\023\044\034\062\037\063" +
    "\040\070\uff96\075\041\001\002\000\004\070\uffe7\001\002" +
    "\000\004\071\uffa6\001\002\000\040\003\uffda\010\uffda\014" +
    "\uffda\015\uffda\026\uffda\027\uffda\036\uffda\037\uffda\040\uffda" +
    "\044\uffda\062\uffda\063\uffda\070\uffda\071\uffdc\075\uffda\001" +
    "\002\000\036\003\035\010\042\014\030\015\031\026\043" +
    "\027\033\036\024\037\027\040\023\044\034\062\037\063" +
    "\040\070\uff96\075\041\001\002\000\004\071\270\001\002" +
    "\000\036\003\035\010\042\014\030\015\031\026\043\027" +
    "\033\036\024\037\027\040\023\044\034\062\037\063\040" +
    "\070\uff96\075\041\001\002\000\004\070\uffdb\001\002\000" +
    "\004\070\uffd9\001\002\000\004\071\274\001\002\000\036" +
    "\003\035\010\042\014\030\015\031\026\043\027\033\036" +
    "\024\037\027\040\023\044\034\062\037\063\040\070\uff96" +
    "\075\041\001\002\000\004\070\uffa5\001\002\000\004\071" +
    "\uffa8\001\002\000\040\003\uffde\010\uffde\014\uffde\015\uffde" +
    "\026\uffde\027\uffde\036\uffde\037\uffde\040\uffde\044\uffde\062" +
    "\uffde\063\uffde\070\uffde\071\uffe0\075\uffde\001\002\000\036" +
    "\003\035\010\042\014\030\015\031\026\043\027\033\036" +
    "\024\037\027\040\023\044\034\062\037\063\040\070\uff96" +
    "\075\041\001\002\000\004\071\302\001\002\000\036\003" +
    "\035\010\042\014\030\015\031\026\043\027\033\036\024" +
    "\037\027\040\023\044\034\062\037\063\040\070\uff96\075" +
    "\041\001\002\000\004\070\uffdf\001\002\000\004\070\uffdd" +
    "\001\002\000\004\071\306\001\002\000\036\003\035\010" +
    "\042\014\030\015\031\026\043\027\033\036\024\037\027" +
    "\040\023\044\034\062\037\063\040\070\uff96\075\041\001" +
    "\002\000\004\070\uffa7\001\002\000\036\003\035\010\042" +
    "\014\030\015\031\026\043\027\033\036\024\037\027\040" +
    "\023\044\034\062\037\063\040\070\uff96\075\041\001\002" +
    "\000\036\003\035\010\042\014\030\015\031\026\043\027" +
    "\033\036\024\037\027\040\023\044\034\062\037\063\040" +
    "\070\uff96\075\041\001\002\000\004\070\uffb5\001\002\000" +
    "\004\070\uffb3\001\002\000\004\065\u0110\001\002\000\004" +
    "\022\052\001\002\000\004\030\u0109\001\002\000\004\031" +
    "\u0105\001\002\000\040\003\uff8e\010\uff8e\014\uff8e\015\uff8e" +
    "\026\uff8e\027\uff8e\036\uff8e\037\uff8e\040\uff8e\044\uff8e\062" +
    "\uff8e\063\uff8e\070\uff8e\071\uff8e\075\uff8e\001\002\000\040" +
    "\003\uff8d\010\uff8d\014\uff8d\015\uff8d\026\uff8d\027\uff8d\036" +
    "\uff8d\037\uff8d\040\uff8d\044\uff8d\062\uff8d\063\uff8d\070\uff8d" +
    "\071\uff8d\075\uff8d\001\002\000\004\020\252\001\002\000" +
    "\004\017\u0102\001\002\000\004\064\u0100\001\002\000\042" +
    "\003\uff88\010\uff88\014\uff88\015\uff88\026\uff88\027\uff88\036" +
    "\uff88\037\uff88\040\uff88\044\uff88\062\uff88\063\uff88\065\uff8a" +
    "\070\uff88\071\uff88\075\uff88\001\002\000\004\041\371\001" +
    "\002\000\004\065\215\001\002\000\004\065\uff8c\001\002" +
    "\000\004\063\350\001\002\000\004\062\345\001\002\000" +
    "\004\071\343\001\002\000\004\065\336\001\002\000\040" +
    "\003\uff8f\010\uff8f\014\uff8f\015\uff8f\026\uff8f\027\uff8f\036" +
    "\uff8f\037\uff8f\040\uff8f\044\uff8f\062\uff8f\063\uff8f\070\uff8f" +
    "\071\uff8f\075\uff8f\001\002\000\024\003\061\033\053\042" +
    "\065\054\060\057\067\065\063\073\056\074\055\075\070" +
    "\001\002\000\004\072\340\001\002\000\004\022\052\001" +
    "\002\000\004\066\342\001\002\000\040\003\uff28\010\uff28" +
    "\014\uff28\015\uff28\026\uff28\027\uff28\036\uff28\037\uff28\040" +
    "\uff28\044\uff28\062\uff28\063\uff28\070\uff28\071\uff28\075\uff28" +
    "\001\002\000\036\003\035\010\042\014\030\015\031\026" +
    "\043\027\033\036\024\037\027\040\023\044\034\062\037" +
    "\063\040\070\uff96\075\041\001\002\000\004\070\uffad\001" +
    "\002\000\004\071\346\001\002\000\036\003\035\010\042" +
    "\014\030\015\031\026\043\027\033\036\024\037\027\040" +
    "\023\044\034\062\037\063\040\070\uff96\075\041\001\002" +
    "\000\004\070\uffab\001\002\000\004\071\351\001\002\000" +
    "\036\003\035\010\042\014\030\015\031\026\043\027\033" +
    "\036\024\037\027\040\023\044\034\062\037\063\040\070" +
    "\uff96\075\041\001\002\000\004\070\uffa9\001\002\000\004" +
    "\065\354\001\002\000\026\003\061\033\053\042\065\054" +
    "\060\057\067\065\063\066\uff81\073\056\074\055\075\070" +
    "\001\002\000\004\066\366\001\002\000\010\003\uff84\066" +
    "\uff85\072\uff87\001\002\000\004\003\363\001\002\000\004" +
    "\072\361\001\002\000\026\003\061\033\053\042\065\054" +
    "\060\057\067\065\063\066\uff81\073\056\074\055\075\070" +
    "\001\002\000\004\066\uff86\001\002\000\026\003\uff83\033" +
    "\uff83\042\uff83\054\uff83\057\uff83\065\uff83\066\uff83\073\uff83" +
    "\074\uff83\075\uff83\001\002\000\026\003\061\033\053\042" +
    "\065\054\060\057\067\065\063\066\uff81\073\056\074\055" +
    "\075\070\001\002\000\004\066\uff82\001\002\000\040\003" +
    "\uff8b\010\uff8b\014\uff8b\015\uff8b\026\uff8b\027\uff8b\036\uff8b" +
    "\037\uff8b\040\uff8b\044\uff8b\062\uff8b\063\uff8b\070\uff8b\071" +
    "\uff8b\075\uff8b\001\002\000\036\003\035\010\042\014\030" +
    "\015\031\026\043\027\033\036\024\037\027\040\023\044" +
    "\034\062\037\063\040\070\uff96\075\041\001\002\000\004" +
    "\070\uffa3\001\002\000\004\071\372\001\002\000\036\003" +
    "\035\010\042\014\030\015\031\026\043\027\033\036\024" +
    "\037\027\040\023\044\034\062\037\063\040\070\uff96\075" +
    "\041\001\002\000\004\070\uffa1\001\002\000\004\065\375" +
    "\001\002\000\026\003\061\033\053\042\065\054\060\057" +
    "\067\065\063\066\uff81\073\056\074\055\075\070\001\002" +
    "\000\004\066\377\001\002\000\040\003\uff89\010\uff89\014" +
    "\uff89\015\uff89\026\uff89\027\uff89\036\uff89\037\uff89\040\uff89" +
    "\044\uff89\062\uff89\063\uff89\070\uff89\071\uff89\075\uff89\001" +
    "\002\000\024\003\061\033\053\042\065\054\060\057\067" +
    "\065\063\073\056\074\055\075\070\001\002\000\040\003" +
    "\uff70\010\uff70\014\uff70\015\uff70\026\uff70\027\uff70\036\uff70" +
    "\037\uff70\040\uff70\044\uff70\062\uff70\063\uff70\070\uff70\071" +
    "\uff70\075\uff70\001\002\000\004\020\252\001\002\000\046" +
    "\003\uff6a\010\uff6a\014\uff6a\015\uff6a\026\uff6a\027\uff6a\036" +
    "\uff6a\037\uff6a\040\uff6a\044\uff6a\062\uff6a\063\uff6a\064\uff6a" +
    "\066\uff6a\070\uff6a\071\uff6a\072\uff6a\075\uff6a\001\002\000" +
    "\046\003\uff68\010\uff68\014\uff68\015\uff68\026\uff68\027\uff68" +
    "\036\uff68\037\uff68\040\uff68\044\uff68\062\uff68\063\uff68\064" +
    "\uff68\066\uff68\070\uff68\071\uff68\072\uff68\075\uff68\001\002" +
    "\000\010\003\047\022\052\032\051\001\002\000\004\071" +
    "\u0107\001\002\000\036\003\035\010\042\014\030\015\031" +
    "\026\043\027\033\036\024\037\027\040\023\044\034\062" +
    "\037\063\040\070\uff96\075\041\001\002\000\004\070\uff9b" +
    "\001\002\000\010\003\047\022\052\032\051\001\002\000" +
    "\004\071\u010b\001\002\000\036\003\035\010\042\014\030" +
    "\015\031\026\043\027\033\036\024\037\027\040\023\044" +
    "\034\062\037\063\040\070\uff96\075\041\001\002\000\004" +
    "\070\uff99\001\002\000\004\071\u010e\001\002\000\036\003" +
    "\035\010\042\014\030\015\031\026\043\027\033\036\024" +
    "\037\027\040\023\044\034\062\037\063\040\070\uff96\075" +
    "\041\001\002\000\004\070\uff97\001\002\000\004\022\052" +
    "\001\002\000\004\072\u0112\001\002\000\024\003\061\033" +
    "\053\042\065\054\060\057\067\065\063\073\056\074\055" +
    "\075\070\001\002\000\004\072\u0114\001\002\000\024\003" +
    "\061\033\053\042\065\054\060\057\067\065\063\073\056" +
    "\074\055\075\070\001\002\000\004\066\u0116\001\002\000" +
    "\040\003\uff29\010\uff29\014\uff29\015\uff29\026\uff29\027\uff29" +
    "\036\uff29\037\uff29\040\uff29\044\uff29\062\uff29\063\uff29\070" +
    "\uff29\071\uff29\075\uff29\001\002\000\040\003\uff92\010\uff92" +
    "\014\uff92\015\uff92\026\uff92\027\uff92\036\uff92\037\uff92\040" +
    "\uff92\044\uff92\062\uff92\063\uff92\070\uff92\071\uff92\075\uff92" +
    "\001\002\000\040\003\uff91\010\uff91\014\uff91\015\uff91\026" +
    "\uff91\027\uff91\036\uff91\037\uff91\040\uff91\044\uff91\062\uff91" +
    "\063\uff91\070\uff91\071\uff91\075\uff91\001\002\000\040\003" +
    "\uff90\010\uff90\014\uff90\015\uff90\026\uff90\027\uff90\036\uff90" +
    "\037\uff90\040\uff90\044\uff90\062\uff90\063\uff90\070\uff90\071" +
    "\uff90\075\uff90\001\002\000\010\003\047\022\052\032\051" +
    "\001\002\000\010\003\047\022\052\032\051\001\002\000" +
    "\040\003\uffc3\010\uffc3\014\uffc3\015\uffc3\026\uffc3\027\uffc3" +
    "\036\uffc3\037\uffc3\040\uffc3\044\uffc3\062\uffc3\063\uffc3\070" +
    "\uffc3\071\u011d\075\uffc3\001\002\000\036\003\035\010\042" +
    "\014\030\015\031\026\043\027\033\036\024\037\027\040" +
    "\023\044\034\062\037\063\040\070\uff96\075\041\001\002" +
    "\000\036\003\035\010\042\014\030\015\031\026\043\027" +
    "\033\036\024\037\027\040\023\044\034\062\037\063\040" +
    "\070\uff96\075\041\001\002\000\004\070\uffc2\001\002\000" +
    "\004\070\uffc4\001\002\000\040\003\uffbd\010\uffbd\014\uffbd" +
    "\015\uffbd\026\uffbd\027\uffbd\036\uffbd\037\uffbd\040\uffbd\044" +
    "\uffbd\062\uffbd\063\uffbd\070\uffbd\071\u0122\075\uffbd\001\002" +
    "\000\036\003\035\010\042\014\030\015\031\026\043\027" +
    "\033\036\024\037\027\040\023\044\034\062\037\063\040" +
    "\070\uff96\075\041\001\002\000\036\003\035\010\042\014" +
    "\030\015\031\026\043\027\033\036\024\037\027\040\023" +
    "\044\034\062\037\063\040\070\uff96\075\041\001\002\000" +
    "\004\070\uffbc\001\002\000\004\070\uffbe\001\002\000\036" +
    "\003\035\010\042\014\030\015\031\026\043\027\033\036" +
    "\024\037\027\040\023\044\034\062\037\063\040\070\uff96" +
    "\075\041\001\002\000\036\003\035\010\042\014\030\015" +
    "\031\026\043\027\033\036\024\037\027\040\023\044\034" +
    "\062\037\063\040\070\uff96\075\041\001\002\000\004\070" +
    "\uffd1\001\002\000\004\070\uffcf\001\002\000\006\070\uffb0" +
    "\071\u012c\001\002\000\004\070\uffb2\001\002\000\004\070" +
    "\uffaf\001\002\000\040\003\uffb7\010\uffb7\014\uffb7\015\uffb7" +
    "\026\uffb7\027\uffb7\036\uffb7\037\uffb7\040\uffb7\044\uffb7\062" +
    "\uffb7\063\uffb7\070\uffb7\071\u012f\075\uffb7\001\002\000\036" +
    "\003\035\010\042\014\030\015\031\026\043\027\033\036" +
    "\024\037\027\040\023\044\034\062\037\063\040\070\uff96" +
    "\075\041\001\002\000\036\003\035\010\042\014\030\015" +
    "\031\026\043\027\033\036\024\037\027\040\023\044\034" +
    "\062\037\063\040\070\uff96\075\041\001\002\000\004\070" +
    "\uffb8\001\002\000\004\070\uffb6\001\002\000\004\071\uffa0" +
    "\001\002\000\040\003\uffc9\010\uffc9\014\uffc9\015\uffc9\026" +
    "\uffc9\027\uffc9\036\uffc9\037\uffc9\040\uffc9\044\uffc9\062\uffc9" +
    "\063\uffc9\070\uffc9\071\u0134\075\uffc9\001\002\000\036\003" +
    "\035\010\042\014\030\015\031\026\043\027\033\036\024" +
    "\037\027\040\023\044\034\062\037\063\040\070\uff96\075" +
    "\041\001\002\000\036\003\035\010\042\014\030\015\031" +
    "\026\043\027\033\036\024\037\027\040\023\044\034\062" +
    "\037\063\040\070\uff96\075\041\001\002\000\004\070\uffc8" +
    "\001\002\000\004\070\uffca\001\002\000\004\071\u0139\001" +
    "\002\000\036\003\035\010\042\014\030\015\031\026\043" +
    "\027\033\036\024\037\027\040\023\044\034\062\037\063" +
    "\040\070\uff96\075\041\001\002\000\004\070\uff9f\001\002" +
    "\000\012\003\ufff2\043\u013d\070\u013e\075\ufff2\001\002\000" +
    "\004\002\uffff\001\002\000\006\003\u0140\075\u0141\001\002" +
    "\000\006\002\ufff3\004\u0158\001\002\000\006\003\u0140\075" +
    "\u0141\001\002\000\004\065\uffee\001\002\000\004\065\ufff0" +
    "\001\002\000\012\003\ufff2\043\u013d\070\u013e\075\ufff2\001" +
    "\002\000\004\002\ufff1\001\002\000\004\065\u0145\001\002" +
    "\000\010\003\u0147\066\uffe9\075\u0148\001\002\000\004\066" +
    "\u014d\001\002\000\006\017\uff6b\020\uff69\001\002\000\004" +
    "\017\uff6d\001\002\000\006\066\uffea\072\uffec\001\002\000" +
    "\004\072\u014b\001\002\000\010\003\u0147\066\uffe9\075\u0148" +
    "\001\002\000\004\066\uffeb\001\002\000\004\067\u014e\001" +
    "\002\000\036\003\035\010\042\014\030\015\031\026\043" +
    "\027\033\036\024\037\027\040\023\044\034\062\037\063" +
    "\040\070\uff96\075\041\001\002\000\004\070\u0150\001\002" +
    "\000\012\003\uffef\043\uffef\070\uffef\075\uffef\001\002\000" +
    "\004\065\u0152\001\002\000\010\003\u0147\066\uffe9\075\u0148" +
    "\001\002\000\004\066\u0154\001\002\000\004\067\u0155\001" +
    "\002\000\036\003\035\010\042\014\030\015\031\026\043" +
    "\027\033\036\024\037\027\040\023\044\034\062\037\063" +
    "\040\070\uff96\075\041\001\002\000\004\070\u0157\001\002" +
    "\000\012\003\uffed\043\uffed\070\uffed\075\uffed\001\002\000" +
    "\004\002\ufff5\001\002\000\012\003\ufff2\043\u013d\070\u013e" +
    "\075\ufff2\001\002\000\004\002\ufff4\001\002\000\040\003" +
    "\uffd3\010\uffd3\014\uffd3\015\uffd3\026\uffd3\027\uffd3\036\uffd3" +
    "\037\uffd3\040\uffd3\044\uffd3\062\uffd3\063\uffd3\070\uffd3\071" +
    "\uffd5\075\uffd3\001\002\000\024\003\061\033\053\042\065" +
    "\054\060\057\067\065\063\073\056\074\055\075\070\001" +
    "\002\000\036\003\035\010\042\014\030\015\031\026\043" +
    "\027\033\036\024\037\027\040\023\044\034\062\037\063" +
    "\040\070\uff96\075\041\001\002\000\036\003\035\010\042" +
    "\014\030\015\031\026\043\027\033\036\024\037\027\040" +
    "\023\044\034\062\037\063\040\070\uff96\075\041\001\002" +
    "\000\004\070\uffd8\001\002\000\004\070\uffd6\001\002\000" +
    "\040\003\uff67\010\uff67\014\uff67\015\uff67\026\uff67\027\uff67" +
    "\036\uff67\037\uff67\040\uff67\044\uff67\062\uff67\063\uff67\070" +
    "\uff67\071\uff67\075\uff67\001\002\000\036\003\035\010\042" +
    "\014\030\015\031\026\043\027\033\036\024\037\027\040" +
    "\023\044\034\062\037\063\040\070\uff96\075\041\001\002" +
    "\000\004\071\u0164\001\002\000\036\003\035\010\042\014" +
    "\030\015\031\026\043\027\033\036\024\037\027\040\023" +
    "\044\034\062\037\063\040\070\uff96\075\041\001\002\000" +
    "\004\070\uffd4\001\002\000\004\070\uffd2\001\002\000\004" +
    "\071\uff9e\001\002\000\040\003\uffcc\010\uffcc\014\uffcc\015" +
    "\uffcc\026\uffcc\027\uffcc\036\uffcc\037\uffcc\040\uffcc\044\uffcc" +
    "\062\uffcc\063\uffcc\070\uffcc\071\u016a\075\uffcc\001\002\000" +
    "\036\003\035\010\042\014\030\015\031\026\043\027\033" +
    "\036\024\037\027\040\023\044\034\062\037\063\040\070" +
    "\uff96\075\041\001\002\000\036\003\035\010\042\014\030" +
    "\015\031\026\043\027\033\036\024\037\027\040\023\044" +
    "\034\062\037\063\040\070\uff96\075\041\001\002\000\004" +
    "\070\uffcd\001\002\000\004\070\uffcb\001\002\000\004\071" +
    "\u016e\001\002\000\036\003\035\010\042\014\030\015\031" +
    "\026\043\027\033\036\024\037\027\040\023\044\034\062" +
    "\037\063\040\070\uff96\075\041\001\002\000\004\070\uff9d" +
    "\001\002\000\040\003\uffba\010\uffba\014\uffba\015\uffba\026" +
    "\uffba\027\uffba\036\uffba\037\uffba\040\uffba\044\uffba\062\uffba" +
    "\063\uffba\070\uffba\071\u0171\075\uffba\001\002\000\036\003" +
    "\035\010\042\014\030\015\031\026\043\027\033\036\024" +
    "\037\027\040\023\044\034\062\037\063\040\070\uff96\075" +
    "\041\001\002\000\036\003\035\010\042\014\030\015\031" +
    "\026\043\027\033\036\024\037\027\040\023\044\034\062" +
    "\037\063\040\070\uff96\075\041\001\002\000\004\070\uffb9" +
    "\001\002\000\004\070\uffbb\001\002\000\012\003\175\023" +
    "\200\024\174\025\176\001\002\000\004\066\uff80\001\002" +
    "\000\024\003\061\033\053\042\065\054\060\057\067\065" +
    "\063\073\056\074\055\075\070\001\002\000\012\003\175" +
    "\023\200\024\174\025\176\001\002\000\004\066\uff7e\001" +
    "\002\000\004\067\u017b\001\002\000\004\005\u017c\001\002" +
    "\000\004\065\u017d\001\002\000\006\003\016\021\017\001" +
    "\002\000\004\066\u017f\001\002\000\004\067\u0180\001\002" +
    "\000\036\003\035\010\042\014\030\015\031\026\043\027" +
    "\033\036\024\037\027\040\023\044\034\062\037\063\040" +
    "\070\uff96\075\041\001\002\000\004\070\u0182\001\002\000" +
    "\012\003\ufff2\043\u013d\070\u013e\075\ufff2\001\002\000\004" +
    "\002\ufffa\001\002\000\004\075\u0196\001\002\000\004\065" +
    "\u018f\001\002\000\004\005\u0187\001\002\000\004\065\u0188" +
    "\001\002\000\006\003\016\021\017\001\002\000\004\066" +
    "\u018a\001\002\000\004\067\u018b\001\002\000\036\003\035" +
    "\010\042\014\030\015\031\026\043\027\033\036\024\037" +
    "\027\040\023\044\034\062\037\063\040\070\uff96\075\041" +
    "\001\002\000\004\070\u018d\001\002\000\012\003\ufff2\043" +
    "\u013d\070\u013e\075\ufff2\001\002\000\004\002\ufff8\001\002" +
    "\000\006\003\016\021\017\001\002\000\004\066\u0191\001" +
    "\002\000\004\067\u0192\001\002\000\036\003\035\010\042" +
    "\014\030\015\031\026\043\027\033\036\024\037\027\040" +
    "\023\044\034\062\037\063\040\070\uff96\075\041\001\002" +
    "\000\004\070\u0194\001\002\000\012\003\ufff2\043\u013d\070" +
    "\u013e\075\ufff2\001\002\000\004\002\ufff6\001\002\000\004" +
    "\067\ufffd\001\002\000\004\067\u0198\001\002\000\004\005" +
    "\u0199\001\002\000\004\065\u019a\001\002\000\006\003\016" +
    "\021\017\001\002\000\004\066\u019c\001\002\000\004\067" +
    "\u019d\001\002\000\036\003\035\010\042\014\030\015\031" +
    "\026\043\027\033\036\024\037\027\040\023\044\034\062" +
    "\037\063\040\070\uff96\075\041\001\002\000\004\070\u019f" +
    "\001\002\000\012\003\ufff2\043\u013d\070\u013e\075\ufff2\001" +
    "\002\000\004\002\ufffc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u019e\000\004\002\005\001\001\000\010\043\u0183\046" +
    "\u0185\047\u0184\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\045\u0179\001\001\000\004\042" +
    "\011\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\017\001\001\000\004\122\u0176\001" +
    "\001\000\016\017\u0174\022\053\024\070\026\065\030\063" +
    "\032\061\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\003\025\016\031\021\035\037\024\001\001\000\004" +
    "\005\u016f\001\001\000\002\001\001\000\006\007\u015a\064" +
    "\u015c\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\u012c\001\001\000\002\001\001\000\004\067\u0125\001" +
    "\001\000\002\001\001\000\010\010\u0118\011\u0117\034\u0116" +
    "\001\001\000\036\010\320\011\317\034\334\101\332\102" +
    "\331\103\330\106\326\107\325\112\316\113\315\114\314" +
    "\125\323\130\322\131\321\001\001\000\004\100\307\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\124\236" +
    "\126\234\127\233\001\001\000\004\040\213\001\001\000" +
    "\002\001\001\000\006\005\047\033\206\001\001\000\006" +
    "\005\047\033\045\001\001\000\004\072\203\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\017\056\022\053\024\070\026\065\030\063\032\061\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\123\172\001\001\000\004\022" +
    "\171\001\001\000\002\001\001\000\004\153\155\001\001" +
    "\000\016\017\153\022\053\024\070\026\065\030\063\032" +
    "\061\001\001\000\004\146\137\001\001\000\004\012\135" +
    "\001\001\000\004\137\106\001\001\000\004\022\105\001" +
    "\001\000\002\001\001\000\004\132\071\001\001\000\004" +
    "\023\072\001\001\000\002\001\001\000\004\133\101\001" +
    "\001\000\004\135\075\001\001\000\014\022\053\024\076" +
    "\026\065\030\063\032\061\001\001\000\004\136\077\001" +
    "\001\000\004\023\100\001\001\000\002\001\001\000\014" +
    "\022\053\024\102\026\065\030\063\032\061\001\001\000" +
    "\004\134\103\001\001\000\004\023\104\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\025\112\001\001\000" +
    "\004\143\130\001\001\000\004\142\126\001\001\000\004" +
    "\140\124\001\001\000\002\001\001\000\004\141\122\001" +
    "\001\000\004\144\120\001\001\000\004\145\116\001\001" +
    "\000\012\022\053\026\117\030\063\032\061\001\001\000" +
    "\002\001\001\000\012\022\053\026\121\030\063\032\061" +
    "\001\001\000\002\001\001\000\012\022\053\026\123\030" +
    "\063\032\061\001\001\000\002\001\001\000\012\022\053" +
    "\026\125\030\063\032\061\001\001\000\002\001\001\000" +
    "\012\022\053\026\127\030\063\032\061\001\001\000\002" +
    "\001\001\000\012\022\053\026\131\030\063\032\061\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\027\140\001\001\000\002\001\001\000\004\151\147" +
    "\001\001\000\004\147\143\001\001\000\010\022\053\030" +
    "\144\032\061\001\001\000\004\150\145\001\001\000\004" +
    "\027\146\001\001\000\002\001\001\000\010\022\053\030" +
    "\150\032\061\001\001\000\004\152\151\001\001\000\004" +
    "\027\152\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\031\160\001\001\000\004\154\165" +
    "\001\001\000\004\156\161\001\001\000\002\001\001\000" +
    "\006\022\053\032\162\001\001\000\004\157\163\001\001" +
    "\000\004\031\164\001\001\000\002\001\001\000\006\022" +
    "\053\032\166\001\001\000\004\155\167\001\001\000\004" +
    "\031\170\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\176\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\003\205\016\031" +
    "\021\035\037\024\001\001\000\012\003\204\016\031\021" +
    "\035\037\024\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\074\210\001\001\000\012\003\212\016\031\021" +
    "\035\037\024\001\001\000\012\003\211\016\031\021\035" +
    "\037\024\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\003\231\016\031\021\035\037\024\001\001\000\016" +
    "\017\215\022\053\024\070\026\065\030\063\032\061\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\003\220" +
    "\016\031\021\035\037\024\001\001\000\002\001\001\000" +
    "\004\041\222\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\040\230\001\001\000\012\003\226\016\031\021" +
    "\035\037\024\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\054\256\055" +
    "\257\001\001\000\002\001\001\000\016\017\246\022\053" +
    "\024\070\026\065\030\063\032\061\001\001\000\006\056" +
    "\242\057\241\001\001\000\002\001\001\000\016\017\240" +
    "\022\053\024\070\026\065\030\063\032\061\001\001\000" +
    "\002\001\001\000\012\003\245\016\031\021\035\037\024" +
    "\001\001\000\002\001\001\000\012\003\244\016\031\021" +
    "\035\037\024\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\035\250\001\001\000\002\001" +
    "\001\000\004\036\252\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\003\260\016\031\021\035\037\024\001\001" +
    "\000\002\001\001\000\012\003\262\016\031\021\035\037" +
    "\024\001\001\000\002\001\001\000\004\105\272\001\001" +
    "\000\006\062\266\063\265\001\001\000\012\003\271\016" +
    "\031\021\035\037\024\001\001\000\002\001\001\000\012" +
    "\003\270\016\031\021\035\037\024\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\003\274" +
    "\016\031\021\035\037\024\001\001\000\002\001\001\000" +
    "\004\104\304\001\001\000\006\060\300\061\277\001\001" +
    "\000\012\003\303\016\031\021\035\037\024\001\001\000" +
    "\002\001\001\000\012\003\302\016\031\021\035\037\024" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\003\306\016\031\021\035\037\024\001\001" +
    "\000\002\001\001\000\012\003\312\016\031\021\035\037" +
    "\024\001\001\000\012\003\311\016\031\021\035\037\024" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\u010c\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\035" +
    "\u0103\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\116\373\001\001\000\002\001\001\000\004\040\366\001" +
    "\001\000\004\115\352\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\017\336\022\053\024\070\026\065\030\063" +
    "\032\061\001\001\000\002\001\001\000\004\005\340\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\003\343" +
    "\016\031\021\035\037\024\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\003\346\016\031\021\035\037\024" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\003" +
    "\351\016\031\021\035\037\024\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\017\355\020\354\022\053\024" +
    "\070\026\065\030\063\032\061\001\001\000\002\001\001" +
    "\000\006\117\357\120\356\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\017\355\020\361\022\053\024\070" +
    "\026\065\030\063\032\061\001\001\000\002\001\001\000" +
    "\004\121\363\001\001\000\020\017\355\020\364\022\053" +
    "\024\070\026\065\030\063\032\061\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\003\367\016\031\021\035" +
    "\037\024\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\003\372\016\031\021\035\037\024\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\017\355\020\375\022" +
    "\053\024\070\026\065\030\063\032\061\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\017\u0100\022\053\024" +
    "\070\026\065\030\063\032\061\001\001\000\002\001\001" +
    "\000\004\035\u0102\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\005\047\033\u0105\001\001\000\002\001\001" +
    "\000\012\003\u0107\016\031\021\035\037\024\001\001\000" +
    "\002\001\001\000\006\005\047\033\u0109\001\001\000\002" +
    "\001\001\000\012\003\u010b\016\031\021\035\037\024\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\003\u010e" +
    "\016\031\021\035\037\024\001\001\000\002\001\001\000" +
    "\004\005\u0110\001\001\000\002\001\001\000\016\017\u0112" +
    "\022\053\024\070\026\065\030\063\032\061\001\001\000" +
    "\002\001\001\000\016\017\u0114\022\053\024\070\026\065" +
    "\030\063\032\061\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\005\047\033\u0120\001\001\000\006\005\047\033" +
    "\u011b\001\001\000\004\073\u011d\001\001\000\012\003\u011f" +
    "\016\031\021\035\037\024\001\001\000\012\003\u011e\016" +
    "\031\021\035\037\024\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\075\u0122\001\001\000\012\003\u0124\016" +
    "\031\021\035\037\024\001\001\000\012\003\u0123\016\031" +
    "\021\035\037\024\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\003\u0128\016\031\021\035\037\024\001\001" +
    "\000\012\003\u0127\016\031\021\035\037\024\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\077\u012d\001\001\000" +
    "\012\003\u0130\016\031\021\035\037\024\001\001\000\012" +
    "\003\u012f\016\031\021\035\037\024\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\110\u0137\001\001\000\004" +
    "\071\u0134\001\001\000\012\003\u0136\016\031\021\035\037" +
    "\024\001\001\000\012\003\u0135\016\031\021\035\037\024" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\003\u0139\016\031\021\035\037\024\001\001" +
    "\000\002\001\001\000\006\014\u013b\050\u013e\001\001\000" +
    "\002\001\001\000\004\013\u0158\001\001\000\002\001\001" +
    "\000\004\013\u0141\001\001\000\004\052\u0150\001\001\000" +
    "\004\051\u0143\001\001\000\006\014\u0142\050\u013e\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\015\u0145\037" +
    "\u0148\001\001\000\002\001\001\000\006\130\322\131\321" +
    "\001\001\000\004\127\233\001\001\000\004\053\u0149\001" +
    "\001\000\002\001\001\000\006\015\u014b\037\u0148\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\003\u014e\016" +
    "\031\021\035\037\024\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\015\u0152\037\u0148\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\003\u0155" +
    "\016\031\021\035\037\024\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\014\u0159\050\u013e" +
    "\001\001\000\002\001\001\000\006\065\u0162\066\u0161\001" +
    "\001\000\016\017\u0160\022\053\024\070\026\065\030\063" +
    "\032\061\001\001\000\012\003\u015f\016\031\021\035\037" +
    "\024\001\001\000\012\003\u015e\016\031\021\035\037\024" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\003\u0165\016\031\021\035\037\024\001\001" +
    "\000\002\001\001\000\012\003\u0164\016\031\021\035\037" +
    "\024\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\111\u016c\001\001\000\004\070\u0168\001\001\000\012\003" +
    "\u016b\016\031\021\035\037\024\001\001\000\012\003\u016a" +
    "\016\031\021\035\037\024\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\003\u016e\016\031" +
    "\021\035\037\024\001\001\000\002\001\001\000\004\076" +
    "\u0171\001\001\000\012\003\u0173\016\031\021\035\037\024" +
    "\001\001\000\012\003\u0172\016\031\021\035\037\024\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\u0175" +
    "\001\001\000\002\001\001\000\016\017\u0177\022\053\024" +
    "\070\026\065\030\063\032\061\001\001\000\004\006\u0178" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\004\u017d\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\003\u0180\016\031\021" +
    "\035\037\024\001\001\000\002\001\001\000\006\014\u0182" +
    "\050\u013e\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\004\u0188\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\003\u018b\016\031\021\035\037\024\001\001\000\002" +
    "\001\001\000\006\014\u018d\050\u013e\001\001\000\002\001" +
    "\001\000\004\004\u018f\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\003\u0192\016\031\021\035\037\024\001" +
    "\001\000\002\001\001\000\006\014\u0194\050\u013e\001\001" +
    "\000\002\001\001\000\004\044\u0196\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\u019a" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\003" +
    "\u019d\016\031\021\035\037\024\001\001\000\002\001\001" +
    "\000\006\014\u019f\050\u013e\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintaxPrueba$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintaxPrueba$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintaxPrueba$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private String ambito;
    private Symbol s;
    private Object valActual;
    private boolean aux1;
    private int aux2, aux3, aux4;
    private herramientas.Funcion funcionActual;
    private java.util.ArrayList<herramientas.Funcion> funcionesLlamadas = new java.util.ArrayList<>();
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    private void reportarError(String codigo, String encontrado){
        if(this.s == null) this.s = cur_token;
        FrmPrincipal.errores.agregarErrorSintactico(codigo, s.left + 1, sym.terminalNames[s.sym], encontrado);
    }

    private void reportarErrorSemantico(String codigo, String... valores){
        if(this.s == null) this.s = cur_token;
        FrmPrincipal.errores.agregarErrorSemantico(codigo, s.left + 1, valores);
    }

    public void report_fatal_error(String message, Object info){
        reportarError("ES8", null);
    }

    public SintaxPrueba(Lexer lexer){
        super(lexer);
    }

    private void ponerValor(String identificador, Object valor){
        if(valor == null || identificador == null) return;
        String tipo = getTipo(identificador);
        if(tipo == null) {
            reportarErrorSemantico("ESM1", identificador);
            return;
        }

        if(tipo.equals("error")){
            reportarErrorSemantico("ESM6", identificador);
            return;
        }

        if(tipo.equals("logico") && !valor.getClass().getName().equals("java.lang.Boolean")){
            reportarErrorSemantico("ESM5", "entero", identificador, "logico");
            return;
        }

        if(tipo.equals("entero") && !valor.getClass().getName().equals("java.lang.Integer")){
            reportarErrorSemantico("ESM5", "logico", identificador, "entero");
            return;
        }
        FrmPrincipal.tablaSimbolos.agregarValor(new LlaveTabla(identificador, ambito), valor);
    }

    private void verificarIdentificador(String id, boolean declarando){
        if(!FrmPrincipal.tablaSimbolos.existe(new LlaveTabla(id, ambito)) && !declarando){
            reportarErrorSemantico("ESM1", id);
            agregarSimbolo(id, -1);
        }
        if(FrmPrincipal.tablaSimbolos.existe(new LlaveTabla(id, ambito)) && declarando){
            reportarErrorSemantico("ESM4", id);
        }
        if(FrmPrincipal.funciones.existe(id)){
            reportarErrorSemantico("ESM4", id);
        }
    }

    private Object getValor(String identificador){
        return FrmPrincipal.tablaSimbolos.getValor(new LlaveTabla(identificador, ambito));
    }

    private String getTipo(String identificador){
        return FrmPrincipal.tablaSimbolos.getTipo(new LlaveTabla(identificador, ambito));
    }

    private void ponerTipoDato(String identificador, String tipo){
        FrmPrincipal.tablaSimbolos.agregarTipo(new LlaveTabla(identificador, ambito), tipo);
    }

    private void agregarSimbolo(String identificador, int linea){
        FrmPrincipal.tablaSimbolos.agregarSimbolo(new LlaveTabla(identificador, ambito), linea);
    }

    private void agregarFuncion(String id){
        verificarIdentificador(id, true);
        FrmPrincipal.funciones.agregarFuncion(id);
    }

    private void agregarParametro(String parametro){
        FrmPrincipal.funciones.agregarParametro(ambito, new LlaveTabla(parametro, ambito));
    }

    private Integer validarEntero(String id){
        switch(getTipo(id)){
            case "logico" -> {
                reportarErrorSemantico("ESM2", id, "logico");
                return 0;
            }
            case "entero" -> {
                
                return (int) verificarValor(id);
            }
            default -> {
                reportarErrorSemantico("ESM2", id, "sin tipo");
                return 0;
            }
        }
    }

    private Object verificarValor(String id){
        Object valor = getValor(id);
        if(valor == null){
            reportarErrorSemantico("ESM3", id);
        }
        return valor;
    }

    private void agregarExpresion(Object expresion){
        funcionActual.agregarParametro(expresion);
    }
    private void comprobarFunciones(){
        funcionesLlamadas.forEach(funcion -> funcion.comprobarParametros());
    }

    private void guardarFuncion(){
        funcionesLlamadas.add(funcionActual);
    }

    private int getEntero(Object v){
        if(v == null) return 0;
        if(v instanceof Integer) return Integer.parseInt(v.toString());
        else {
            reportarErrorSemantico("ESM11", "Lógico", "Entero");
            return 0;
        }
    }

    private boolean getLogico(Object v){
        if(v == null) return false;
        if(v instanceof Boolean) return Boolean.parseBoolean(v.toString());
        else {
            reportarErrorSemantico("ESM11", "Entero", "Lógico");
            return false;
        }
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintaxPrueba$actions {
  private final SintaxPrueba parser;

  /** Constructor */
  CUP$SintaxPrueba$actions(SintaxPrueba parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintaxPrueba$do_action_part00000000(
    int                        CUP$SintaxPrueba$act_num,
    java_cup.runtime.lr_parser CUP$SintaxPrueba$parser,
    java.util.Stack            CUP$SintaxPrueba$stack,
    int                        CUP$SintaxPrueba$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintaxPrueba$result;

      /* select the action based on the action number */
      switch (CUP$SintaxPrueba$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		RESULT = start_val;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintaxPrueba$parser.done_parsing();
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;

            ambito = "comienzo";
            agregarFuncion("comienzo");
        
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$0",32, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= INICIO IDENTIFICADOR NT$0 LLAVE_ABIERTA COMIENZO PARENTESIS_ABIERTO tiempo_cada PARENTESIS_CERRADO LLAVE_ABIERTA gramaticas LLAVE_CERRADA inicio_fin 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-9)).value;
		comprobarFunciones();
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-11)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$1 ::= 
            {
              Object RESULT =null;
reportarError("ES11", "No se ha encontrado \"inicio\"");
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$1",33, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$2 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

            ambito = "comienzo";
            agregarFuncion("comienzo");
        
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$2",34, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // inicio ::= error NT$1 IDENTIFICADOR NT$2 LLAVE_ABIERTA COMIENZO PARENTESIS_ABIERTO tiempo_cada PARENTESIS_CERRADO LLAVE_ABIERTA gramaticas LLAVE_CERRADA inicio_fin 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-9)).value;
		comprobarFunciones();
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-12)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$3 ::= 
            {
              Object RESULT =null;

            ambito = "comienzo";
            agregarFuncion("comienzo");
            reportarError("ES11", "No se ha encontrado el nombre del programa");
        
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$3",35, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // inicio ::= INICIO error NT$3 LLAVE_ABIERTA COMIENZO PARENTESIS_ABIERTO tiempo_cada PARENTESIS_CERRADO LLAVE_ABIERTA gramaticas LLAVE_CERRADA inicio_fin 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-9)).value;
		comprobarFunciones();
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-11)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$4 ::= 
            {
              Object RESULT =null;
reportarError("ES11", "No se ha encontrado \"{\"");
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$4",36, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // inicio ::= error NT$4 COMIENZO PARENTESIS_ABIERTO tiempo_cada PARENTESIS_CERRADO LLAVE_ABIERTA gramaticas LLAVE_CERRADA inicio_fin 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-8)).value;
		comprobarFunciones();
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-9)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$5 ::= 
            {
              Object RESULT =null;
reportarError("ES11", "No se ha encontrado \"comienzo\"");
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$5",37, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // inicio ::= error NT$5 PARENTESIS_ABIERTO tiempo_cada PARENTESIS_CERRADO LLAVE_ABIERTA gramaticas LLAVE_CERRADA inicio_fin 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-7)).value;
		comprobarFunciones();
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-8)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // inicio_fin ::= LLAVE_CERRADA FIN 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("inicio_fin",10, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // inicio_fin ::= FUNCION funcion inicio_fin 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("inicio_fin",10, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // inicio_fin ::= LLAVE_CERRADA 
            {
              Object RESULT =null;
		
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("inicio_fin",10, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$6 ::= 
            {
              Object RESULT =null;
reportarError("ES11", "No se ha encontrado \"funcion\"");
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$6",38, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // inicio_fin ::= NT$6 funcion inicio_fin 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("inicio_fin",10, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$7 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;

                                s = cur_token;
                                agregarFuncion(i);
                                ambito = i;
                            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$7",39, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // funcion ::= IDENTIFICADOR NT$7 PARENTESIS_ABIERTO parametros PARENTESIS_CERRADO LLAVE_ABIERTA gramaticas LLAVE_CERRADA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-7)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("funcion",9, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$8 ::= 
            {
              Object RESULT =null;
reportarError("ES11", "No se ha encontrado el identificador de la función");
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$8",40, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // funcion ::= error NT$8 PARENTESIS_ABIERTO parametros PARENTESIS_CERRADO LLAVE_ABIERTA gramaticas LLAVE_CERRADA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-6)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("funcion",9, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$9 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
agregarParametro(i);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$9",41, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // parametros ::= declaracion_inicio NT$9 COMA parametros 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("parametros",11, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // parametros ::= declaracion_inicio 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		agregarParametro(i);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("parametros",11, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // parametros ::= 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("parametros",11, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$10 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

                verificarIdentificador(i, false);
                ponerValor(i, validarEntero(i) + 1);
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$10",42, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // gramaticas ::= IDENTIFICADOR INC NT$10 PUNTO_COMA gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$11 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

                reportarError("ES7", null);
                verificarIdentificador(i, false);
                ponerValor(i, validarEntero(i) + 1);
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$11",43, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // gramaticas ::= IDENTIFICADOR INC NT$11 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$12 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

                verificarIdentificador(i, false);
                ponerValor(i, validarEntero(i) - 1);
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$12",44, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // gramaticas ::= IDENTIFICADOR DEC NT$12 PUNTO_COMA gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NT$13 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

                reportarError("ES7", null);
                verificarIdentificador(i, false);
                ponerValor(i, validarEntero(i) - 1);
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$13",45, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // gramaticas ::= IDENTIFICADOR DEC NT$13 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NT$14 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;

                verificarIdentificador(i, false);
                ponerValor(i, validarEntero(i) + 1);
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$14",46, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // gramaticas ::= INC IDENTIFICADOR NT$14 PUNTO_COMA gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // NT$15 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;

                reportarError("ES7", null);
                verificarIdentificador(i, false);
                ponerValor(i, validarEntero(i) + 1);
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$15",47, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // gramaticas ::= INC IDENTIFICADOR NT$15 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NT$16 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;

                verificarIdentificador(i, false);
                ponerValor(i, validarEntero(i) - 1);
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$16",48, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // gramaticas ::= DEC IDENTIFICADOR NT$16 PUNTO_COMA gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // NT$17 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;

                reportarError("ES7", null);
                verificarIdentificador(i, false);
                ponerValor(i, validarEntero(i) - 1);
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$17",49, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // gramaticas ::= DEC IDENTIFICADOR NT$17 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // gramaticas ::= declaracion_inicio PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NT$18 ::= 
            {
              Object RESULT =null;
s=cur_token;reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$18",50, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // gramaticas ::= declaracion_inicio NT$18 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NT$19 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
ponerValor(i,v);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$19",51, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // gramaticas ::= declaracion_inicio declaracion_valor NT$19 PUNTO_COMA gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NT$20 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
reportarError("ES7", null);ponerValor(i,v);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$20",52, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // gramaticas ::= declaracion_inicio declaracion_valor NT$20 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // gramaticas ::= asignacion PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // NT$21 ::= 
            {
              Object RESULT =null;
s=cur_token;reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$21",53, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // gramaticas ::= asignacion NT$21 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // gramaticas ::= CONDICION condicion gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // gramaticas ::= APAGAR LUCES PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // NT$22 ::= 
            {
              Object RESULT =null;
s=cur_token;reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$22",54, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // gramaticas ::= APAGAR LUCES NT$22 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // gramaticas ::= ENCENDER LUCES PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // NT$23 ::= 
            {
              Object RESULT =null;
s=cur_token;reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$23",55, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // gramaticas ::= ENCENDER LUCES NT$23 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // gramaticas ::= ABRIR PUERTAS tiempo_abrir_cerrar PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // NT$24 ::= 
            {
              Object RESULT =null;
s=cur_token;reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$24",56, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // gramaticas ::= ABRIR PUERTAS tiempo_abrir_cerrar NT$24 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$24
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // gramaticas ::= CERRAR PUERTAS tiempo_abrir_cerrar PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // NT$25 ::= 
            {
              Object RESULT =null;
s=cur_token;reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$25",57, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // gramaticas ::= CERRAR PUERTAS tiempo_abrir_cerrar NT$25 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$25
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // gramaticas ::= ABRIR VENTANAS tiempo_abrir_cerrar PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // NT$26 ::= 
            {
              Object RESULT =null;
s=cur_token;reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$26",58, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // gramaticas ::= ABRIR VENTANAS tiempo_abrir_cerrar NT$26 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$26
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // gramaticas ::= CERRAR VENTANAS tiempo_abrir_cerrar PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // NT$27 ::= 
            {
              Object RESULT =null;
s=cur_token;reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$27",59, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // gramaticas ::= CERRAR VENTANAS tiempo_abrir_cerrar NT$27 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$27
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // gramaticas ::= SANITIZAR tiempo_por PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // NT$28 ::= 
            {
              Object RESULT =null;
s=cur_token;reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$28",60, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // gramaticas ::= SANITIZAR tiempo_por NT$28 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$28
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // gramaticas ::= DISPENSAR tiempo_por PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // NT$29 ::= 
            {
              Object RESULT =null;
s=cur_token;reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$29",61, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // gramaticas ::= DISPENSAR tiempo_por NT$29 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$29
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // gramaticas ::= usar PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // NT$30 ::= 
            {
              Object RESULT =null;
s=cur_token;reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$30",62, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // gramaticas ::= usar NT$30 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$30
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // gramaticas ::= SALIR PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // gramaticas ::= SALIR 
            {
              Object RESULT =null;
		s=cur_token;reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // gramaticas ::= SALIR error 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // gramaticas ::= SALIR error PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // NT$31 ::= 
            {
              Object RESULT =null;
reportarError("ES2", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$31",63, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // gramaticas ::= error NT$31 PUNTO_COMA gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$31
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // NT$32 ::= 
            {
              Object RESULT =null;
reportarError("ES11", "Faltó identificador");
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$32",64, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // gramaticas ::= error NT$32 INC PUNTO_COMA gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$32
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // NT$33 ::= 
            {
              Object RESULT =null;
reportarError("ES11", "Faltó identificador");
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$33",65, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // gramaticas ::= error NT$33 DEC PUNTO_COMA gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$33
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // NT$34 ::= 
            {
              Object RESULT =null;
reportarError("ES11", "Faltó identificador");
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$34",66, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // gramaticas ::= INC error NT$34 PUNTO_COMA gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$34
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // NT$35 ::= 
            {
              Object RESULT =null;
reportarError("ES11", "Faltó identificador");
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$35",67, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // gramaticas ::= DEC error NT$35 PUNTO_COMA gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$35
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // NT$36 ::= 
            {
              Object RESULT =null;
reportarError("ES11", "Faltó la palabra \"condicion\"");
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$36",68, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // gramaticas ::= error NT$36 condicion gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$36
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // NT$37 ::= 
            {
              Object RESULT =null;
reportarError("ES11", "Faltó <\"encender\",\"apagar\">");
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$37",69, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // gramaticas ::= error NT$37 LUCES PUNTO_COMA gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$37
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // NT$38 ::= 
            {
              Object RESULT =null;
reportarError("ES11", "Faltó \"luces\"");
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$38",70, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // gramaticas ::= ENCENDER error NT$38 PUNTO_COMA gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$38
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // NT$39 ::= 
            {
              Object RESULT =null;
reportarError("ES11", "Faltó \"luces\"");
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$39",71, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // gramaticas ::= APAGAR error NT$39 PUNTO_COMA gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$39
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // NT$40 ::= 
            {
              Object RESULT =null;
reportarError("ES11", "Faltó <\"abrir\",\"cerrar\">");
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$40",72, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // gramaticas ::= error NT$40 PUERTAS tiempo_abrir_cerrar PUNTO_COMA gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$40
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // NT$41 ::= 
            {
              Object RESULT =null;
reportarError("ES11", "Faltó <\"abrir\",\"cerrar\">");
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$41",73, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // gramaticas ::= error NT$41 VENTANAS tiempo_abrir_cerrar PUNTO_COMA gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$41
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // NT$42 ::= 
            {
              Object RESULT =null;
reportarError("ES11", "Faltó <\"sanitizar\",\"dispensar\">");
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$42",74, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // gramaticas ::= error NT$42 tiempo_por PUNTO_COMA gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$42
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // gramaticas ::= 
            {
              Object RESULT =null;
		s=cur_token;reportarError("ES10", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // tiempo_abrir_cerrar ::= MANTENER 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("tiempo_abrir_cerrar",25, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // tiempo_abrir_cerrar ::= tiempo_por 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("tiempo_abrir_cerrar",25, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // tiempo_abrir_cerrar ::= error 
            {
              Object RESULT =null;
		reportarError("ES11", "Se esperaba \"mantener\" o \"por <Expresión aritmética> <\"seg\", \"min\", \"hr\">\"");
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("tiempo_abrir_cerrar",25, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // usar ::= USAR usar_funcion 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("usar",15, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // usar ::= USAR admitir 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("usar",15, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // usar ::= USAR ventilar 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("usar",15, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // usar ::= error usar_funcion 
            {
              Object RESULT =null;
		reportarError("ES11", "Faltó <\"usar\">");
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("usar",15, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // usar ::= error admitir 
            {
              Object RESULT =null;
		reportarError("ES11", "Faltó <\"usar\">");
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("usar",15, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // usar ::= error ventilar 
            {
              Object RESULT =null;
		reportarError("ES11", "Faltó <\"usar\">");
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("usar",15, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // NT$43 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
funcionActual = new herramientas.Funcion(i, cur_token.left+1);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$43",75, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // usar_funcion ::= IDENTIFICADOR NT$43 PARENTESIS_ABIERTO parametros_llamar PARENTESIS_CERRADO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$43
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("usar_funcion",26, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // NT$44 ::= 
            {
              Object RESULT =null;

                        reportarError("ES11", "No se ha encontrado el identificador de la función");
                        funcionActual = new herramientas.Funcion("0sin_id", cur_token.left+1);
                    
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$44",76, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // usar_funcion ::= error NT$44 PARENTESIS_ABIERTO parametros_llamar PARENTESIS_CERRADO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$44
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("usar_funcion",26, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // usar_funcion ::= error 
            {
              Object RESULT =null;
		reportarError("ES11", "No se ha encontrado <\"(\", \")\"> en el llamado de la función");
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("usar_funcion",26, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // NT$45 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
agregarExpresion(e);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$45",77, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // parametros_llamar ::= expresion NT$45 COMA parametros_llamar 
            {
              Object RESULT =null;
              // propagate RESULT from NT$45
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("parametros_llamar",14, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // parametros_llamar ::= expresion 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		agregarExpresion(e);guardarFuncion();
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("parametros_llamar",14, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // NT$46 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
agregarExpresion(e);guardarFuncion();
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$46",78, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // NT$47 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
reportarError("ES11", "No se ha encontrado \",\" después de la expresión");
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$47",79, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // parametros_llamar ::= expresion NT$46 error NT$47 parametros_llamar 
            {
              Object RESULT =null;
              // propagate RESULT from NT$47
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("parametros_llamar",14, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // parametros_llamar ::= 
            {
              Object RESULT =null;
		guardarFuncion();
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("parametros_llamar",14, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // tiempo_cada ::= CADA expresion unidad_tiempo 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("tiempo_cada",2, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // NT$48 ::= 
            {
              Object RESULT =null;
reportarError("ES11", "Se esperaba \"cada\"");
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$48",80, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // tiempo_cada ::= error NT$48 expresion unidad_tiempo 
            {
              Object RESULT =null;
              // propagate RESULT from NT$48
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("tiempo_cada",2, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // NT$49 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
getEntero(e);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$49",81, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // tiempo_por ::= POR expresion NT$49 unidad_tiempo 
            {
              Object RESULT =null;
              // propagate RESULT from NT$49
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("tiempo_por",3, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // unidad_tiempo ::= SEG 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("unidad_tiempo",4, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // unidad_tiempo ::= MIN 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("unidad_tiempo",4, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // unidad_tiempo ::= HR 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("unidad_tiempo",4, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // unidad_tiempo ::= error 
            {
              Object RESULT =null;
		reportarError("ES3", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("unidad_tiempo",4, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // estado ::= LUCES 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("estado",8, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // estado ::= PUERTAS 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("estado",8, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // estado ::= VENTANAS 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("estado",8, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // estado ::= error 
            {
              Object RESULT =null;
		reportarError("ES11", "Se esperaba <\"luces\", \"puertas\", \"ventanas\">");
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("estado",8, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // NT$50 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;

                s = cur_token;
                verificarIdentificador(i, false);
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$50",82, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // asignacion ::= IDENTIFICADOR NT$50 ASIGNACION expresion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$50
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		ponerValor(i,e);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("asignacion",12, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // NT$51 ::= 
            {
              Object RESULT =null;
reportarError("ES11", "No se ha encontrado el identificador para la asignación");
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$51",83, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // asignacion ::= error NT$51 ASIGNACION expresion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$51
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("asignacion",12, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // NT$52 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;

                s = cur_token;
                verificarIdentificador(i, false);
                reportarError("ES11", "No se ha encontrado el simbolo \"=\"");
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$52",84, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // asignacion ::= IDENTIFICADOR NT$52 expresion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$52
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		ponerValor(i,e);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("asignacion",12, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // NT$53 ::= 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
s=cur_token;verificarIdentificador(i, true);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$53",85, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // declaracion_inicio ::= IDENTIFICADOR NT$53 DECLARAR declaracion_tipo_dato 
            {
              String RESULT =null;
              // propagate RESULT from NT$53
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		String td = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		
                        agregarSimbolo(i, cur_token.left+1);
                        ponerTipoDato(i,td);
                        RESULT=i;
                    
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("declaracion_inicio",29, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // NT$54 ::= 
            {
              String RESULT =null;
reportarError("ES11", "No se ha encontrado un identificador");
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$54",86, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // declaracion_inicio ::= error NT$54 DECLARAR declaracion_tipo_dato 
            {
              String RESULT =null;
              // propagate RESULT from NT$54
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("declaracion_inicio",29, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // NT$55 ::= 
            {
              String RESULT =null;
reportarError("ES11", "No se ha encontrado \"declarar\"");
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$55",87, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // declaracion_inicio ::= error NT$55 declaracion_tipo_dato 
            {
              String RESULT =null;
              // propagate RESULT from NT$55
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("declaracion_inicio",29, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // declaracion_valor ::= ASIGNACION expresion 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=e;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("declaracion_valor",5, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // declaracion_tipo_dato ::= COMO tipo_dato 
            {
              String RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		String td = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT = td;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("declaracion_tipo_dato",27, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // tipo_dato ::= ENTERO 
            {
              String RESULT =null;
		RESULT = "entero";
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("tipo_dato",28, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // tipo_dato ::= LOGICO 
            {
              String RESULT =null;
		RESULT = "logico";
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("tipo_dato",28, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // tipo_dato ::= error 
            {
              String RESULT =null;
		reportarError("ES4", null); RESULT = "error";
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("tipo_dato",28, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // NT$56 ::= 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
valActual=v;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$56",88, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // expresion ::= op2 NT$56 op1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$56
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=r;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // NT$57 ::= 
            {
              Object RESULT =null;
aux1=getLogico(valActual);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$57",89, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // NT$58 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
valActual=aux1&&getLogico(v);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$58",90, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // op1 ::= LOGICO_AND NT$57 op2 NT$58 op1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$58
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=r;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op1",17, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // NT$59 ::= 
            {
              Object RESULT =null;
aux1=getLogico(valActual);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$59",91, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // NT$60 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
valActual=aux1||getLogico(v);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$60",92, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // op1 ::= LOGICO_OR NT$59 op2 NT$60 op1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$60
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=r;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op1",17, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // op1 ::= 
            {
              Object RESULT =null;
		RESULT=valActual;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op1",17, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // NT$61 ::= 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
valActual=v;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$61",93, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // op2 ::= op4 NT$61 op3 
            {
              Object RESULT =null;
              // propagate RESULT from NT$61
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=r;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op2",18, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // NT$62 ::= 
            {
              Object RESULT =null;
aux2=getEntero(valActual);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$62",94, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // op3 ::= REL_MENOR NT$62 op4 
            {
              Object RESULT =null;
              // propagate RESULT from NT$62
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=aux2<getEntero(v);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op3",19, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // NT$63 ::= 
            {
              Object RESULT =null;
aux2=getEntero(valActual);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$63",95, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // op3 ::= REL_MAYOR NT$63 op4 
            {
              Object RESULT =null;
              // propagate RESULT from NT$63
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=aux2>getEntero(v);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op3",19, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // NT$64 ::= 
            {
              Object RESULT =null;
aux2=getEntero(valActual);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$64",96, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // op3 ::= REL_MENOR_IGUAL NT$64 op4 
            {
              Object RESULT =null;
              // propagate RESULT from NT$64
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=aux2<=getEntero(v);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op3",19, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // NT$65 ::= 
            {
              Object RESULT =null;
aux2=getEntero(valActual);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$65",97, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // op3 ::= REL_MAYOR_IGUAL NT$65 op4 
            {
              Object RESULT =null;
              // propagate RESULT from NT$65
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=aux2>=getEntero(v);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op3",19, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // NT$66 ::= 
            {
              Object RESULT =null;
aux2=getEntero(valActual);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$66",98, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // op3 ::= REL_DIFERENTE NT$66 op4 
            {
              Object RESULT =null;
              // propagate RESULT from NT$66
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=aux2!=getEntero(v);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op3",19, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // NT$67 ::= 
            {
              Object RESULT =null;
aux2=getEntero(valActual);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$67",99, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // op3 ::= REL_IGUAL NT$67 op4 
            {
              Object RESULT =null;
              // propagate RESULT from NT$67
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=aux2==getEntero(v);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op3",19, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // op3 ::= 
            {
              Object RESULT =null;
		RESULT=valActual;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op3",19, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // NT$68 ::= 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
valActual=v;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$68",100, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // op4 ::= op6 NT$68 op5 
            {
              Object RESULT =null;
              // propagate RESULT from NT$68
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=r;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op4",20, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // NT$69 ::= 
            {
              Object RESULT =null;
aux3=getEntero(valActual);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$69",101, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // NT$70 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
valActual=aux3+getEntero(v);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$70",102, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // op5 ::= AR_SUMA NT$69 op6 NT$70 op5 
            {
              Object RESULT =null;
              // propagate RESULT from NT$70
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=r;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op5",21, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // NT$71 ::= 
            {
              Object RESULT =null;
aux3=getEntero(valActual);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$71",103, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // NT$72 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
valActual=aux3-getEntero(v);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$72",104, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // op5 ::= AR_RESTA NT$71 op6 NT$72 op5 
            {
              Object RESULT =null;
              // propagate RESULT from NT$72
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=r;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op5",21, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // op5 ::= 
            {
              Object RESULT =null;
		RESULT=valActual;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op5",21, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // NT$73 ::= 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
valActual=v;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$73",105, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // op6 ::= op8 NT$73 op7 
            {
              Object RESULT =null;
              // propagate RESULT from NT$73
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=r;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op6",22, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // NT$74 ::= 
            {
              Object RESULT =null;
aux4=getEntero(valActual);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$74",106, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // NT$75 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
valActual=aux4/getEntero(v);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$75",107, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // op7 ::= AR_DIVISION NT$74 op8 NT$75 op7 
            {
              Object RESULT =null;
              // propagate RESULT from NT$75
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=r;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op7",23, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // NT$76 ::= 
            {
              Object RESULT =null;
aux4=getEntero(valActual);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$76",108, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // NT$77 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
valActual=aux4*getEntero(v);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$77",109, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // op7 ::= AR_MULTIPLICACION NT$76 op8 NT$77 op7 
            {
              Object RESULT =null;
              // propagate RESULT from NT$77
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=r;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op7",23, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // op7 ::= 
            {
              Object RESULT =null;
		RESULT=valActual;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op7",23, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // op8 ::= valores 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=v;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op8",24, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // op8 ::= AR_RESTA valores 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=-getEntero(v);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op8",24, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // op8 ::= NEGACION valores 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=!getLogico(v);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op8",24, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // op8 ::= error 
            {
              Object RESULT =null;
		reportarError("ES11", "No se ha encontrado un operador o un operando en la expresión ingresada");
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op8",24, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // valores ::= NUMERO 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=n;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("valores",16, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // valores ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		s=cur_token;verificarIdentificador(i, false);RESULT=getValor(i);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("valores",16, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // valores ::= OBTENER TEMPERATURA 
            {
              Object RESULT =null;
		RESULT=0;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("valores",16, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // valores ::= OBTENER PERSONAS 
            {
              Object RESULT =null;
		RESULT=0;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("valores",16, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // valores ::= OP_BOOLEANO 
            {
              Object RESULT =null;
		int obleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int obright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Boolean ob = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=ob;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("valores",16, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // valores ::= ESTADO estado 
            {
              Object RESULT =null;
		RESULT=false;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("valores",16, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // valores ::= PARENTESIS_ABIERTO expresion PARENTESIS_CERRADO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		RESULT=e;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("valores",16, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // condicion ::= PARENTESIS_ABIERTO expresion PARENTESIS_CERRADO LLAVE_ABIERTA gramaticas LLAVE_CERRADA 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("condicion",30, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // condicion ::= PARENTESIS_ABIERTO expresion PARENTESIS_CERRADO LLAVE_ABIERTA gramaticas LLAVE_CERRADA sino 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("condicion",30, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // sino ::= SINO CONDICION condicion 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("sino",31, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // sino ::= SINO LLAVE_ABIERTA gramaticas LLAVE_CERRADA 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("sino",31, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // ventilar ::= VENTILAR PARENTESIS_ABIERTO tiempo_por COMA expresion COMA expresion PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("ventilar",6, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // admitir ::= ADMITIR PARENTESIS_ABIERTO expresion COMA tiempo_por PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("admitir",7, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintaxPrueba$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintaxPrueba$do_action(
    int                        CUP$SintaxPrueba$act_num,
    java_cup.runtime.lr_parser CUP$SintaxPrueba$parser,
    java.util.Stack            CUP$SintaxPrueba$stack,
    int                        CUP$SintaxPrueba$top)
    throws java.lang.Exception
    {
              return CUP$SintaxPrueba$do_action_part00000000(
                               CUP$SintaxPrueba$act_num,
                               CUP$SintaxPrueba$parser,
                               CUP$SintaxPrueba$stack,
                               CUP$SintaxPrueba$top);
    }
}

}
