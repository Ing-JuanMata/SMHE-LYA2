
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analisis;

import java_cup.runtime.Symbol;
import codigo.FrmPrincipal;
import herramientas.ArbolSintactico;
import herramientas.NodoSintactico;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintaxPrueba extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public SintaxPrueba() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintaxPrueba(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintaxPrueba(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\323\000\002\002\004\000\002\036\002\000\002\037" +
    "\002\000\002\040\002\000\002\041\002\000\002\002\021" +
    "\000\002\042\002\000\002\043\002\000\002\002\011\000" +
    "\002\044\002\000\002\045\002\000\002\002\010\000\002" +
    "\014\004\000\002\046\002\000\002\014\005\000\002\047" +
    "\002\000\002\014\006\000\002\050\002\000\002\014\006" +
    "\000\002\051\002\000\002\052\002\000\002\013\013\000" +
    "\002\053\002\000\002\015\006\000\002\015\003\000\002" +
    "\015\002\000\002\054\002\000\002\003\007\000\002\055" +
    "\002\000\002\003\006\000\002\056\002\000\002\003\007" +
    "\000\002\057\002\000\002\003\006\000\002\060\002\000" +
    "\002\003\007\000\002\061\002\000\002\003\006\000\002" +
    "\062\002\000\002\003\007\000\002\063\002\000\002\003" +
    "\006\000\002\064\002\000\002\003\006\000\002\065\002" +
    "\000\002\003\005\000\002\066\002\000\002\003\007\000" +
    "\002\067\002\000\002\003\006\000\002\070\002\000\002" +
    "\003\006\000\002\071\002\000\002\003\005\000\002\072" +
    "\002\000\002\073\002\000\002\003\007\000\002\074\002" +
    "\000\002\003\006\000\002\075\002\000\002\003\005\000" +
    "\002\076\002\000\002\003\006\000\002\077\002\000\002" +
    "\003\005\000\002\100\002\000\002\003\006\000\002\101" +
    "\002\000\002\003\005\000\002\102\002\000\002\003\007" +
    "\000\002\103\002\000\002\003\006\000\002\104\002\000" +
    "\002\003\007\000\002\105\002\000\002\003\006\000\002" +
    "\106\002\000\002\003\010\000\002\107\002\000\002\003" +
    "\007\000\002\110\002\000\002\003\010\000\002\111\002" +
    "\000\002\003\007\000\002\112\002\000\002\003\010\000" +
    "\002\113\002\000\002\003\007\000\002\114\002\000\002" +
    "\003\010\000\002\115\002\000\002\003\007\000\002\116" +
    "\002\000\002\003\010\000\002\117\002\000\002\003\007" +
    "\000\002\120\002\000\002\003\010\000\002\121\002\000" +
    "\002\003\007\000\002\122\002\000\002\003\010\000\002" +
    "\123\002\000\002\003\007\000\002\124\002\000\002\003" +
    "\010\000\002\125\002\000\002\003\007\000\002\126\002" +
    "\000\002\003\007\000\002\127\002\000\002\003\006\000" +
    "\002\130\002\000\002\003\007\000\002\131\002\000\002" +
    "\003\006\000\002\132\002\000\002\003\005\000\002\003" +
    "\002\000\002\133\002\000\002\004\006\000\002\004\003" +
    "\000\002\134\002\000\002\135\002\000\002\005\007\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\136\002\000\002\016\006\000\002\137\002" +
    "\000\002\140\002\000\002\016\007\000\002\027\005\000" +
    "\002\007\004\000\002\141\002\000\002\007\005\000\002" +
    "\025\004\000\002\026\003\000\002\026\003\000\002\026" +
    "\003\000\002\142\002\000\002\020\005\000\002\143\002" +
    "\000\002\144\002\000\002\021\007\000\002\145\002\000" +
    "\002\146\002\000\002\021\007\000\002\021\002\000\002" +
    "\147\002\000\002\022\005\000\002\150\002\000\002\151" +
    "\002\000\002\023\007\000\002\152\002\000\002\153\002" +
    "\000\002\023\007\000\002\023\002\000\002\154\002\000" +
    "\002\024\006\000\002\155\002\000\002\024\004\000\002" +
    "\156\002\000\002\157\002\000\002\024\006\000\002\024" +
    "\004\000\002\024\004\000\002\024\003\000\002\017\003" +
    "\000\002\017\003\000\002\030\010\000\002\030\011\000" +
    "\002\031\003\000\002\031\005\000\002\031\005\000\002" +
    "\031\003\000\002\031\005\000\002\031\005\000\002\031" +
    "\004\000\002\031\006\000\002\031\006\000\002\031\003" +
    "\000\002\031\005\000\002\031\005\000\002\031\003\000" +
    "\002\031\005\000\002\031\005\000\002\031\003\000\002" +
    "\031\005\000\002\031\005\000\002\031\003\000\002\032" +
    "\004\000\002\033\006\000\002\034\005\000\002\034\005" +
    "\000\002\034\005\000\002\034\005\000\002\034\005\000" +
    "\002\034\005\000\002\035\005\000\002\035\006\000\002" +
    "\160\002\000\002\010\013\000\002\161\002\000\002\011" +
    "\013" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u016e\000\006\003\004\017\005\001\002\000\040\003" +
    "\ufff8\010\ufff8\012\ufff8\013\ufff8\015\ufff8\016\ufff8\027\ufff8" +
    "\030\ufff8\037\ufff8\040\ufff8\041\ufff8\062\ufff8\063\ufff8\070" +
    "\ufff8\075\ufff8\001\002\000\006\003\010\075\011\001\002" +
    "\000\004\002\007\001\002\000\004\002\001\001\002\000" +
    "\040\003\ufffb\010\ufffb\012\ufffb\013\ufffb\015\ufffb\016\ufffb" +
    "\027\ufffb\030\ufffb\037\ufffb\040\ufffb\041\ufffb\062\ufffb\063" +
    "\ufffb\070\ufffb\075\ufffb\001\002\000\004\067\000\001\002" +
    "\000\004\067\013\001\002\000\004\005\014\001\002\000" +
    "\004\065\015\001\002\000\006\003\uffff\022\uffff\001\002" +
    "\000\006\003\017\022\020\001\002\000\004\066\uff87\001" +
    "\002\000\004\073\u0164\001\002\000\004\066\022\001\002" +
    "\000\004\067\023\001\002\000\040\003\ufffe\010\ufffe\012" +
    "\ufffe\013\ufffe\015\ufffe\016\ufffe\027\ufffe\030\ufffe\037\ufffe" +
    "\040\ufffe\041\ufffe\062\ufffe\063\ufffe\070\ufffe\075\ufffe\001" +
    "\002\000\040\003\042\010\046\012\025\013\045\015\035" +
    "\016\026\027\032\030\027\037\047\040\036\041\037\062" +
    "\040\063\041\070\uff8a\075\043\001\002\000\004\065\uff32" +
    "\001\002\000\042\003\uffbe\010\uffbe\012\uffbe\013\uffbe\015" +
    "\uffbe\016\uffbe\027\uffbe\030\uffbe\037\uffbe\040\uffbe\041\uffbe" +
    "\062\uffbe\063\uffbe\070\uffbe\071\uffc0\075\uffbe\001\002\000" +
    "\006\031\u013d\032\u013e\001\002\000\004\070\u0120\001\002" +
    "\000\042\003\uffc2\010\uffc2\012\uffc2\013\uffc2\015\uffc2\016" +
    "\uffc2\027\uffc2\030\uffc2\037\uffc2\040\uffc2\041\uffc2\062\uffc2" +
    "\063\uffc2\070\uffc2\071\uffc4\075\uffc2\001\002\000\006\031" +
    "\u0101\032\u0102\001\002\000\042\003\uffcd\010\uffcd\012\uffcd" +
    "\013\uffcd\015\uffcd\016\uffcd\027\uffcd\030\uffcd\037\uffcd\040" +
    "\uffcd\041\uffcd\062\uffcd\063\uffcd\070\uffcd\071\uffcf\075\uffcd" +
    "\001\002\000\042\003\uffc6\010\uffc6\012\uffc6\013\uffc6\015" +
    "\uffc6\016\uffc6\027\uffc6\030\uffc6\037\uffc6\040\uffc6\041\uffc6" +
    "\062\uffc6\063\uffc6\070\uffc6\071\uffc8\075\uffc6\001\002\000" +
    "\004\023\uff86\001\002\000\004\042\353\001\002\000\004" +
    "\023\uff86\001\002\000\004\075\337\001\002\000\004\075" +
    "\331\001\002\000\042\003\uff8c\010\uff8c\012\uff8c\013\uff8c" +
    "\015\uff8c\016\uff8c\027\uff8c\030\uff8c\037\uff8c\040\uff8c\041" +
    "\uff8c\062\uff8c\063\uff8c\064\uff7a\070\uff8c\075\uff8c\001\002" +
    "\000\012\020\277\062\276\063\300\064\275\001\002\000" +
    "\044\003\uffd5\010\uffd5\012\uffd5\013\uffd5\015\uffd5\016\uffd5" +
    "\027\uffd5\030\uffd5\037\uffd5\040\uffd5\041\uffd5\062\uffd5\063" +
    "\uffd5\064\260\070\uffd5\071\uffd7\075\uffd5\001\002\000\004" +
    "\065\uff30\001\002\000\004\065\uffcb\001\002\000\004\042" +
    "\050\001\002\000\042\003\uffba\010\uffba\012\uffba\013\uffba" +
    "\015\uffba\016\uffba\027\uffba\030\uffba\037\uffba\040\uffba\041" +
    "\uffba\062\uffba\063\uffba\070\uffba\071\uffbc\075\uffba\001\002" +
    "\000\040\003\042\010\046\012\025\013\045\015\035\016" +
    "\026\027\032\030\027\037\047\040\036\041\037\062\040" +
    "\063\041\070\uff8a\075\043\001\002\000\004\071\053\001" +
    "\002\000\040\003\042\010\046\012\025\013\045\015\035" +
    "\016\026\027\032\030\027\037\047\040\036\041\037\062" +
    "\040\063\041\070\uff8a\075\043\001\002\000\004\070\uffbb" +
    "\001\002\000\004\070\uffb9\001\002\000\004\065\060\001" +
    "\002\000\040\003\uffca\010\uffca\012\uffca\013\uffca\015\uffca" +
    "\016\uffca\027\uffca\030\uffca\037\uffca\040\uffca\041\uffca\062" +
    "\uffca\063\uffca\070\uffca\075\uffca\001\002\000\014\003\065" +
    "\043\066\057\067\074\062\075\070\001\002\000\004\066" +
    "\220\001\002\000\012\060\214\061\215\066\uff4f\072\uff4f" +
    "\001\002\000\012\060\210\061\211\066\uff43\072\uff43\001" +
    "\002\000\012\060\205\061\204\066\uff40\072\uff40\001\002" +
    "\000\006\066\uff3d\072\uff3d\001\002\000\010\031\174\032" +
    "\177\042\175\001\002\000\006\065\171\075\170\001\002" +
    "\000\026\045\100\046\101\047\077\050\076\051\103\052" +
    "\105\060\102\061\104\066\uff4c\072\uff4c\001\002\000\012" +
    "\060\072\061\073\066\uff46\072\uff46\001\002\000\014\003" +
    "\065\043\066\057\067\074\062\075\070\001\002\000\014" +
    "\003\065\043\066\057\067\074\062\075\070\001\002\000" +
    "\006\066\uff44\072\uff44\001\002\000\006\066\uff45\072\uff45" +
    "\001\002\000\016\003\uff6f\034\uff6f\054\uff6f\065\uff6f\073" +
    "\uff6f\075\uff6f\001\002\000\016\003\uff6f\034\uff6f\054\uff6f" +
    "\065\uff6f\073\uff6f\075\uff6f\001\002\000\016\003\uff6f\034" +
    "\uff6f\054\uff6f\065\uff6f\073\uff6f\075\uff6f\001\002\000\016" +
    "\003\uff6f\034\uff6f\054\uff6f\065\uff6f\073\uff6f\075\uff6f\001" +
    "\002\000\014\003\065\043\066\057\067\074\062\075\070" +
    "\001\002\000\016\003\uff6f\034\uff6f\054\uff6f\065\uff6f\073" +
    "\uff6f\075\uff6f\001\002\000\014\003\065\043\066\057\067" +
    "\074\062\075\070\001\002\000\016\003\uff6f\034\uff6f\054" +
    "\uff6f\065\uff6f\073\uff6f\075\uff6f\001\002\000\016\003\uff66" +
    "\034\uff66\054\uff66\065\uff66\073\uff66\075\uff66\001\002\000" +
    "\012\060\uff35\061\uff35\066\uff35\072\uff35\001\002\000\064" +
    "\003\uff67\010\uff67\012\uff67\013\uff67\015\uff67\016\uff67\024" +
    "\uff67\025\uff67\026\uff67\027\uff67\030\uff67\037\uff67\040\uff67" +
    "\041\uff67\053\uff6d\054\uff6a\060\uff67\061\uff67\062\uff67\063" +
    "\uff67\066\uff67\070\uff67\071\uff67\072\uff67\075\uff67\001\002" +
    "\000\016\003\116\034\112\054\uff59\065\uff5d\073\uff5b\075" +
    "\uff5b\001\002\000\006\035\144\036\145\001\002\000\070" +
    "\003\uff5e\010\uff5e\012\uff5e\013\uff5e\015\uff5e\016\uff5e\024" +
    "\uff5e\025\uff5e\026\uff5e\027\uff5e\030\uff5e\037\uff5e\040\uff5e" +
    "\041\uff5e\053\uff5e\054\uff5e\055\uff64\056\uff61\060\uff5e\061" +
    "\uff5e\062\uff5e\063\uff5e\066\uff5e\070\uff5e\071\uff5e\072\uff5e" +
    "\075\uff5e\001\002\000\006\073\125\075\126\001\002\000" +
    "\004\054\123\001\002\000\070\003\uff54\010\uff54\012\uff54" +
    "\013\uff54\015\uff54\016\uff54\024\uff54\025\uff54\026\uff54\027" +
    "\uff54\030\uff54\037\uff54\040\uff54\041\uff54\053\uff54\054\uff54" +
    "\055\uff54\056\uff54\060\uff54\061\uff54\062\uff54\063\uff54\066" +
    "\uff54\070\uff54\071\uff54\072\uff54\075\uff54\001\002\000\004" +
    "\065\120\001\002\000\016\003\uff6f\034\uff6f\054\uff6f\065" +
    "\uff6f\073\uff6f\075\uff6f\001\002\000\004\066\122\001\002" +
    "\000\070\003\uff5c\010\uff5c\012\uff5c\013\uff5c\015\uff5c\016" +
    "\uff5c\024\uff5c\025\uff5c\026\uff5c\027\uff5c\030\uff5c\037\uff5c" +
    "\040\uff5c\041\uff5c\053\uff5c\054\uff5c\055\uff5c\056\uff5c\060" +
    "\uff5c\061\uff5c\062\uff5c\063\uff5c\066\uff5c\070\uff5c\071\uff5c" +
    "\072\uff5c\075\uff5c\001\002\000\006\073\uff58\075\uff58\001" +
    "\002\000\006\073\125\075\126\001\002\000\070\003\uff53" +
    "\010\uff53\012\uff53\013\uff53\015\uff53\016\uff53\024\uff53\025" +
    "\uff53\026\uff53\027\uff53\030\uff53\037\uff53\040\uff53\041\uff53" +
    "\053\uff53\054\uff53\055\uff53\056\uff53\060\uff53\061\uff53\062" +
    "\uff53\063\uff53\066\uff53\070\uff53\071\uff53\072\uff53\075\uff53" +
    "\001\002\000\070\003\uff52\010\uff52\012\uff52\013\uff52\015" +
    "\uff52\016\uff52\024\uff52\025\uff52\026\uff52\027\uff52\030\uff52" +
    "\037\uff52\040\uff52\041\uff52\053\uff52\054\uff52\055\uff52\056" +
    "\uff52\060\uff52\061\uff52\062\uff52\063\uff52\066\uff52\070\uff52" +
    "\071\uff52\072\uff52\075\uff52\001\002\000\070\003\uff57\010" +
    "\uff57\012\uff57\013\uff57\015\uff57\016\uff57\024\uff57\025\uff57" +
    "\026\uff57\027\uff57\030\uff57\037\uff57\040\uff57\041\uff57\053" +
    "\uff57\054\uff57\055\uff57\056\uff57\060\uff57\061\uff57\062\uff57" +
    "\063\uff57\066\uff57\070\uff57\071\uff57\072\uff57\075\uff57\001" +
    "\002\000\070\003\uff5a\010\uff5a\012\uff5a\013\uff5a\015\uff5a" +
    "\016\uff5a\024\uff5a\025\uff5a\026\uff5a\027\uff5a\030\uff5a\037" +
    "\uff5a\040\uff5a\041\uff5a\053\uff5a\054\uff5a\055\uff5a\056\uff5a" +
    "\060\uff5a\061\uff5a\062\uff5a\063\uff5a\066\uff5a\070\uff5a\071" +
    "\uff5a\072\uff5a\075\uff5a\001\002\000\064\003\uff65\010\uff65" +
    "\012\uff65\013\uff65\015\uff65\016\uff65\024\uff65\025\uff65\026" +
    "\uff65\027\uff65\030\uff65\037\uff65\040\uff65\041\uff65\053\uff65" +
    "\054\uff65\060\uff65\061\uff65\062\uff65\063\uff65\066\uff65\070" +
    "\uff65\071\uff65\072\uff65\075\uff65\001\002\000\004\056\140" +
    "\001\002\000\004\055\134\001\002\000\016\003\uff63\034" +
    "\uff63\054\uff63\065\uff63\073\uff63\075\uff63\001\002\000\016" +
    "\003\116\034\112\054\uff59\065\uff5d\073\uff5b\075\uff5b\001" +
    "\002\000\070\003\uff5e\010\uff5e\012\uff5e\013\uff5e\015\uff5e" +
    "\016\uff5e\024\uff5e\025\uff5e\026\uff5e\027\uff5e\030\uff5e\037" +
    "\uff5e\040\uff5e\041\uff5e\053\uff5e\054\uff5e\055\uff64\056\uff61" +
    "\060\uff5e\061\uff5e\062\uff5e\063\uff5e\066\uff5e\070\uff5e\071" +
    "\uff5e\072\uff5e\075\uff5e\001\002\000\064\003\uff62\010\uff62" +
    "\012\uff62\013\uff62\015\uff62\016\uff62\024\uff62\025\uff62\026" +
    "\uff62\027\uff62\030\uff62\037\uff62\040\uff62\041\uff62\053\uff62" +
    "\054\uff62\060\uff62\061\uff62\062\uff62\063\uff62\066\uff62\070" +
    "\uff62\071\uff62\072\uff62\075\uff62\001\002\000\016\003\uff60" +
    "\034\uff60\054\uff60\065\uff60\073\uff60\075\uff60\001\002\000" +
    "\016\003\116\034\112\054\uff59\065\uff5d\073\uff5b\075\uff5b" +
    "\001\002\000\070\003\uff5e\010\uff5e\012\uff5e\013\uff5e\015" +
    "\uff5e\016\uff5e\024\uff5e\025\uff5e\026\uff5e\027\uff5e\030\uff5e" +
    "\037\uff5e\040\uff5e\041\uff5e\053\uff5e\054\uff5e\055\uff64\056" +
    "\uff61\060\uff5e\061\uff5e\062\uff5e\063\uff5e\066\uff5e\070\uff5e" +
    "\071\uff5e\072\uff5e\075\uff5e\001\002\000\064\003\uff5f\010" +
    "\uff5f\012\uff5f\013\uff5f\015\uff5f\016\uff5f\024\uff5f\025\uff5f" +
    "\026\uff5f\027\uff5f\030\uff5f\037\uff5f\040\uff5f\041\uff5f\053" +
    "\uff5f\054\uff5f\060\uff5f\061\uff5f\062\uff5f\063\uff5f\066\uff5f" +
    "\070\uff5f\071\uff5f\072\uff5f\075\uff5f\001\002\000\070\003" +
    "\uff56\010\uff56\012\uff56\013\uff56\015\uff56\016\uff56\024\uff56" +
    "\025\uff56\026\uff56\027\uff56\030\uff56\037\uff56\040\uff56\041" +
    "\uff56\053\uff56\054\uff56\055\uff56\056\uff56\060\uff56\061\uff56" +
    "\062\uff56\063\uff56\066\uff56\070\uff56\071\uff56\072\uff56\075" +
    "\uff56\001\002\000\070\003\uff55\010\uff55\012\uff55\013\uff55" +
    "\015\uff55\016\uff55\024\uff55\025\uff55\026\uff55\027\uff55\030" +
    "\uff55\037\uff55\040\uff55\041\uff55\053\uff55\054\uff55\055\uff55" +
    "\056\uff55\060\uff55\061\uff55\062\uff55\063\uff55\066\uff55\070" +
    "\uff55\071\uff55\072\uff55\075\uff55\001\002\000\004\054\155" +
    "\001\002\000\004\053\151\001\002\000\060\003\uff6e\010" +
    "\uff6e\012\uff6e\013\uff6e\015\uff6e\016\uff6e\024\uff6e\025\uff6e" +
    "\026\uff6e\027\uff6e\030\uff6e\037\uff6e\040\uff6e\041\uff6e\060" +
    "\uff6e\061\uff6e\062\uff6e\063\uff6e\066\uff6e\070\uff6e\071\uff6e" +
    "\072\uff6e\075\uff6e\001\002\000\016\003\uff6c\034\uff6c\054" +
    "\uff6c\065\uff6c\073\uff6c\075\uff6c\001\002\000\016\003\uff66" +
    "\034\uff66\054\uff66\065\uff66\073\uff66\075\uff66\001\002\000" +
    "\064\003\uff67\010\uff67\012\uff67\013\uff67\015\uff67\016\uff67" +
    "\024\uff67\025\uff67\026\uff67\027\uff67\030\uff67\037\uff67\040" +
    "\uff67\041\uff67\053\uff6d\054\uff6a\060\uff67\061\uff67\062\uff67" +
    "\063\uff67\066\uff67\070\uff67\071\uff67\072\uff67\075\uff67\001" +
    "\002\000\060\003\uff6b\010\uff6b\012\uff6b\013\uff6b\015\uff6b" +
    "\016\uff6b\024\uff6b\025\uff6b\026\uff6b\027\uff6b\030\uff6b\037" +
    "\uff6b\040\uff6b\041\uff6b\060\uff6b\061\uff6b\062\uff6b\063\uff6b" +
    "\066\uff6b\070\uff6b\071\uff6b\072\uff6b\075\uff6b\001\002\000" +
    "\016\003\uff69\034\uff69\054\uff69\065\uff69\073\uff69\075\uff69" +
    "\001\002\000\016\003\uff66\034\uff66\054\uff66\065\uff66\073" +
    "\uff66\075\uff66\001\002\000\064\003\uff67\010\uff67\012\uff67" +
    "\013\uff67\015\uff67\016\uff67\024\uff67\025\uff67\026\uff67\027" +
    "\uff67\030\uff67\037\uff67\040\uff67\041\uff67\053\uff6d\054\uff6a" +
    "\060\uff67\061\uff67\062\uff67\063\uff67\066\uff67\070\uff67\071" +
    "\uff67\072\uff67\075\uff67\001\002\000\060\003\uff68\010\uff68" +
    "\012\uff68\013\uff68\015\uff68\016\uff68\024\uff68\025\uff68\026" +
    "\uff68\027\uff68\030\uff68\037\uff68\040\uff68\041\uff68\060\uff68" +
    "\061\uff68\062\uff68\063\uff68\066\uff68\070\uff68\071\uff68\072" +
    "\uff68\075\uff68\001\002\000\006\066\uff4a\072\uff4a\001\002" +
    "\000\012\060\uff36\061\uff36\066\uff36\072\uff36\001\002\000" +
    "\006\066\uff4b\072\uff4b\001\002\000\012\060\uff39\061\uff39" +
    "\066\uff39\072\uff39\001\002\000\012\060\uff3a\061\uff3a\066" +
    "\uff3a\072\uff3a\001\002\000\012\060\uff38\061\uff38\066\uff38" +
    "\072\uff38\001\002\000\012\060\uff37\061\uff37\066\uff37\072" +
    "\uff37\001\002\000\012\060\uff3c\061\uff3c\066\uff3c\072\uff3c" +
    "\001\002\000\014\003\065\043\066\057\067\074\062\075" +
    "\070\001\002\000\004\066\173\001\002\000\012\060\uff3b" +
    "\061\uff3b\066\uff3b\072\uff3b\001\002\000\012\060\uff7d\061" +
    "\uff7d\066\uff7d\072\uff7d\001\002\000\012\060\uff7f\061\uff7f" +
    "\066\uff7f\072\uff7f\001\002\000\012\060\200\061\201\066" +
    "\uff49\072\uff49\001\002\000\012\060\uff7e\061\uff7e\066\uff7e" +
    "\072\uff7e\001\002\000\014\003\065\043\066\057\067\074" +
    "\062\075\070\001\002\000\014\003\065\043\066\057\067" +
    "\074\062\075\070\001\002\000\006\066\uff47\072\uff47\001" +
    "\002\000\006\066\uff48\072\uff48\001\002\000\014\003\065" +
    "\043\066\057\067\074\062\075\070\001\002\000\014\003" +
    "\065\043\066\057\067\074\062\075\070\001\002\000\006" +
    "\066\uff3f\072\uff3f\001\002\000\006\066\uff3e\072\uff3e\001" +
    "\002\000\014\003\065\043\066\057\067\074\062\075\070" +
    "\001\002\000\014\003\065\043\066\057\067\074\062\075" +
    "\070\001\002\000\006\066\uff41\072\uff41\001\002\000\006" +
    "\066\uff42\072\uff42\001\002\000\014\003\065\043\066\057" +
    "\067\074\062\075\070\001\002\000\014\003\065\043\066" +
    "\057\067\074\062\075\070\001\002\000\006\066\uff4d\072" +
    "\uff4d\001\002\000\006\066\uff4e\072\uff4e\001\002\000\004" +
    "\067\221\001\002\000\040\003\042\010\046\012\025\013" +
    "\045\015\035\016\026\027\032\030\027\037\047\040\036" +
    "\041\037\062\040\063\041\070\uff8a\075\043\001\002\000" +
    "\004\070\223\001\002\000\042\003\uff51\010\uff51\011\225" +
    "\012\uff51\013\uff51\015\uff51\016\uff51\027\uff51\030\uff51\037" +
    "\uff51\040\uff51\041\uff51\062\uff51\063\uff51\070\uff51\075\uff51" +
    "\001\002\000\040\003\uff50\010\uff50\012\uff50\013\uff50\015" +
    "\uff50\016\uff50\027\uff50\030\uff50\037\uff50\040\uff50\041\uff50" +
    "\062\uff50\063\uff50\070\uff50\075\uff50\001\002\000\006\010" +
    "\226\067\227\001\002\000\004\065\060\001\002\000\040" +
    "\003\042\010\046\012\025\013\045\015\035\016\026\027" +
    "\032\030\027\037\047\040\036\041\037\062\040\063\041" +
    "\070\uff8a\075\043\001\002\000\004\070\231\001\002\000" +
    "\040\003\uff33\010\uff33\012\uff33\013\uff33\015\uff33\016\uff33" +
    "\027\uff33\030\uff33\037\uff33\040\uff33\041\uff33\062\uff33\063" +
    "\uff33\070\uff33\075\uff33\001\002\000\040\003\uff34\010\uff34" +
    "\012\uff34\013\uff34\015\uff34\016\uff34\027\uff34\030\uff34\037" +
    "\uff34\040\uff34\041\uff34\062\uff34\063\uff34\070\uff34\075\uff34" +
    "\001\002\000\040\003\042\010\046\012\025\013\045\015" +
    "\035\016\026\027\032\030\027\037\047\040\036\041\037" +
    "\062\040\063\041\070\uff8a\075\043\001\002\000\004\070" +
    "\uffc9\001\002\000\004\065\236\001\002\000\014\003\065" +
    "\043\066\057\067\074\062\075\070\001\002\000\004\072" +
    "\240\001\002\000\004\023\uff86\001\002\000\004\072\253" +
    "\001\002\000\004\023\243\001\002\000\016\003\uff85\034" +
    "\uff85\054\uff85\065\uff85\073\uff85\075\uff85\001\002\000\016" +
    "\003\uff6f\034\uff6f\054\uff6f\065\uff6f\073\uff6f\075\uff6f\001" +
    "\002\000\012\003\247\024\252\025\246\026\250\001\002" +
    "\000\046\003\uff82\010\uff82\012\uff82\013\uff82\015\uff82\016" +
    "\uff82\027\uff82\030\uff82\037\uff82\040\uff82\041\uff82\062\uff82" +
    "\063\uff82\066\uff82\070\uff82\071\uff82\072\uff82\075\uff82\001" +
    "\002\000\046\003\uff80\010\uff80\012\uff80\013\uff80\015\uff80" +
    "\016\uff80\027\uff80\030\uff80\037\uff80\040\uff80\041\uff80\062" +
    "\uff80\063\uff80\066\uff80\070\uff80\071\uff80\072\uff80\075\uff80" +
    "\001\002\000\046\003\uff81\010\uff81\012\uff81\013\uff81\015" +
    "\uff81\016\uff81\027\uff81\030\uff81\037\uff81\040\uff81\041\uff81" +
    "\062\uff81\063\uff81\066\uff81\070\uff81\071\uff81\072\uff81\075" +
    "\uff81\001\002\000\044\003\uff84\010\uff84\012\uff84\013\uff84" +
    "\015\uff84\016\uff84\027\uff84\030\uff84\037\uff84\040\uff84\041" +
    "\uff84\062\uff84\063\uff84\070\uff84\071\uff84\072\uff84\075\uff84" +
    "\001\002\000\046\003\uff83\010\uff83\012\uff83\013\uff83\015" +
    "\uff83\016\uff83\027\uff83\030\uff83\037\uff83\040\uff83\041\uff83" +
    "\062\uff83\063\uff83\066\uff83\070\uff83\071\uff83\072\uff83\075" +
    "\uff83\001\002\000\014\003\065\043\066\057\067\074\062" +
    "\075\070\001\002\000\004\066\255\001\002\000\042\003" +
    "\uff2f\010\uff2f\012\uff2f\013\uff2f\015\uff2f\016\uff2f\027\uff2f" +
    "\030\uff2f\037\uff2f\040\uff2f\041\uff2f\062\uff2f\063\uff2f\070" +
    "\uff2f\071\uff2f\075\uff2f\001\002\000\004\071\273\001\002" +
    "\000\042\003\uffd1\010\uffd1\012\uffd1\013\uffd1\015\uffd1\016" +
    "\uffd1\027\uffd1\030\uffd1\037\uffd1\040\uffd1\041\uffd1\062\uffd1" +
    "\063\uffd1\070\uffd1\071\uffd3\075\uffd1\001\002\000\020\003" +
    "\uff75\034\uff75\054\uff75\065\uff75\073\uff75\074\264\075\uff75" +
    "\001\002\000\040\003\042\010\046\012\025\013\045\015" +
    "\035\016\026\027\032\030\027\037\047\040\036\041\037" +
    "\062\040\063\041\070\uff8a\075\043\001\002\000\004\070" +
    "\uffd4\001\002\000\016\003\uff6f\034\uff6f\054\uff6f\065\uff6f" +
    "\073\uff6f\075\uff6f\001\002\000\042\003\uff76\010\uff76\012" +
    "\uff76\013\uff76\015\uff76\016\uff76\027\uff76\030\uff76\037\uff76" +
    "\040\uff76\041\uff76\062\uff76\063\uff76\070\uff76\071\uff76\075" +
    "\uff76\001\002\000\042\003\uff74\010\uff74\012\uff74\013\uff74" +
    "\015\uff74\016\uff74\027\uff74\030\uff74\037\uff74\040\uff74\041" +
    "\uff74\062\uff74\063\uff74\070\uff74\071\uff74\075\uff74\001\002" +
    "\000\040\003\042\010\046\012\025\013\045\015\035\016" +
    "\026\027\032\030\027\037\047\040\036\041\037\062\040" +
    "\063\041\070\uff8a\075\043\001\002\000\004\071\270\001" +
    "\002\000\040\003\042\010\046\012\025\013\045\015\035" +
    "\016\026\027\032\030\027\037\047\040\036\041\037\062" +
    "\040\063\041\070\uff8a\075\043\001\002\000\004\070\uffd2" +
    "\001\002\000\004\070\uffd0\001\002\000\040\003\042\010" +
    "\046\012\025\013\045\015\035\016\026\027\032\030\027" +
    "\037\047\040\036\041\037\062\040\063\041\070\uff8a\075" +
    "\043\001\002\000\004\070\uffd6\001\002\000\016\003\uff7c" +
    "\034\uff7c\054\uff7c\065\uff7c\073\uff7c\075\uff7c\001\002\000" +
    "\042\003\uffe5\010\uffe5\012\uffe5\013\uffe5\015\uffe5\016\uffe5" +
    "\027\uffe5\030\uffe5\037\uffe5\040\uffe5\041\uffe5\062\uffe5\063" +
    "\uffe5\070\uffe5\071\314\075\uffe5\001\002\000\004\021\307" +
    "\001\002\000\042\003\uffe1\010\uffe1\012\uffe1\013\uffe1\015" +
    "\uffe1\016\uffe1\027\uffe1\030\uffe1\037\uffe1\040\uffe1\041\uffe1" +
    "\062\uffe1\063\uffe1\070\uffe1\071\302\075\uffe1\001\002\000" +
    "\040\003\042\010\046\012\025\013\045\015\035\016\026" +
    "\027\032\030\027\037\047\040\036\041\037\062\040\063" +
    "\041\070\uff8a\075\043\001\002\000\040\003\uffe3\010\uffe3" +
    "\012\uffe3\013\uffe3\015\uffe3\016\uffe3\027\uffe3\030\uffe3\037" +
    "\uffe3\040\uffe3\041\uffe3\062\uffe3\063\uffe3\070\uffe3\075\uffe3" +
    "\001\002\000\040\003\042\010\046\012\025\013\045\015" +
    "\035\016\026\027\032\030\027\037\047\040\036\041\037" +
    "\062\040\063\041\070\uff8a\075\043\001\002\000\004\070" +
    "\uffe2\001\002\000\004\070\uffe0\001\002\000\050\003\uff77" +
    "\010\uff77\012\uff77\013\uff77\015\uff77\016\uff77\027\uff77\030" +
    "\uff77\037\uff77\040\uff77\041\uff77\062\uff77\063\uff77\064\uff77" +
    "\066\uff77\070\uff77\071\uff77\072\uff77\075\uff77\001\002\000" +
    "\010\003\311\006\313\007\312\001\002\000\050\003\uff73" +
    "\010\uff73\012\uff73\013\uff73\015\uff73\016\uff73\027\uff73\030" +
    "\uff73\037\uff73\040\uff73\041\uff73\062\uff73\063\uff73\064\uff73" +
    "\066\uff73\070\uff73\071\uff73\072\uff73\075\uff73\001\002\000" +
    "\050\003\uff70\010\uff70\012\uff70\013\uff70\015\uff70\016\uff70" +
    "\027\uff70\030\uff70\037\uff70\040\uff70\041\uff70\062\uff70\063" +
    "\uff70\064\uff70\066\uff70\070\uff70\071\uff70\072\uff70\075\uff70" +
    "\001\002\000\050\003\uff71\010\uff71\012\uff71\013\uff71\015" +
    "\uff71\016\uff71\027\uff71\030\uff71\037\uff71\040\uff71\041\uff71" +
    "\062\uff71\063\uff71\064\uff71\066\uff71\070\uff71\071\uff71\072" +
    "\uff71\075\uff71\001\002\000\050\003\uff72\010\uff72\012\uff72" +
    "\013\uff72\015\uff72\016\uff72\027\uff72\030\uff72\037\uff72\040" +
    "\uff72\041\uff72\062\uff72\063\uff72\064\uff72\066\uff72\070\uff72" +
    "\071\uff72\072\uff72\075\uff72\001\002\000\040\003\uffe7\010" +
    "\uffe7\012\uffe7\013\uffe7\015\uffe7\016\uffe7\027\uffe7\030\uffe7" +
    "\037\uffe7\040\uffe7\041\uffe7\062\uffe7\063\uffe7\070\uffe7\075" +
    "\uffe7\001\002\000\040\003\042\010\046\012\025\013\045" +
    "\015\035\016\026\027\032\030\027\037\047\040\036\041" +
    "\037\062\040\063\041\070\uff8a\075\043\001\002\000\004" +
    "\070\uffe4\001\002\000\040\003\042\010\046\012\025\013" +
    "\045\015\035\016\026\027\032\030\027\037\047\040\036" +
    "\041\037\062\040\063\041\070\uff8a\075\043\001\002\000" +
    "\004\070\uffe6\001\002\000\016\003\uff6f\034\uff6f\054\uff6f" +
    "\065\uff6f\073\uff6f\075\uff6f\001\002\000\042\003\uff7b\010" +
    "\uff7b\012\uff7b\013\uff7b\015\uff7b\016\uff7b\027\uff7b\030\uff7b" +
    "\037\uff7b\040\uff7b\041\uff7b\062\uff7b\063\uff7b\070\uff7b\071" +
    "\uff7b\075\uff7b\001\002\000\004\064\326\001\002\000\040" +
    "\003\042\010\046\012\025\013\045\015\035\016\026\027" +
    "\032\030\027\037\047\040\036\041\037\062\040\063\041" +
    "\070\uff8a\075\043\001\002\000\004\070\uff8b\001\002\000" +
    "\016\003\uff79\034\uff79\054\uff79\065\uff79\073\uff79\075\uff79" +
    "\001\002\000\016\003\uff6f\034\uff6f\054\uff6f\065\uff6f\073" +
    "\uff6f\075\uff6f\001\002\000\042\003\uff78\010\uff78\012\uff78" +
    "\013\uff78\015\uff78\016\uff78\027\uff78\030\uff78\037\uff78\040" +
    "\uff78\041\uff78\062\uff78\063\uff78\070\uff78\071\uff78\075\uff78" +
    "\001\002\000\042\003\uffd9\010\uffd9\012\uffd9\013\uffd9\015" +
    "\uffd9\016\uffd9\027\uffd9\030\uffd9\037\uffd9\040\uffd9\041\uffd9" +
    "\062\uffd9\063\uffd9\070\uffd9\071\333\075\uffd9\001\002\000" +
    "\040\003\042\010\046\012\025\013\045\015\035\016\026" +
    "\027\032\030\027\037\047\040\036\041\037\062\040\063" +
    "\041\070\uff8a\075\043\001\002\000\040\003\uffdb\010\uffdb" +
    "\012\uffdb\013\uffdb\015\uffdb\016\uffdb\027\uffdb\030\uffdb\037" +
    "\uffdb\040\uffdb\041\uffdb\062\uffdb\063\uffdb\070\uffdb\075\uffdb" +
    "\001\002\000\040\003\042\010\046\012\025\013\045\015" +
    "\035\016\026\027\032\030\027\037\047\040\036\041\037" +
    "\062\040\063\041\070\uff8a\075\043\001\002\000\004\070" +
    "\uffda\001\002\000\004\070\uffd8\001\002\000\042\003\uffdd" +
    "\010\uffdd\012\uffdd\013\uffdd\015\uffdd\016\uffdd\027\uffdd\030" +
    "\uffdd\037\uffdd\040\uffdd\041\uffdd\062\uffdd\063\uffdd\070\uffdd" +
    "\071\341\075\uffdd\001\002\000\040\003\042\010\046\012" +
    "\025\013\045\015\035\016\026\027\032\030\027\037\047" +
    "\040\036\041\037\062\040\063\041\070\uff8a\075\043\001" +
    "\002\000\040\003\uffdf\010\uffdf\012\uffdf\013\uffdf\015\uffdf" +
    "\016\uffdf\027\uffdf\030\uffdf\037\uffdf\040\uffdf\041\uffdf\062" +
    "\uffdf\063\uffdf\070\uffdf\075\uffdf\001\002\000\040\003\042" +
    "\010\046\012\025\013\045\015\035\016\026\027\032\030" +
    "\027\037\047\040\036\041\037\062\040\063\041\070\uff8a" +
    "\075\043\001\002\000\004\070\uffde\001\002\000\004\070" +
    "\uffdc\001\002\000\042\003\uff92\010\uff92\012\uff92\013\uff92" +
    "\015\uff92\016\uff92\027\uff92\030\uff92\037\uff92\040\uff92\041" +
    "\uff92\062\uff92\063\uff92\070\uff92\071\uff94\075\uff92\001\002" +
    "\000\040\003\042\010\046\012\025\013\045\015\035\016" +
    "\026\027\032\030\027\037\047\040\036\041\037\062\040" +
    "\063\041\070\uff8a\075\043\001\002\000\004\071\350\001" +
    "\002\000\040\003\042\010\046\012\025\013\045\015\035" +
    "\016\026\027\032\030\027\037\047\040\036\041\037\062" +
    "\040\063\041\070\uff8a\075\043\001\002\000\004\070\uff93" +
    "\001\002\000\004\070\uff91\001\002\000\042\003\uffb6\010" +
    "\uffb6\012\uffb6\013\uffb6\015\uffb6\016\uffb6\027\uffb6\030\uffb6" +
    "\037\uffb6\040\uffb6\041\uffb6\062\uffb6\063\uffb6\070\uffb6\071" +
    "\uffb8\075\uffb6\001\002\000\040\003\042\010\046\012\025" +
    "\013\045\015\035\016\026\027\032\030\027\037\047\040" +
    "\036\041\037\062\040\063\041\070\uff8a\075\043\001\002" +
    "\000\004\071\356\001\002\000\040\003\042\010\046\012" +
    "\025\013\045\015\035\016\026\027\032\030\027\037\047" +
    "\040\036\041\037\062\040\063\041\070\uff8a\075\043\001" +
    "\002\000\004\070\uffb7\001\002\000\004\070\uffb5\001\002" +
    "\000\042\003\uff8e\010\uff8e\012\uff8e\013\uff8e\015\uff8e\016" +
    "\uff8e\027\uff8e\030\uff8e\037\uff8e\040\uff8e\041\uff8e\062\uff8e" +
    "\063\uff8e\070\uff8e\071\uff90\075\uff8e\001\002\000\004\071" +
    "\365\001\002\000\040\003\042\010\046\012\025\013\045" +
    "\015\035\016\026\027\032\030\027\037\047\040\036\041" +
    "\037\062\040\063\041\070\uff8a\075\043\001\002\000\004" +
    "\070\uff8d\001\002\000\040\003\042\010\046\012\025\013" +
    "\045\015\035\016\026\027\032\030\027\037\047\040\036" +
    "\041\037\062\040\063\041\070\uff8a\075\043\001\002\000" +
    "\004\070\uff8f\001\002\000\040\003\042\010\046\012\025" +
    "\013\045\015\035\016\026\027\032\030\027\037\047\040" +
    "\036\041\037\062\040\063\041\070\uff8a\075\043\001\002" +
    "\000\004\071\371\001\002\000\040\003\042\010\046\012" +
    "\025\013\045\015\035\016\026\027\032\030\027\037\047" +
    "\040\036\041\037\062\040\063\041\070\uff8a\075\043\001" +
    "\002\000\004\070\uffc7\001\002\000\004\070\uffc5\001\002" +
    "\000\040\003\042\010\046\012\025\013\045\015\035\016" +
    "\026\027\032\030\027\037\047\040\036\041\037\062\040" +
    "\063\041\070\uff8a\075\043\001\002\000\004\071\376\001" +
    "\002\000\040\003\042\010\046\012\025\013\045\015\035" +
    "\016\026\027\032\030\027\037\047\040\036\041\037\062" +
    "\040\063\041\070\uff8a\075\043\001\002\000\004\070\uffce" +
    "\001\002\000\004\070\uffcc\001\002\000\006\023\uff86\033" +
    "\u0110\001\002\000\006\023\uff86\033\u0104\001\002\000\042" +
    "\003\uffb2\010\uffb2\012\uffb2\013\uffb2\015\uffb2\016\uffb2\027" +
    "\uffb2\030\uffb2\037\uffb2\040\uffb2\041\uffb2\062\uffb2\063\uffb2" +
    "\070\uffb2\071\uffb4\075\uffb2\001\002\000\042\003\uffae\010" +
    "\uffae\012\uffae\013\uffae\015\uffae\016\uffae\027\uffae\030\uffae" +
    "\037\uffae\040\uffae\041\uffae\062\uffae\063\uffae\070\uffae\071" +
    "\uffb0\075\uffae\001\002\000\040\003\042\010\046\012\025" +
    "\013\045\015\035\016\026\027\032\030\027\037\047\040" +
    "\036\041\037\062\040\063\041\070\uff8a\075\043\001\002" +
    "\000\004\071\u0107\001\002\000\040\003\042\010\046\012" +
    "\025\013\045\015\035\016\026\027\032\030\027\037\047" +
    "\040\036\041\037\062\040\063\041\070\uff8a\075\043\001" +
    "\002\000\004\070\uffaf\001\002\000\004\070\uffad\001\002" +
    "\000\040\003\042\010\046\012\025\013\045\015\035\016" +
    "\026\027\032\030\027\037\047\040\036\041\037\062\040" +
    "\063\041\070\uff8a\075\043\001\002\000\004\071\u010c\001" +
    "\002\000\040\003\042\010\046\012\025\013\045\015\035" +
    "\016\026\027\032\030\027\037\047\040\036\041\037\062" +
    "\040\063\041\070\uff8a\075\043\001\002\000\004\070\uffb3" +
    "\001\002\000\004\070\uffb1\001\002\000\042\003\uffa2\010" +
    "\uffa2\012\uffa2\013\uffa2\015\uffa2\016\uffa2\027\uffa2\030\uffa2" +
    "\037\uffa2\040\uffa2\041\uffa2\062\uffa2\063\uffa2\070\uffa2\071" +
    "\uffa4\075\uffa2\001\002\000\042\003\uff9e\010\uff9e\012\uff9e" +
    "\013\uff9e\015\uff9e\016\uff9e\027\uff9e\030\uff9e\037\uff9e\040" +
    "\uff9e\041\uff9e\062\uff9e\063\uff9e\070\uff9e\071\uffa0\075\uff9e" +
    "\001\002\000\040\003\042\010\046\012\025\013\045\015" +
    "\035\016\026\027\032\030\027\037\047\040\036\041\037" +
    "\062\040\063\041\070\uff8a\075\043\001\002\000\004\071" +
    "\u0113\001\002\000\040\003\042\010\046\012\025\013\045" +
    "\015\035\016\026\027\032\030\027\037\047\040\036\041" +
    "\037\062\040\063\041\070\uff8a\075\043\001\002\000\004" +
    "\070\uff9f\001\002\000\004\070\uff9d\001\002\000\040\003" +
    "\042\010\046\012\025\013\045\015\035\016\026\027\032" +
    "\030\027\037\047\040\036\041\037\062\040\063\041\070" +
    "\uff8a\075\043\001\002\000\004\071\u0118\001\002\000\040" +
    "\003\042\010\046\012\025\013\045\015\035\016\026\027" +
    "\032\030\027\037\047\040\036\041\037\062\040\063\041" +
    "\070\uff8a\075\043\001\002\000\004\070\uffa3\001\002\000" +
    "\004\070\uffa1\001\002\000\040\003\042\010\046\012\025" +
    "\013\045\015\035\016\026\027\032\030\027\037\047\040" +
    "\036\041\037\062\040\063\041\070\uff8a\075\043\001\002" +
    "\000\004\071\u011d\001\002\000\040\003\042\010\046\012" +
    "\025\013\045\015\035\016\026\027\032\030\027\037\047" +
    "\040\036\041\037\062\040\063\041\070\uff8a\075\043\001" +
    "\002\000\004\070\uffc3\001\002\000\004\070\uffc1\001\002" +
    "\000\010\003\ufffd\044\ufffd\070\ufffd\001\002\000\010\003" +
    "\u0123\044\u0124\070\u0125\001\002\000\004\002\ufffc\001\002" +
    "\000\006\004\ufff4\075\ufff0\001\002\000\004\075\ufff2\001" +
    "\002\000\004\004\u0126\001\002\000\004\002\ufff5\001\002" +
    "\000\004\075\u0128\001\002\000\004\065\uffee\001\002\000" +
    "\010\003\u0123\044\u0124\070\u0125\001\002\000\004\002\ufff1" +
    "\001\002\000\004\065\u012c\001\002\000\006\066\uffe8\075" +
    "\u012e\001\002\000\004\066\u0133\001\002\000\004\020\277" +
    "\001\002\000\006\066\uffe9\072\uffeb\001\002\000\004\072" +
    "\u0131\001\002\000\006\066\uffe8\075\u012e\001\002\000\004" +
    "\066\uffea\001\002\000\004\067\u0134\001\002\000\040\003" +
    "\uffed\010\uffed\012\uffed\013\uffed\015\uffed\016\uffed\027\uffed" +
    "\030\uffed\037\uffed\040\uffed\041\uffed\062\uffed\063\uffed\070" +
    "\uffed\075\uffed\001\002\000\040\003\042\010\046\012\025" +
    "\013\045\015\035\016\026\027\032\030\027\037\047\040" +
    "\036\041\037\062\040\063\041\070\uff8a\075\043\001\002" +
    "\000\004\070\u0137\001\002\000\010\003\uffec\044\uffec\070" +
    "\uffec\001\002\000\004\075\u0128\001\002\000\004\004\u013a" +
    "\001\002\000\004\002\ufff3\001\002\000\010\003\u0123\044" +
    "\u0124\070\u0125\001\002\000\004\002\uffef\001\002\000\006" +
    "\023\uff86\033\u014c\001\002\000\006\023\uff86\033\u0140\001" +
    "\002\000\042\003\uffaa\010\uffaa\012\uffaa\013\uffaa\015\uffaa" +
    "\016\uffaa\027\uffaa\030\uffaa\037\uffaa\040\uffaa\041\uffaa\062" +
    "\uffaa\063\uffaa\070\uffaa\071\uffac\075\uffaa\001\002\000\042" +
    "\003\uffa6\010\uffa6\012\uffa6\013\uffa6\015\uffa6\016\uffa6\027" +
    "\uffa6\030\uffa6\037\uffa6\040\uffa6\041\uffa6\062\uffa6\063\uffa6" +
    "\070\uffa6\071\uffa8\075\uffa6\001\002\000\004\071\u0144\001" +
    "\002\000\040\003\042\010\046\012\025\013\045\015\035" +
    "\016\026\027\032\030\027\037\047\040\036\041\037\062" +
    "\040\063\041\070\uff8a\075\043\001\002\000\004\070\uffa5" +
    "\001\002\000\040\003\042\010\046\012\025\013\045\015" +
    "\035\016\026\027\032\030\027\037\047\040\036\041\037" +
    "\062\040\063\041\070\uff8a\075\043\001\002\000\004\070" +
    "\uffa7\001\002\000\040\003\042\010\046\012\025\013\045" +
    "\015\035\016\026\027\032\030\027\037\047\040\036\041" +
    "\037\062\040\063\041\070\uff8a\075\043\001\002\000\004" +
    "\071\u0148\001\002\000\040\003\042\010\046\012\025\013" +
    "\045\015\035\016\026\027\032\030\027\037\047\040\036" +
    "\041\037\062\040\063\041\070\uff8a\075\043\001\002\000" +
    "\004\070\uffab\001\002\000\004\070\uffa9\001\002\000\042" +
    "\003\uff9a\010\uff9a\012\uff9a\013\uff9a\015\uff9a\016\uff9a\027" +
    "\uff9a\030\uff9a\037\uff9a\040\uff9a\041\uff9a\062\uff9a\063\uff9a" +
    "\070\uff9a\071\uff9c\075\uff9a\001\002\000\042\003\uff96\010" +
    "\uff96\012\uff96\013\uff96\015\uff96\016\uff96\027\uff96\030\uff96" +
    "\037\uff96\040\uff96\041\uff96\062\uff96\063\uff96\070\uff96\071" +
    "\uff98\075\uff96\001\002\000\040\003\042\010\046\012\025" +
    "\013\045\015\035\016\026\027\032\030\027\037\047\040" +
    "\036\041\037\062\040\063\041\070\uff8a\075\043\001\002" +
    "\000\004\071\u014f\001\002\000\040\003\042\010\046\012" +
    "\025\013\045\015\035\016\026\027\032\030\027\037\047" +
    "\040\036\041\037\062\040\063\041\070\uff8a\075\043\001" +
    "\002\000\004\070\uff97\001\002\000\004\070\uff95\001\002" +
    "\000\040\003\042\010\046\012\025\013\045\015\035\016" +
    "\026\027\032\030\027\037\047\040\036\041\037\062\040" +
    "\063\041\070\uff8a\075\043\001\002\000\004\071\u0154\001" +
    "\002\000\040\003\042\010\046\012\025\013\045\015\035" +
    "\016\026\027\032\030\027\037\047\040\036\041\037\062" +
    "\040\063\041\070\uff8a\075\043\001\002\000\004\070\uff9b" +
    "\001\002\000\004\070\uff99\001\002\000\004\071\u015a\001" +
    "\002\000\040\003\042\010\046\012\025\013\045\015\035" +
    "\016\026\027\032\030\027\037\047\040\036\041\037\062" +
    "\040\063\041\070\uff8a\075\043\001\002\000\004\070\uffbd" +
    "\001\002\000\040\003\042\010\046\012\025\013\045\015" +
    "\035\016\026\027\032\030\027\037\047\040\036\041\037" +
    "\062\040\063\041\070\uff8a\075\043\001\002\000\004\070" +
    "\uffbf\001\002\000\004\065\u015d\001\002\000\004\023\uff86" +
    "\001\002\000\004\072\u015f\001\002\000\014\003\065\043" +
    "\066\057\067\074\062\075\070\001\002\000\004\072\u0161" +
    "\001\002\000\014\003\065\043\066\057\067\074\062\075" +
    "\070\001\002\000\004\066\u0163\001\002\000\042\003\uff31" +
    "\010\uff31\012\uff31\013\uff31\015\uff31\016\uff31\027\uff31\030" +
    "\uff31\037\uff31\040\uff31\041\uff31\062\uff31\063\uff31\070\uff31" +
    "\071\uff31\075\uff31\001\002\000\012\003\uff89\024\uff89\025" +
    "\uff89\026\uff89\001\002\000\012\003\247\024\252\025\246" +
    "\026\250\001\002\000\004\066\uff88\001\002\000\040\003" +
    "\042\010\046\012\025\013\045\015\035\016\026\027\032" +
    "\030\027\037\047\040\036\041\037\062\040\063\041\070" +
    "\uff8a\075\043\001\002\000\004\070\u0169\001\002\000\010" +
    "\003\ufffa\044\ufffa\070\ufffa\001\002\000\010\003\u0123\044" +
    "\u0124\070\u0125\001\002\000\004\002\ufff9\001\002\000\040" +
    "\003\042\010\046\012\025\013\045\015\035\016\026\027" +
    "\032\030\027\037\047\040\036\041\037\062\040\063\041" +
    "\070\uff8a\075\043\001\002\000\004\070\u016e\001\002\000" +
    "\010\003\ufff7\044\ufff7\070\ufff7\001\002\000\010\003\u0123" +
    "\044\u0124\070\u0125\001\002\000\004\002\ufff6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u016e\000\004\002\005\001\001\000\004\044\u016b\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\042\u0166\001\001\000\004\036\011\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\037\015\001\001\000\004\004\020\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\040\023\001\001\000\014\003\027\010\033\011" +
    "\030\016\032\027\043\001\001\000\004\160\u015b\001\001" +
    "\000\006\100\u0156\101\u0157\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\076\u011b\077\u011a\001\001\000\002" +
    "\001\001\000\006\070\374\071\373\001\001\000\006\074" +
    "\367\075\366\001\001\000\006\005\360\134\241\001\001" +
    "\000\002\001\001\000\006\005\344\134\241\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\132\323\137\322" +
    "\001\001\000\002\001\001\000\010\007\256\064\255\065" +
    "\260\001\001\000\004\161\234\001\001\000\004\072\055" +
    "\001\001\000\002\001\001\000\006\102\051\103\050\001" +
    "\001\000\014\003\054\010\033\011\030\016\032\027\043" +
    "\001\001\000\002\001\001\000\014\003\053\010\033\011" +
    "\030\016\032\027\043\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\030\056\001\001\000\004\073\232\001" +
    "\001\000\012\031\060\032\070\033\062\034\063\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\175\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\031\074\032\070\033\062\034\063\001\001\000\012" +
    "\031\073\032\070\033\062\034\063\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\020\166\142\105\001\001" +
    "\000\006\020\165\142\105\001\001\000\006\020\164\142" +
    "\105\001\001\000\006\020\163\142\105\001\001\000\012" +
    "\031\162\032\070\033\062\034\063\001\001\000\006\020" +
    "\161\142\105\001\001\000\012\031\160\032\070\033\062" +
    "\034\063\001\001\000\006\020\106\142\105\001\001\000" +
    "\006\022\107\147\110\001\001\000\002\001\001\000\010" +
    "\021\147\143\146\145\145\001\001\000\012\024\112\154" +
    "\116\155\113\156\114\001\001\000\002\001\001\000\010" +
    "\023\130\150\132\152\131\001\001\000\004\017\127\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\020\120\142\105\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\157\123\001\001\000\004\017\126" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\151\134\001\001\000\012\024" +
    "\135\154\116\155\113\156\114\001\001\000\010\023\136" +
    "\150\132\152\131\001\001\000\002\001\001\000\004\153" +
    "\140\001\001\000\012\024\141\154\116\155\113\156\114" +
    "\001\001\000\010\023\142\150\132\152\131\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\144" +
    "\151\001\001\000\006\022\152\147\110\001\001\000\010" +
    "\021\153\143\146\145\145\001\001\000\002\001\001\000" +
    "\004\146\155\001\001\000\006\022\156\147\110\001\001" +
    "\000\010\021\157\143\146\145\145\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\031\171\032\070" +
    "\033\062\034\063\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\031\202\032\070\033\062\034" +
    "\063\001\001\000\012\031\201\032\070\033\062\034\063" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\031" +
    "\206\032\070\033\062\034\063\001\001\000\012\031\205" +
    "\032\070\033\062\034\063\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\031\212\032\070\033\062\034\063" +
    "\001\001\000\012\031\211\032\070\033\062\034\063\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\031\216" +
    "\032\070\033\062\034\063\001\001\000\012\031\215\032" +
    "\070\033\062\034\063\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\003\221\010\033\011" +
    "\030\016\032\027\043\001\001\000\002\001\001\000\004" +
    "\035\223\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\030\231\001\001\000\014\003\227\010\033\011\030" +
    "\016\032\027\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\003\233\010\033\011\030" +
    "\016\032\027\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\031\236\032\070\033\062\034\063\001\001" +
    "\000\002\001\001\000\006\005\240\134\241\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\135\243\001\001" +
    "\000\006\020\244\142\105\001\001\000\004\006\250\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\031\253\032" +
    "\070\033\062\034\063\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\066\266\067\265\001" +
    "\001\000\004\141\262\001\001\000\014\003\261\010\033" +
    "\011\030\016\032\027\043\001\001\000\002\001\001\000" +
    "\006\020\264\142\105\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\003\271\010\033\011\030\016\032\027" +
    "\043\001\001\000\002\001\001\000\014\003\270\010\033" +
    "\011\030\016\032\027\043\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\003\273\010\033\011\030\016\032" +
    "\027\043\001\001\000\002\001\001\000\004\136\320\001" +
    "\001\000\004\055\314\001\001\000\004\025\305\001\001" +
    "\000\004\057\300\001\001\000\014\003\304\010\033\011" +
    "\030\016\032\027\043\001\001\000\004\056\302\001\001" +
    "\000\014\003\303\010\033\011\030\016\032\027\043\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\026\307\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\054\316" +
    "\001\001\000\014\003\315\010\033\011\030\016\032\027" +
    "\043\001\001\000\002\001\001\000\014\003\317\010\033" +
    "\011\030\016\032\027\043\001\001\000\002\001\001\000" +
    "\006\020\321\142\105\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\003\324\010\033\011\030\016\032\027" +
    "\043\001\001\000\002\001\001\000\004\140\326\001\001" +
    "\000\006\020\327\142\105\001\001\000\002\001\001\000" +
    "\004\063\331\001\001\000\014\003\335\010\033\011\030" +
    "\016\032\027\043\001\001\000\004\062\333\001\001\000" +
    "\014\003\334\010\033\011\030\016\032\027\043\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\061\337\001" +
    "\001\000\014\003\343\010\033\011\030\016\032\027\043" +
    "\001\001\000\004\060\341\001\001\000\014\003\342\010" +
    "\033\011\030\016\032\027\043\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\126\346\127\345\001\001\000" +
    "\014\003\351\010\033\011\030\016\032\027\043\001\001" +
    "\000\002\001\001\000\014\003\350\010\033\011\030\016" +
    "\032\027\043\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\104\354\105\353\001\001\000\014\003\357\010" +
    "\033\011\030\016\032\027\043\001\001\000\002\001\001" +
    "\000\014\003\356\010\033\011\030\016\032\027\043\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\130\361" +
    "\131\362\001\001\000\002\001\001\000\014\003\363\010" +
    "\033\011\030\016\032\027\043\001\001\000\002\001\001" +
    "\000\014\003\365\010\033\011\030\016\032\027\043\001" +
    "\001\000\002\001\001\000\014\003\372\010\033\011\030" +
    "\016\032\027\043\001\001\000\002\001\001\000\014\003" +
    "\371\010\033\011\030\016\032\027\043\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\003\377\010\033\011" +
    "\030\016\032\027\043\001\001\000\002\001\001\000\014" +
    "\003\376\010\033\011\030\016\032\027\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\u010e\134\241" +
    "\001\001\000\006\005\u0102\134\241\001\001\000\006\106" +
    "\u010a\107\u0109\001\001\000\006\110\u0105\111\u0104\001\001" +
    "\000\014\003\u0108\010\033\011\030\016\032\027\043\001" +
    "\001\000\002\001\001\000\014\003\u0107\010\033\011\030" +
    "\016\032\027\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\003\u010d\010\033\011\030\016\032\027\043" +
    "\001\001\000\002\001\001\000\014\003\u010c\010\033\011" +
    "\030\016\032\027\043\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\116\u0116\117\u0115\001\001\000\006\120" +
    "\u0111\121\u0110\001\001\000\014\003\u0114\010\033\011\030" +
    "\016\032\027\043\001\001\000\002\001\001\000\014\003" +
    "\u0113\010\033\011\030\016\032\027\043\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\003\u0119\010\033\011" +
    "\030\016\032\027\043\001\001\000\002\001\001\000\014" +
    "\003\u0118\010\033\011\030\016\032\027\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\003\u011e\010\033" +
    "\011\030\016\032\027\043\001\001\000\002\001\001\000" +
    "\014\003\u011d\010\033\011\030\016\032\027\043\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\041\u0120\001" +
    "\001\000\004\014\u0121\001\001\000\002\001\001\000\006" +
    "\046\u0138\050\u0137\001\001\000\004\047\u0126\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\u0128\001\001" +
    "\000\004\051\u012a\001\001\000\004\014\u0129\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\015\u012c\027\u012e" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\053" +
    "\u012f\001\001\000\002\001\001\000\006\015\u0131\027\u012e" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\052" +
    "\u0134\001\001\000\014\003\u0135\010\033\011\030\016\032" +
    "\027\043\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\u013a\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\u013b\001\001\000\002\001\001\000\006\005" +
    "\u014a\134\241\001\001\000\006\005\u013e\134\241\001\001" +
    "\000\006\112\u0146\113\u0145\001\001\000\006\114\u0140\115" +
    "\u0141\001\001\000\002\001\001\000\014\003\u0142\010\033" +
    "\011\030\016\032\027\043\001\001\000\002\001\001\000" +
    "\014\003\u0144\010\033\011\030\016\032\027\043\001\001" +
    "\000\002\001\001\000\014\003\u0149\010\033\011\030\016" +
    "\032\027\043\001\001\000\002\001\001\000\014\003\u0148" +
    "\010\033\011\030\016\032\027\043\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\122\u0152\123\u0151\001\001" +
    "\000\006\124\u014d\125\u014c\001\001\000\014\003\u0150\010" +
    "\033\011\030\016\032\027\043\001\001\000\002\001\001" +
    "\000\014\003\u014f\010\033\011\030\016\032\027\043\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\003\u0155" +
    "\010\033\011\030\016\032\027\043\001\001\000\002\001" +
    "\001\000\014\003\u0154\010\033\011\030\016\032\027\043" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\003\u0158\010\033\011\030\016\032\027\043" +
    "\001\001\000\002\001\001\000\014\003\u015a\010\033\011" +
    "\030\016\032\027\043\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\005\u015d\134\241\001\001\000\002\001" +
    "\001\000\012\031\u015f\032\070\033\062\034\063\001\001" +
    "\000\002\001\001\000\012\031\u0161\032\070\033\062\034" +
    "\063\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\133\u0164\001\001\000\004\006\u0165\001\001\000\002\001" +
    "\001\000\014\003\u0167\010\033\011\030\016\032\027\043" +
    "\001\001\000\002\001\001\000\004\043\u0169\001\001\000" +
    "\004\014\u016a\001\001\000\002\001\001\000\014\003\u016c" +
    "\010\033\011\030\016\032\027\043\001\001\000\002\001" +
    "\001\000\004\045\u016e\001\001\000\004\014\u016f\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintaxPrueba$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintaxPrueba$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintaxPrueba$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private String ambito;
    private Symbol s;
    public ArbolSintactico arbolSintactico;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    private void reportarError(String codigo, String encontrado){
        this.s = cur_token;
        FrmPrincipal.errores.agregarErrorSintactico(codigo, s.left + 1, sym.terminalNames[s.sym], encontrado);
    }

    public void report_fatal_error(String message, Object info){
        System.out.println(message + " " + sym.terminalNames[((Symbol) info).sym]);
    }

    public SintaxPrueba(Lexer lexer){
        super(lexer);
    }

    private void ponerValor(LlaveTabla identificador, Object valor){
        FrmPrincipal.tablaSimbolos.agregarValor(identificador, valor);
    }

    private Object getValor(LlaveTabla identificador){
        return FrmPrincipal.tablaSimbolos.getValor(identificador);
    }

    private void ponerTipoDato(LlaveTabla identificador, String tipo){
        FrmPrincipal.tablaSimbolos.agregarTipo(identificador, tipo);
    }

    private void ponerAmbito(LlaveTabla identificador){
        FrmPrincipal.tablaSimbolos.agregarAmbito(identificador, ambito);
    }

    private void agregarFuncion(LlaveTabla id){
        FrmPrincipal.tablaSimbolos.quitarDeTabla(id);
        FrmPrincipal.funciones.agregarFuncion(id.id);
    }

    private void agregarParametro(LlaveTabla parametro){
        FrmPrincipal.funciones.agregarParametro(ambito, parametro);
    }

    private void agregarHijos(Object... hijos){
        arbolSintactico.agregarHijos(hijos);
    }

    private void agregarHijo(Object hijo){
        arbolSintactico.agregarHijo(hijo);
    }

    private void agregarHijo(Object hijo, boolean moverse){
        arbolSintactico.agregarHijo(hijo, moverse);
    }

    private void retroceder(){
        arbolSintactico.retroceder();
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintaxPrueba$actions {
  private final SintaxPrueba parser;

  /** Constructor */
  CUP$SintaxPrueba$actions(SintaxPrueba parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintaxPrueba$do_action_part00000000(
    int                        CUP$SintaxPrueba$act_num,
    java_cup.runtime.lr_parser CUP$SintaxPrueba$parser,
    java.util.Stack            CUP$SintaxPrueba$stack,
    int                        CUP$SintaxPrueba$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintaxPrueba$result;

      /* select the action based on the action number */
      switch (CUP$SintaxPrueba$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		RESULT = start_val;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintaxPrueba$parser.done_parsing();
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		LlaveTabla i = (LlaveTabla)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;

            arbolSintactico=new ArbolSintactico("inicio"); 
            ambito = i.id;
            ponerAmbito(i);
            agregarFuncion(i);
        
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$0",28, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)).right;
		LlaveTabla i = (LlaveTabla)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)).value;

            agregarHijo("tiempo_cada", true);
        
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$1",29, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$2 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-8)).right;
		LlaveTabla i = (LlaveTabla)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-8)).value;

            agregarHijo("gramaticas", true);
        
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$2",30, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$3 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-11)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-11)).right;
		LlaveTabla i = (LlaveTabla)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-11)).value;
agregarHijo("inicio_fin", true);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$3",31, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // inicio ::= INICIO IDENTIFICADOR NT$0 LLAVE_ABIERTA COMIENZO PARENTESIS_ABIERTO NT$1 tiempo_cada PARENTESIS_CERRADO LLAVE_ABIERTA NT$2 gramaticas LLAVE_CERRADA NT$3 inicio_fin 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-13)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-13)).right;
		LlaveTabla i = (LlaveTabla)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-13)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-14)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$4 ::= 
            {
              Object RESULT =null;

            arbolSintactico=new ArbolSintactico("inicio");
            agregarHijo("error");
            agregarHijo("gramaticas", true);
            reportarError("ES1", null);
            ambito="rutina_principal";
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$4",32, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$5 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
agregarHijo("inicio_fin", true);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$5",33, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // inicio ::= INICIO error NT$4 gramaticas LLAVE_CERRADA NT$5 inicio_fin 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$6 ::= 
            {
              Object RESULT =null;

            arbolSintactico=new ArbolSintactico("inicio");
            agregarHijo("error");
            agregarHijo("gramaticas", true);
            reportarError("ES1", null);
            ambito = "rutina_principal";
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$6",34, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$7 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
agregarHijo("inicio_fin", true);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$7",35, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // inicio ::= error NT$6 gramaticas LLAVE_CERRADA NT$7 inicio_fin 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // inicio_fin ::= LLAVE_CERRADA FIN 
            {
              Object RESULT =null;
		
                    System.out.println("ANALISIS TERMINADO");
                    retroceder();
                
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("inicio_fin",10, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$8 ::= 
            {
              Object RESULT =null;
reportarError("ES1", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$8",36, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // inicio_fin ::= error NT$8 FIN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		
                    System.out.println("ANALISIS TERMINADO");
                    retroceder();
                
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("inicio_fin",10, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$9 ::= 
            {
              Object RESULT =null;

                    agregarHijo("funcion", true);
                
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$9",37, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // inicio_fin ::= FUNCION NT$9 funcion inicio_fin 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		retroceder();
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("inicio_fin",10, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$10 ::= 
            {
              Object RESULT =null;

                    reportarError("ES1", null);
                    agregarHijo("funcion", true);
                
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$10",38, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // inicio_fin ::= error NT$10 funcion inicio_fin 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		retroceder();
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("inicio_fin",10, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$11 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		LlaveTabla i = (LlaveTabla)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;

                                agregarFuncion(i);
                                ambito = i.id;
                            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$11",39, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$12 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-5)).right;
		LlaveTabla i = (LlaveTabla)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-5)).value;

                agregarHijo("gramaticas", true);
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$12",40, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // funcion ::= IDENTIFICADOR NT$11 PARENTESIS_ABIERTO parametros PARENTESIS_CERRADO LLAVE_ABIERTA NT$12 gramaticas LLAVE_CERRADA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-8)).right;
		LlaveTabla i = (LlaveTabla)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-8)).value;
		retroceder();
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("funcion",9, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-8)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$13 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		LlaveTabla i = (LlaveTabla)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
agregarParametro(i);retroceder();
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$13",41, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // parametros ::= declaracion_inicio NT$13 COMA parametros 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).right;
		LlaveTabla i = (LlaveTabla)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("parametros",11, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // parametros ::= declaracion_inicio 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		LlaveTabla i = (LlaveTabla)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		agregarParametro(i);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("parametros",11, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // parametros ::= 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("parametros",11, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$14 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).right;
		LlaveTabla i = (LlaveTabla)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;

                agregarHijo("incdec", true);
                agregarHijos(i, "INC", "PUNTO_COMA");
                retroceder();
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$14",42, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // gramaticas ::= IDENTIFICADOR INC PUNTO_COMA NT$14 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)).right;
		LlaveTabla i = (LlaveTabla)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$15 ::= 
            {
              Object RESULT =null;

                reportarError("ES7", null);
                agregarHijo("incdec", true);
                agregarHijos("IDENTIFICADOR", "INC", "error");
                retroceder();
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$15",43, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // gramaticas ::= IDENTIFICADOR INC NT$15 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NT$16 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).right;
		LlaveTabla i = (LlaveTabla)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;

                agregarHijo("incdec", true);
                agregarHijos(i, "DEC", "PUNTO_COMA");
                retroceder();
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$16",44, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // gramaticas ::= IDENTIFICADOR DEC PUNTO_COMA NT$16 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)).right;
		LlaveTabla i = (LlaveTabla)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$17 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).right;
		LlaveTabla i = (LlaveTabla)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

                agregarHijo("incdec", true);
                reportarError("ES7", null);
                agregarHijos(i, "DEC", "error");
                retroceder();
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$17",45, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // gramaticas ::= IDENTIFICADOR DEC NT$17 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).right;
		LlaveTabla i = (LlaveTabla)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NT$18 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).right;
		LlaveTabla i = (LlaveTabla)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

                agregarHijo("incdec", true);
                agregarHijos("INC", i, "PUNTO_COMA");
                retroceder();
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$18",46, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // gramaticas ::= INC IDENTIFICADOR PUNTO_COMA NT$18 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).right;
		LlaveTabla i = (LlaveTabla)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NT$19 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		LlaveTabla i = (LlaveTabla)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;

                reportarError("ES7", null);
                agregarHijo("incdec", true);
                agregarHijos("INC", i, "error");
                retroceder();
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$19",47, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // gramaticas ::= INC IDENTIFICADOR NT$19 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).right;
		LlaveTabla i = (LlaveTabla)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$20 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).right;
		LlaveTabla i = (LlaveTabla)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

                agregarHijo("incdec", true);
                agregarHijos("DEC", i, "PUNTO_COMA");
                retroceder();
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$20",48, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // gramaticas ::= DEC IDENTIFICADOR PUNTO_COMA NT$20 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).right;
		LlaveTabla i = (LlaveTabla)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NT$21 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		LlaveTabla i = (LlaveTabla)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;

                agregarHijo("incdec", true);
                reportarError("ES7", null);
                agregarHijos("DEC", i, "error");
                retroceder();
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$21",49, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // gramaticas ::= DEC IDENTIFICADOR NT$21 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).right;
		LlaveTabla i = (LlaveTabla)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NT$22 ::= 
            {
              Object RESULT =null;
retroceder();
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$22",50, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // gramaticas ::= declaracion_inicio NT$22 PUNTO_COMA gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NT$23 ::= 
            {
              Object RESULT =null;
reportarError("ES7", null); retroceder();
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$23",51, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // gramaticas ::= declaracion_inicio NT$23 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NT$24 ::= 
            {
              Object RESULT =null;
retroceder();
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$24",52, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // gramaticas ::= declaracion_inicio declaracion_valor NT$24 PUNTO_COMA gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$24
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // NT$25 ::= 
            {
              Object RESULT =null;

                reportarError("ES7", null);
                retroceder();
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$25",53, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // gramaticas ::= declaracion_inicio declaracion_valor NT$25 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$25
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // NT$26 ::= 
            {
              Object RESULT =null;
retroceder();
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$26",54, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // gramaticas ::= asignacion NT$26 PUNTO_COMA gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$26
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // NT$27 ::= 
            {
              Object RESULT =null;
reportarError("ES7", null); retroceder();
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$27",55, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // gramaticas ::= asignacion NT$27 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$27
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // NT$28 ::= 
            {
              Object RESULT =null;
agregarHijo("condicion", true);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$28",56, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // NT$29 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
retroceder();
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$29",57, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // gramaticas ::= CONDICION NT$28 condicion NT$29 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$29
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NT$30 ::= 
            {
              Object RESULT =null;
retroceder();
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$30",58, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // gramaticas ::= ventilar NT$30 PUNTO_COMA gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$30
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // NT$31 ::= 
            {
              Object RESULT =null;
reportarError("ES7", null);retroceder();
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$31",59, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // gramaticas ::= ventilar NT$31 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$31
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // NT$32 ::= 
            {
              Object RESULT =null;
retroceder();
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$32",60, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // gramaticas ::= admitir NT$32 PUNTO_COMA gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$32
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // NT$33 ::= 
            {
              Object RESULT =null;
reportarError("ES7", null); retroceder();
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$33",61, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // gramaticas ::= admitir NT$33 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$33
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // NT$34 ::= 
            {
              Object RESULT =null;
agregarHijo("SALIR");
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$34",62, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // gramaticas ::= SALIR NT$34 PUNTO_COMA gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$34
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // NT$35 ::= 
            {
              Object RESULT =null;
reportarError("ES7", null); agregarHijo("SALIR");
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$35",63, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // gramaticas ::= SALIR NT$35 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$35
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // NT$36 ::= 
            {
              Object RESULT =null;

                agregarHijo("accion", true);
                agregarHijos("APAGAR", "LUCES");
                retroceder();
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$36",64, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // gramaticas ::= APAGAR LUCES NT$36 PUNTO_COMA gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$36
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // NT$37 ::= 
            {
              Object RESULT =null;

                reportarError("ES7", null);
                agregarHijo("accion", true);
                agregarHijos("APAGAR", "LUCES");
                retroceder();
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$37",65, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // gramaticas ::= APAGAR LUCES NT$37 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$37
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // NT$38 ::= 
            {
              Object RESULT =null;

                agregarHijo("accion", true);
                agregarHijos("ENCENDER", "LUCES");
                retroceder();
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$38",66, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // gramaticas ::= ENCENDER LUCES NT$38 PUNTO_COMA gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$38
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // NT$39 ::= 
            {
              Object RESULT =null;

                reportarError("ES7", null);
                agregarHijo("accion", true);
                agregarHijos("ENCENDER", "LUCES");
                retroceder();
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$39",67, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // gramaticas ::= ENCENDER LUCES NT$39 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$39
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // NT$40 ::= 
            {
              Object RESULT =null;

                agregarHijo("accion", true);
                agregarHijos("ABRIR", "PUERTAS");
                retroceder();
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$40",68, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // gramaticas ::= ABRIR PUERTAS tiempo_por NT$40 PUNTO_COMA gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$40
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // NT$41 ::= 
            {
              Object RESULT =null;

                reportarError("ES7", null);
                agregarHijo("accion", true);
                agregarHijos("ABRIR", "PUERTAS");
                retroceder();
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$41",69, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // gramaticas ::= ABRIR PUERTAS tiempo_por NT$41 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$41
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // NT$42 ::= 
            {
              Object RESULT =null;

                agregarHijo("accion", true);
                agregarHijos("ABRIR", "PUERTAS", "MANTENER");
                retroceder();
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$42",70, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // gramaticas ::= ABRIR PUERTAS MANTENER NT$42 PUNTO_COMA gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$42
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // NT$43 ::= 
            {
              Object RESULT =null;

                reportarError("ES7", null);
                agregarHijo("accion", true);
                agregarHijos("ABRIR", "PUERTAS", "MANTENER");
                retroceder();
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$43",71, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // gramaticas ::= ABRIR PUERTAS MANTENER NT$43 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$43
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // NT$44 ::= 
            {
              Object RESULT =null;

                agregarHijo("accion", true);
                agregarHijos("CERRAR", "PUERTAS");
                retroceder();
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$44",72, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // gramaticas ::= CERRAR PUERTAS tiempo_por NT$44 PUNTO_COMA gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$44
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // NT$45 ::= 
            {
              Object RESULT =null;

                reportarError("ES7", null);
                agregarHijo("accion", true);
                agregarHijos("CERRAR", "PUERTAS");
                retroceder();
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$45",73, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // gramaticas ::= CERRAR PUERTAS tiempo_por NT$45 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$45
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // NT$46 ::= 
            {
              Object RESULT =null;

                agregarHijo("accion", true);
                agregarHijos("CERRAR", "PUERTAS", "MANTENER");
                retroceder();
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$46",74, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // gramaticas ::= CERRAR PUERTAS MANTENER NT$46 PUNTO_COMA gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$46
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // NT$47 ::= 
            {
              Object RESULT =null;

                reportarError("ES7", null);
                agregarHijo("accion", true);
                agregarHijos("CERRAR", "PUERTAS", "MANTENER");
                retroceder();
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$47",75, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // gramaticas ::= CERRAR PUERTAS MANTENER NT$47 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$47
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // NT$48 ::= 
            {
              Object RESULT =null;

                agregarHijo("accion", true);
                agregarHijos("ABRIR", "VENTANAS");
                retroceder();
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$48",76, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // gramaticas ::= ABRIR VENTANAS tiempo_por NT$48 PUNTO_COMA gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$48
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // NT$49 ::= 
            {
              Object RESULT =null;

                reportarError("ES7", null);
                agregarHijo("accion", true);
                agregarHijos("ABRIR", "VENTANAS");
                retroceder();
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$49",77, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // gramaticas ::= ABRIR VENTANAS tiempo_por NT$49 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$49
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // NT$50 ::= 
            {
              Object RESULT =null;

                agregarHijo("accion", true);
                agregarHijos("ABRIR", "VENTANAS", "MANTENER");
                retroceder();
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$50",78, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // gramaticas ::= ABRIR VENTANAS MANTENER NT$50 PUNTO_COMA gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$50
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // NT$51 ::= 
            {
              Object RESULT =null;

                reportarError("ES7", null);
                agregarHijo("accion", true);
                agregarHijos("ABRIR", "VENTANAS", "MANTENER");
                retroceder();
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$51",79, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // gramaticas ::= ABRIR VENTANAS MANTENER NT$51 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$51
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // NT$52 ::= 
            {
              Object RESULT =null;

                agregarHijo("accion", true);
                agregarHijos("CERRAR", "VENTANAS");
                retroceder();
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$52",80, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // gramaticas ::= CERRAR VENTANAS tiempo_por NT$52 PUNTO_COMA gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$52
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // NT$53 ::= 
            {
              Object RESULT =null;

                reportarError("ES7", null);
                agregarHijo("accion", true);
                agregarHijos("CERRAR", "VENTANAS");
                retroceder();
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$53",81, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // gramaticas ::= CERRAR VENTANAS tiempo_por NT$53 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$53
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // NT$54 ::= 
            {
              Object RESULT =null;

                agregarHijo("accion", true);
                agregarHijos("CERRAR", "VENTANAS", "MANTENER");
                retroceder();
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$54",82, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // gramaticas ::= CERRAR VENTANAS MANTENER NT$54 PUNTO_COMA gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$54
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // NT$55 ::= 
            {
              Object RESULT =null;

                reportarError("ES7", null);
                agregarHijo("accion", true);
                agregarHijos("CERRAR", "VENTANAS", "MANTENER");
                retroceder();
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$55",83, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // gramaticas ::= CERRAR VENTANAS MANTENER NT$55 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$55
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // NT$56 ::= 
            {
              Object RESULT =null;

                agregarHijo("accion", true);
                agregarHijo("SANITIZAR");
                retroceder();
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$56",84, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // gramaticas ::= SANITIZAR tiempo_por NT$56 PUNTO_COMA gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$56
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // NT$57 ::= 
            {
              Object RESULT =null;

                reportarError("ES7", null);
                agregarHijo("accion", true);
                agregarHijo("SANITIZAR");
                retroceder();
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$57",85, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // gramaticas ::= SANITIZAR tiempo_por NT$57 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$57
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // NT$58 ::= 
            {
              Object RESULT =null;

                agregarHijo("accion", true);
                agregarHijo("DISPENSAR");
                retroceder();
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$58",86, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // gramaticas ::= DISPENSAR tiempo_por NT$58 PUNTO_COMA gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$58
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // NT$59 ::= 
            {
              Object RESULT =null;

                reportarError("ES7", null);
                agregarHijo("accion", true);
                agregarHijo("DISPENSAR");
                retroceder();
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$59",87, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // gramaticas ::= DISPENSAR tiempo_por NT$59 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$59
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // NT$60 ::= 
            {
              Object RESULT =null;
reportarError("ES2", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$60",88, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // gramaticas ::= error NT$60 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$60
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // gramaticas ::= 
            {
              Object RESULT =null;
		retroceder();
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // NT$61 ::= 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;

                agregarHijos("CADA", n); 
                agregarHijo("unidad_tiempo", true);
                
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$61",89, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // tiempo_cada ::= CADA NUMERO NT$61 unidad_tiempo 
            {
              Object RESULT =null;
              // propagate RESULT from NT$61
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		retroceder();
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("tiempo_cada",2, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // tiempo_cada ::= error 
            {
              Object RESULT =null;
		agregarHijo("error"); retroceder();
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("tiempo_cada",2, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // NT$62 ::= 
            {
              Object RESULT =null;
agregarHijo("tiempo_por", true);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$62",90, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // NT$63 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
agregarHijo("POR");
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$63",91, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // tiempo_por ::= NT$62 POR NT$63 op_aritmetica unidad_tiempo 
            {
              Object RESULT =null;
              // propagate RESULT from NT$63
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		retroceder();
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("tiempo_por",3, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // unidad_tiempo ::= SEG 
            {
              Object RESULT =null;
		agregarHijo("SEG");
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("unidad_tiempo",4, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // unidad_tiempo ::= MIN 
            {
              Object RESULT =null;
		agregarHijo("MIN");
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("unidad_tiempo",4, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // unidad_tiempo ::= HR 
            {
              Object RESULT =null;
		agregarHijo("HR");
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("unidad_tiempo",4, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // unidad_tiempo ::= error 
            {
              Object RESULT =null;
		
                reportarError("ES3", null); 
                agregarHijo("error");
                
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("unidad_tiempo",4, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // estado ::= LUCES 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("estado",8, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // estado ::= PUERTAS 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("estado",8, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // estado ::= VENTANAS 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("estado",8, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // NT$64 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).right;
		LlaveTabla i = (LlaveTabla)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

                agregarHijo("asignacion", true);
                agregarHijos(i, "ASIGNACION");
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$64",92, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // asignacion ::= IDENTIFICADOR ASIGNACION NT$64 op_aritmetica 
            {
              Object RESULT =null;
              // propagate RESULT from NT$64
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).right;
		LlaveTabla i = (LlaveTabla)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("asignacion",12, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // NT$65 ::= 
            {
              Object RESULT =null;

                System.out.println("Error de asignacion");
                agregarHijo("asignacion", true);
                agregarHijo("error");
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$65",93, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // NT$66 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

                agregarHijos(i, "ASIGNACION");
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$66",94, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // asignacion ::= error NT$65 ASIGNACION NT$66 op_aritmetica 
            {
              Object RESULT =null;
              // propagate RESULT from NT$66
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("asignacion",12, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // declaracion_inicio ::= IDENTIFICADOR DECLARAR declaracion_tipo_dato 
            {
              LlaveTabla RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).right;
		LlaveTabla i = (LlaveTabla)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		String td = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		
                        ponerAmbito(i);
                        ponerTipoDato(i,td);
                        agregarHijo("declaracion", true);
                        agregarHijo(i);
                        RESULT=i;
                    
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("declaracion_inicio",21, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // declaracion_valor ::= ASIGNACION OP_BOOLEANO 
            {
              Object RESULT =null;
		int obleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int obright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Boolean ob = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		agregarHijos("ASIGNACION", ob);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("declaracion_valor",5, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // NT$67 ::= 
            {
              Object RESULT =null;
agregarHijo("ASIGNACION");
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$67",95, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // declaracion_valor ::= ASIGNACION NT$67 op_aritmetica 
            {
              Object RESULT =null;
              // propagate RESULT from NT$67
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("declaracion_valor",5, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // declaracion_tipo_dato ::= COMO tipo_dato 
            {
              String RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		String td = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT = td;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("declaracion_tipo_dato",19, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // tipo_dato ::= ENTERO 
            {
              String RESULT =null;
		RESULT = "entero";
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("tipo_dato",20, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // tipo_dato ::= LOGICO 
            {
              String RESULT =null;
		RESULT = "logico";
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("tipo_dato",20, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // tipo_dato ::= error 
            {
              String RESULT =null;
		reportarError("ES4", null); RESULT = "error";
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("tipo_dato",20, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // NT$68 ::= 
            {
              Object RESULT =null;
agregarHijo("op_aritmetica", true);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$68",96, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // op_aritmetica ::= NT$68 op2 op1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$68
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		retroceder();
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op_aritmetica",14, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // NT$69 ::= 
            {
              Object RESULT =null;
agregarHijo("op1", true);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$69",97, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // NT$70 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
agregarHijo("AR_SUMA");
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$70",98, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // op1 ::= NT$69 AR_SUMA NT$70 op2 op1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$70
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		retroceder();
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op1",15, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // NT$71 ::= 
            {
              Object RESULT =null;
agregarHijo("op1", true);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$71",99, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // NT$72 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
agregarHijo("AR_RESTA");
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$72",100, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // op1 ::= NT$71 AR_RESTA NT$72 op2 op1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$72
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		retroceder();
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op1",15, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // op1 ::= 
            {
              Object RESULT =null;
		retroceder();
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op1",15, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // NT$73 ::= 
            {
              Object RESULT =null;
agregarHijo("op2", true);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$73",101, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // op2 ::= NT$73 op4 op3 
            {
              Object RESULT =null;
              // propagate RESULT from NT$73
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		retroceder();
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op2",16, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // NT$74 ::= 
            {
              Object RESULT =null;
agregarHijo("op3", true);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$74",102, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // NT$75 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
agregarHijo("AR_MULTIPLICACION");
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$75",103, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // op3 ::= NT$74 AR_MULTIPLICACION NT$75 op4 op3 
            {
              Object RESULT =null;
              // propagate RESULT from NT$75
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		retroceder();
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op3",17, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // NT$76 ::= 
            {
              Object RESULT =null;
agregarHijo("op3", true);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$76",104, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // NT$77 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
agregarHijo("AR_DIVISION");
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$77",105, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // op3 ::= NT$76 AR_DIVISION NT$77 op4 op3 
            {
              Object RESULT =null;
              // propagate RESULT from NT$77
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		retroceder();
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op3",17, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // op3 ::= 
            {
              Object RESULT =null;
		retroceder();
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op3",17, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // NT$78 ::= 
            {
              Object RESULT =null;
agregarHijo("op4", true);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$78",106, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // op4 ::= NT$78 PARENTESIS_ABIERTO op_aritmetica PARENTESIS_CERRADO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$78
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).value;
		retroceder();
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op4",18, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // NT$79 ::= 
            {
              Object RESULT =null;
agregarHijo("op4", true);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$79",107, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // op4 ::= NT$79 valores 
            {
              Object RESULT =null;
              // propagate RESULT from NT$79
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		retroceder();
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op4",18, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // NT$80 ::= 
            {
              Object RESULT =null;
agregarHijo("op4", true);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$80",108, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // NT$81 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
agregarHijos("AR_RESTA");
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$81",109, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // op4 ::= NT$80 AR_RESTA NT$81 valores 
            {
              Object RESULT =null;
              // propagate RESULT from NT$81
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		retroceder();
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op4",18, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // op4 ::= OBTENER TEMPERATURA 
            {
              Object RESULT =null;
		agregarHijo("sistema"); retroceder();
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op4",18, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // op4 ::= OBTENER PERSONAS 
            {
              Object RESULT =null;
		agregarHijo("sistema"); retroceder();
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op4",18, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // op4 ::= error 
            {
              Object RESULT =null;
		reportarError("ES6", null); agregarHijo("error"); retroceder();
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op4",18, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // valores ::= NUMERO 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		agregarHijo(n);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("valores",13, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // valores ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		LlaveTabla i = (LlaveTabla)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		agregarHijo(i);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("valores",13, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // condicion ::= PARENTESIS_ABIERTO sentencia_booleana PARENTESIS_CERRADO LLAVE_ABIERTA gramaticas LLAVE_CERRADA 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("condicion",22, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // condicion ::= PARENTESIS_ABIERTO sentencia_booleana PARENTESIS_CERRADO LLAVE_ABIERTA gramaticas LLAVE_CERRADA sino 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("condicion",22, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // sentencia_booleana ::= OP_BOOLEANO 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("sentencia_booleana",23, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // sentencia_booleana ::= OP_BOOLEANO LOGICO_AND sentencia_booleana 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("sentencia_booleana",23, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // sentencia_booleana ::= OP_BOOLEANO LOGICO_OR sentencia_booleana 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("sentencia_booleana",23, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // sentencia_booleana ::= IDENTIFICADOR 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("sentencia_booleana",23, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // sentencia_booleana ::= IDENTIFICADOR LOGICO_AND sentencia_booleana 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("sentencia_booleana",23, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // sentencia_booleana ::= IDENTIFICADOR LOGICO_OR sentencia_booleana 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("sentencia_booleana",23, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // sentencia_booleana ::= ESTADO estado 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("sentencia_booleana",23, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // sentencia_booleana ::= ESTADO estado LOGICO_AND sentencia_booleana 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("sentencia_booleana",23, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // sentencia_booleana ::= ESTADO estado LOGICO_OR sentencia_booleana 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("sentencia_booleana",23, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // sentencia_booleana ::= negacion_identificador 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("sentencia_booleana",23, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // sentencia_booleana ::= negacion_identificador LOGICO_AND sentencia_booleana 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("sentencia_booleana",23, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // sentencia_booleana ::= negacion_identificador LOGICO_OR sentencia_booleana 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("sentencia_booleana",23, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // sentencia_booleana ::= negacion_booleana 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("sentencia_booleana",23, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // sentencia_booleana ::= negacion_booleana LOGICO_AND sentencia_booleana 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("sentencia_booleana",23, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // sentencia_booleana ::= negacion_booleana LOGICO_OR sentencia_booleana 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("sentencia_booleana",23, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // sentencia_booleana ::= relacional_booleana 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("sentencia_booleana",23, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // sentencia_booleana ::= relacional_booleana LOGICO_AND sentencia_booleana 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("sentencia_booleana",23, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // sentencia_booleana ::= relacional_booleana LOGICO_OR sentencia_booleana 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("sentencia_booleana",23, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // sentencia_booleana ::= error 
            {
              Boolean RESULT =null;
		reportarError("ES5", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("sentencia_booleana",23, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // negacion_identificador ::= NEGACION IDENTIFICADOR 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("negacion_identificador",24, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // negacion_booleana ::= NEGACION PARENTESIS_ABIERTO sentencia_booleana PARENTESIS_CERRADO 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("negacion_booleana",25, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // relacional_booleana ::= IDENTIFICADOR REL_MENOR op_aritmetica 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("relacional_booleana",26, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // relacional_booleana ::= IDENTIFICADOR REL_MAYOR op_aritmetica 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("relacional_booleana",26, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // relacional_booleana ::= IDENTIFICADOR REL_MENOR_IGUAL op_aritmetica 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("relacional_booleana",26, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // relacional_booleana ::= IDENTIFICADOR REL_MAYOR_IGUAL op_aritmetica 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("relacional_booleana",26, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // relacional_booleana ::= IDENTIFICADOR REL_DIFERENTE op_aritmetica 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("relacional_booleana",26, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // relacional_booleana ::= IDENTIFICADOR REL_IGUAL op_aritmetica 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("relacional_booleana",26, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // sino ::= SINO CONDICION condicion 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("sino",27, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // sino ::= SINO LLAVE_ABIERTA gramaticas LLAVE_CERRADA 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("sino",27, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // NT$82 ::= 
            {
              Object RESULT =null;
agregarHijo("ventilar", true);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$82",110, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // ventilar ::= VENTILAR NT$82 PARENTESIS_ABIERTO tiempo_por COMA sentencia_booleana COMA sentencia_booleana PARENTESIS_CERRADO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$82
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-7)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("ventilar",6, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-8)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // NT$83 ::= 
            {
              Object RESULT =null;
agregarHijo("admitir", true);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$83",111, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // admitir ::= ADMITIR NT$83 PARENTESIS_ABIERTO sentencia_booleana COMA tiempo_por COMA sentencia_booleana PARENTESIS_CERRADO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$83
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-7)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("admitir",7, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-8)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintaxPrueba$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintaxPrueba$do_action(
    int                        CUP$SintaxPrueba$act_num,
    java_cup.runtime.lr_parser CUP$SintaxPrueba$parser,
    java.util.Stack            CUP$SintaxPrueba$stack,
    int                        CUP$SintaxPrueba$top)
    throws java.lang.Exception
    {
              return CUP$SintaxPrueba$do_action_part00000000(
                               CUP$SintaxPrueba$act_num,
                               CUP$SintaxPrueba$parser,
                               CUP$SintaxPrueba$stack,
                               CUP$SintaxPrueba$top);
    }
}

}
