
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analisis;

import java_cup.runtime.Symbol;
import codigo.FrmPrincipal;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintaxPrueba extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public SintaxPrueba() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintaxPrueba(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintaxPrueba(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\351\000\002\002\004\000\002\047\002\000\002\002" +
    "\007\000\002\050\002\000\002\002\006\000\002\051\002" +
    "\000\002\052\002\000\002\002\010\000\002\053\002\000" +
    "\002\002\007\000\002\003\007\000\002\054\002\000\002" +
    "\003\010\000\002\055\002\000\002\003\007\000\002\056" +
    "\002\000\002\003\007\000\002\004\006\000\002\057\002" +
    "\000\002\004\006\000\002\016\004\000\002\016\005\000" +
    "\002\016\003\000\002\060\002\000\002\016\005\000\002" +
    "\061\002\000\002\015\012\000\002\062\002\000\002\015" +
    "\012\000\002\063\002\000\002\017\006\000\002\017\003" +
    "\000\002\017\002\000\002\064\002\000\002\005\007\000" +
    "\002\065\002\000\002\005\006\000\002\066\002\000\002" +
    "\005\007\000\002\067\002\000\002\005\006\000\002\070" +
    "\002\000\002\005\007\000\002\071\002\000\002\005\006" +
    "\000\002\072\002\000\002\005\007\000\002\073\002\000" +
    "\002\005\006\000\002\005\005\000\002\074\002\000\002" +
    "\005\005\000\002\075\002\000\002\005\007\000\002\076" +
    "\002\000\002\005\006\000\002\005\005\000\002\077\002" +
    "\000\002\005\005\000\002\005\005\000\002\005\005\000" +
    "\002\005\006\000\002\100\002\000\002\005\006\000\002" +
    "\005\006\000\002\101\002\000\002\005\006\000\002\005" +
    "\007\000\002\102\002\000\002\005\007\000\002\005\007" +
    "\000\002\103\002\000\002\005\007\000\002\005\007\000" +
    "\002\104\002\000\002\005\007\000\002\005\007\000\002" +
    "\105\002\000\002\005\007\000\002\005\006\000\002\106" +
    "\002\000\002\005\006\000\002\005\006\000\002\107\002" +
    "\000\002\005\006\000\002\005\005\000\002\110\002\000" +
    "\002\005\005\000\002\005\004\000\002\005\003\000\002" +
    "\005\004\000\002\005\005\000\002\111\002\000\002\005" +
    "\006\000\002\112\002\000\002\005\007\000\002\113\002" +
    "\000\002\005\007\000\002\114\002\000\002\005\007\000" +
    "\002\115\002\000\002\005\007\000\002\116\002\000\002" +
    "\005\006\000\002\117\002\000\002\005\007\000\002\120" +
    "\002\000\002\005\007\000\002\121\002\000\002\005\007" +
    "\000\002\122\002\000\002\005\010\000\002\123\002\000" +
    "\002\005\010\000\002\124\002\000\002\005\007\000\002" +
    "\005\002\000\002\035\003\000\002\035\003\000\002\035" +
    "\003\000\002\023\004\000\002\023\004\000\002\023\004" +
    "\000\002\023\004\000\002\023\004\000\002\023\004\000" +
    "\002\125\002\000\002\036\007\000\002\126\002\000\002" +
    "\036\007\000\002\036\003\000\002\127\002\000\002\022" +
    "\006\000\002\022\003\000\002\130\002\000\002\131\002" +
    "\000\002\022\007\000\002\022\002\000\002\006\005\000" +
    "\002\132\002\000\002\006\006\000\002\133\002\000\002" +
    "\007\006\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\134\002\000" +
    "\002\020\006\000\002\135\002\000\002\020\006\000\002" +
    "\136\002\000\002\020\005\000\002\137\002\000\002\044" +
    "\006\000\002\140\002\000\002\044\006\000\002\141\002" +
    "\000\002\044\005\000\002\011\004\000\002\042\004\000" +
    "\002\043\003\000\002\043\003\000\002\043\003\000\002" +
    "\142\002\000\002\021\005\000\002\143\002\000\002\144" +
    "\002\000\002\025\007\000\002\145\002\000\002\146\002" +
    "\000\002\025\007\000\002\025\002\000\002\147\002\000" +
    "\002\026\005\000\002\150\002\000\002\027\005\000\002" +
    "\151\002\000\002\027\005\000\002\152\002\000\002\027" +
    "\005\000\002\153\002\000\002\027\005\000\002\154\002" +
    "\000\002\027\005\000\002\155\002\000\002\027\005\000" +
    "\002\027\002\000\002\156\002\000\002\030\005\000\002" +
    "\157\002\000\002\160\002\000\002\031\007\000\002\161" +
    "\002\000\002\162\002\000\002\031\007\000\002\031\002" +
    "\000\002\163\002\000\002\032\005\000\002\164\002\000" +
    "\002\165\002\000\002\033\007\000\002\166\002\000\002" +
    "\167\002\000\002\033\007\000\002\033\002\000\002\034" +
    "\003\000\002\034\004\000\002\034\004\000\002\034\003" +
    "\000\002\024\003\000\002\024\003\000\002\024\004\000" +
    "\002\024\004\000\002\024\003\000\002\024\004\000\002" +
    "\024\005\000\002\045\004\000\002\045\005\000\002\046" +
    "\005\000\002\046\004\000\002\012\012\000\002\013\010" +
    "\000\002\037\004\000\002\170\002\000\002\040\006\000" +
    "\002\171\002\000\002\172\002\000\002\041\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u019b\000\006\003\004\016\005\001\002\000\004\076" +
    "\ufffc\001\002\000\006\003\010\076\011\001\002\000\004" +
    "\002\007\001\002\000\004\002\001\001\002\000\004\070" +
    "\ufff9\001\002\000\010\003\ufffe\005\ufffe\070\000\001\002" +
    "\000\006\003\015\005\017\001\002\000\004\070\014\001" +
    "\002\000\006\003\015\005\017\001\002\000\004\066\ufff6" +
    "\001\002\000\004\002\uffff\001\002\000\010\003\ufff4\021" +
    "\ufff4\066\021\001\002\000\006\003\022\021\023\001\002" +
    "\000\006\003\022\021\023\001\002\000\024\003\uff76\033" +
    "\uff76\042\uff76\055\uff76\060\uff76\066\uff76\074\uff76\075\uff76" +
    "\076\uff76\001\002\000\024\003\102\033\075\042\107\055" +
    "\103\060\111\066\105\074\100\075\077\076\112\001\002" +
    "\000\044\003\ufff2\010\ufff2\014\ufff2\015\ufff2\026\ufff2\027" +
    "\ufff2\036\ufff2\037\ufff2\040\ufff2\044\ufff2\045\ufff2\063\ufff2" +
    "\064\ufff2\067\026\070\ufff2\071\ufff2\076\ufff2\001\002\000" +
    "\042\003\uffef\010\uffef\014\uffef\015\uffef\026\uffef\027\uffef" +
    "\036\uffef\037\uffef\040\uffef\044\uffef\045\uffef\063\uffef\064" +
    "\uffef\070\030\071\uffef\076\uffef\001\002\000\042\003\uffef" +
    "\010\uffef\014\uffef\015\uffef\026\uffef\027\uffef\036\uffef\037" +
    "\uffef\040\uffef\044\uffef\045\uffef\063\uffef\064\uffef\070\030" +
    "\071\uffef\076\uffef\001\002\000\040\003\045\010\051\014" +
    "\037\015\032\026\035\027\033\036\053\037\040\040\041" +
    "\044\052\045\047\063\042\064\044\071\uff8d\076\046\001" +
    "\002\000\040\003\045\010\051\014\037\015\032\026\035" +
    "\027\033\036\053\037\040\040\041\044\052\045\047\063" +
    "\042\064\044\071\uff8d\076\046\001\002\000\004\002\ufff7" +
    "\001\002\000\010\003\u0181\071\uffa8\072\u0182\001\002\000" +
    "\006\030\u0175\031\u0176\001\002\000\004\071\u0155\001\002" +
    "\000\006\030\u0149\031\u014a\001\002\000\042\003\uffc8\010" +
    "\uffc8\014\uffc8\015\uffc8\026\uffc8\027\uffc8\036\uffc8\037\uffc8" +
    "\040\uffc8\044\uffc8\045\uffc8\063\uffc8\064\uffc8\071\uffc8\072" +
    "\u0145\076\uffc8\001\002\000\004\022\217\001\002\000\006" +
    "\003\u0137\041\u0138\001\002\000\004\022\217\001\002\000" +
    "\006\003\u0128\076\u0129\001\002\000\042\003\uffab\010\uffab" +
    "\014\uffab\015\uffab\026\uffab\027\uffab\036\uffab\037\uffab\040" +
    "\uffab\044\uffab\045\uffab\063\uffab\064\uffab\071\uffab\072\u0125" +
    "\076\uffab\001\002\000\006\003\u011a\076\u011b\001\002\000" +
    "\040\003\067\012\071\013\073\017\uff62\020\uff60\022\uff8f" +
    "\030\uff91\031\uff93\041\uff99\063\uffa3\064\uffa1\065\uff68\066" +
    "\uff9b\072\uffa5\076\070\001\002\000\034\003\uff66\017\uff64" +
    "\033\uff66\042\uff66\055\uff66\060\uff66\063\325\064\327\065" +
    "\uff6a\066\uff66\074\uff66\075\uff66\076\uff66\001\002\000\004" +
    "\066\263\001\002\000\044\003\uffcf\010\uffcf\014\uffcf\015" +
    "\uffcf\026\uffcf\027\uffcf\036\uffcf\037\uffcf\040\uffcf\044\uffcf" +
    "\045\uffcf\063\uffcf\064\uffcf\065\305\071\uffcf\072\306\076" +
    "\uffcf\001\002\000\004\066\263\001\002\000\012\003\067" +
    "\012\071\013\073\076\070\001\002\000\006\003\054\041" +
    "\055\001\002\000\004\072\uff95\001\002\000\042\003\uffc3" +
    "\010\uffc3\014\uffc3\015\uffc3\026\uffc3\027\uffc3\036\uffc3\037" +
    "\uffc3\040\uffc3\044\uffc3\045\uffc3\063\uffc3\064\uffc3\071\uffc3" +
    "\072\056\076\uffc3\001\002\000\040\003\045\010\051\014" +
    "\037\015\032\026\035\027\033\036\053\037\040\040\041" +
    "\044\052\045\047\063\042\064\044\071\uff8d\076\046\001" +
    "\002\000\040\003\045\010\051\014\037\015\032\026\035" +
    "\027\033\036\053\037\040\040\041\044\052\045\047\063" +
    "\042\064\044\071\uff8d\076\046\001\002\000\004\071\uffc2" +
    "\001\002\000\004\071\uffc4\001\002\000\004\072\063\001" +
    "\002\000\040\003\045\010\051\014\037\015\032\026\035" +
    "\027\033\036\053\037\040\040\041\044\052\045\047\063" +
    "\042\064\044\071\uff8d\076\046\001\002\000\004\071\uff94" +
    "\001\002\000\042\003\uff89\010\uff89\014\uff89\015\uff89\026" +
    "\uff89\027\uff89\036\uff89\037\uff89\040\uff89\044\uff89\045\uff89" +
    "\063\uff89\064\uff89\071\uff89\072\uff89\076\uff89\001\002\000" +
    "\042\003\uff88\010\uff88\014\uff88\015\uff88\026\uff88\027\uff88" +
    "\036\uff88\037\uff88\040\uff88\044\uff88\045\uff88\063\uff88\064" +
    "\uff88\071\uff88\072\uff88\076\uff88\001\002\000\044\003\uff7f" +
    "\010\uff7f\014\uff7f\015\uff7f\026\uff7f\027\uff7f\036\uff7f\037" +
    "\uff7f\040\uff7f\044\uff7f\045\uff7f\063\uff7f\064\uff7f\066\uff81" +
    "\071\uff7f\072\uff7f\076\uff7f\001\002\000\004\066\uff83\001" +
    "\002\000\004\066\232\001\002\000\042\003\uff87\010\uff87" +
    "\014\uff87\015\uff87\026\uff87\027\uff87\036\uff87\037\uff87\040" +
    "\uff87\044\uff87\045\uff87\063\uff87\064\uff87\071\uff87\072\uff87" +
    "\076\uff87\001\002\000\004\066\074\001\002\000\024\003" +
    "\102\033\075\042\107\055\103\060\111\066\105\074\100" +
    "\075\077\076\112\001\002\000\006\034\230\035\231\001" +
    "\002\000\104\003\uff2f\010\uff2f\014\uff2f\015\uff2f\023\uff2f" +
    "\024\uff2f\025\uff2f\026\uff2f\027\uff2f\036\uff2f\037\uff2f\040" +
    "\uff2f\044\uff2f\045\uff2f\046\uff2f\047\uff2f\050\uff2f\051\uff2f" +
    "\052\uff2f\053\uff2f\054\uff2f\055\uff2f\056\uff2f\057\uff2f\061" +
    "\uff2f\062\uff2f\063\uff2f\064\uff2f\067\uff2f\071\uff2f\072\uff2f" +
    "\073\uff2f\076\uff2f\001\002\000\104\003\uff27\010\uff27\014" +
    "\uff27\015\uff27\023\uff27\024\uff27\025\uff27\026\uff27\027\uff27" +
    "\036\uff27\037\uff27\040\uff27\044\uff27\045\uff27\046\uff27\047" +
    "\uff27\050\uff27\051\uff27\052\uff27\053\uff27\054\uff27\055\uff27" +
    "\056\uff27\057\uff27\061\uff27\062\uff27\063\uff27\064\uff27\067" +
    "\uff27\071\uff27\072\uff27\073\uff27\076\uff27\001\002\000\104" +
    "\003\uff2b\010\uff2b\014\uff2b\015\uff2b\023\uff2b\024\uff2b\025" +
    "\uff2b\026\uff2b\027\uff2b\036\uff2b\037\uff2b\040\uff2b\044\uff2b" +
    "\045\uff2b\046\uff2b\047\uff2b\050\uff2b\051\uff2b\052\uff2b\053" +
    "\uff2b\054\uff2b\055\uff2b\056\uff2b\057\uff2b\061\uff2b\062\uff2b" +
    "\063\uff2b\064\uff2b\067\uff2b\071\uff2b\072\uff2b\073\uff2b\076" +
    "\uff2b\001\002\000\004\073\215\001\002\000\104\003\uff2c" +
    "\010\uff2c\014\uff2c\015\uff2c\023\uff2c\024\uff2c\025\uff2c\026" +
    "\uff2c\027\uff2c\036\uff2c\037\uff2c\040\uff2c\044\uff2c\045\uff2c" +
    "\046\uff2c\047\uff2c\050\uff2c\051\uff2c\052\uff2c\053\uff2c\054" +
    "\uff2c\055\uff2c\056\uff2c\057\uff2c\061\uff2c\062\uff2c\063\uff2c" +
    "\064\uff2c\067\uff2c\071\uff2c\072\uff2c\073\uff2c\076\uff2c\001" +
    "\002\000\016\033\075\042\107\066\105\074\100\075\077" +
    "\076\112\001\002\000\104\003\uff38\010\uff38\014\uff38\015" +
    "\uff38\023\uff38\024\uff38\025\uff38\026\uff38\027\uff38\036\uff38" +
    "\037\uff38\040\uff38\044\uff38\045\uff38\046\uff38\047\uff38\050" +
    "\uff38\051\uff38\052\uff38\053\uff38\054\uff38\055\uff38\056\uff38" +
    "\057\uff38\061\uff38\062\uff38\063\uff38\064\uff38\067\uff38\071" +
    "\uff38\072\uff38\073\uff38\076\uff38\001\002\000\024\003\102" +
    "\033\075\042\107\055\103\060\111\066\105\074\100\075" +
    "\077\076\112\001\002\000\100\003\uff41\010\uff41\014\uff41" +
    "\015\uff41\023\uff41\024\uff41\025\uff41\026\uff41\027\uff41\036" +
    "\uff41\037\uff41\040\uff41\044\uff41\045\uff41\046\uff41\047\uff41" +
    "\050\uff41\051\uff41\052\uff41\053\uff41\054\uff41\055\uff41\061" +
    "\uff41\062\uff41\063\uff41\064\uff41\067\uff41\071\uff41\072\uff41" +
    "\073\uff41\076\uff41\001\002\000\012\003\155\030\156\031" +
    "\161\041\157\001\002\000\074\003\uff50\010\uff50\014\uff50" +
    "\015\uff50\023\uff50\024\uff50\025\uff50\026\uff50\027\uff50\036" +
    "\uff50\037\uff50\040\uff50\044\uff50\045\uff50\046\uff50\047\uff50" +
    "\050\uff50\051\uff50\052\uff50\053\uff50\061\uff50\062\uff50\063" +
    "\uff50\064\uff50\067\uff50\071\uff50\072\uff50\073\uff50\076\uff50" +
    "\001\002\000\016\033\075\042\107\066\105\074\100\075" +
    "\077\076\112\001\002\000\104\003\uff2a\010\uff2a\014\uff2a" +
    "\015\uff2a\023\uff2a\024\uff2a\025\uff2a\026\uff2a\027\uff2a\036" +
    "\uff2a\037\uff2a\040\uff2a\044\uff2a\045\uff2a\046\uff2a\047\uff2a" +
    "\050\uff2a\051\uff2a\052\uff2a\053\uff2a\054\uff2a\055\uff2a\056" +
    "\uff2a\057\uff2a\061\uff2a\062\uff2a\063\uff2a\064\uff2a\067\uff2a" +
    "\071\uff2a\072\uff2a\073\uff2a\076\uff2a\001\002\000\060\003" +
    "\uff59\010\uff59\014\uff59\015\uff59\023\uff59\024\uff59\025\uff59" +
    "\026\uff59\027\uff59\036\uff59\037\uff59\040\uff59\044\uff59\045" +
    "\uff59\061\uff59\062\uff59\063\uff59\064\uff59\067\uff59\071\uff59" +
    "\072\uff59\073\uff59\076\uff59\001\002\000\060\003\uff51\010" +
    "\uff51\014\uff51\015\uff51\023\uff51\024\uff51\025\uff51\026\uff51" +
    "\027\uff51\036\uff51\037\uff51\040\uff51\044\uff51\045\uff51\061" +
    "\116\062\117\063\uff51\064\uff51\067\uff51\071\uff51\072\uff51" +
    "\073\uff51\076\uff51\001\002\000\054\003\uff58\010\uff58\014" +
    "\uff58\015\uff58\023\uff58\024\uff58\025\uff58\026\uff58\027\uff58" +
    "\036\uff58\037\uff58\040\uff58\044\uff58\045\uff58\063\uff58\064" +
    "\uff58\067\uff58\071\uff58\072\uff58\073\uff58\076\uff58\001\002" +
    "\000\024\003\uff57\033\uff57\042\uff57\055\uff57\060\uff57\066" +
    "\uff57\074\uff57\075\uff57\076\uff57\001\002\000\024\003\uff54" +
    "\033\uff54\042\uff54\055\uff54\060\uff54\066\uff54\074\uff54\075" +
    "\uff54\076\uff54\001\002\000\024\003\102\033\075\042\107" +
    "\055\103\060\111\066\105\074\100\075\077\076\112\001" +
    "\002\000\060\003\uff53\010\uff53\014\uff53\015\uff53\023\uff53" +
    "\024\uff53\025\uff53\026\uff53\027\uff53\036\uff53\037\uff53\040" +
    "\uff53\044\uff53\045\uff53\061\uff53\062\uff53\063\uff53\064\uff53" +
    "\067\uff53\071\uff53\072\uff53\073\uff53\076\uff53\001\002\000" +
    "\060\003\uff51\010\uff51\014\uff51\015\uff51\023\uff51\024\uff51" +
    "\025\uff51\026\uff51\027\uff51\036\uff51\037\uff51\040\uff51\044" +
    "\uff51\045\uff51\061\116\062\117\063\uff51\064\uff51\067\uff51" +
    "\071\uff51\072\uff51\073\uff51\076\uff51\001\002\000\054\003" +
    "\uff52\010\uff52\014\uff52\015\uff52\023\uff52\024\uff52\025\uff52" +
    "\026\uff52\027\uff52\036\uff52\037\uff52\040\uff52\044\uff52\045" +
    "\uff52\063\uff52\064\uff52\067\uff52\071\uff52\072\uff52\073\uff52" +
    "\076\uff52\001\002\000\024\003\102\033\075\042\107\055" +
    "\103\060\111\066\105\074\100\075\077\076\112\001\002" +
    "\000\060\003\uff56\010\uff56\014\uff56\015\uff56\023\uff56\024" +
    "\uff56\025\uff56\026\uff56\027\uff56\036\uff56\037\uff56\040\uff56" +
    "\044\uff56\045\uff56\061\uff56\062\uff56\063\uff56\064\uff56\067" +
    "\uff56\071\uff56\072\uff56\073\uff56\076\uff56\001\002\000\060" +
    "\003\uff51\010\uff51\014\uff51\015\uff51\023\uff51\024\uff51\025" +
    "\uff51\026\uff51\027\uff51\036\uff51\037\uff51\040\uff51\044\uff51" +
    "\045\uff51\061\116\062\117\063\uff51\064\uff51\067\uff51\071" +
    "\uff51\072\uff51\073\uff51\076\uff51\001\002\000\054\003\uff55" +
    "\010\uff55\014\uff55\015\uff55\023\uff55\024\uff55\025\uff55\026" +
    "\uff55\027\uff55\036\uff55\037\uff55\040\uff55\044\uff55\045\uff55" +
    "\063\uff55\064\uff55\067\uff55\071\uff55\072\uff55\073\uff55\076" +
    "\uff55\001\002\000\104\003\uff2d\010\uff2d\014\uff2d\015\uff2d" +
    "\023\uff2d\024\uff2d\025\uff2d\026\uff2d\027\uff2d\036\uff2d\037" +
    "\uff2d\040\uff2d\044\uff2d\045\uff2d\046\uff2d\047\uff2d\050\uff2d" +
    "\051\uff2d\052\uff2d\053\uff2d\054\uff2d\055\uff2d\056\uff2d\057" +
    "\uff2d\061\uff2d\062\uff2d\063\uff2d\064\uff2d\067\uff2d\071\uff2d" +
    "\072\uff2d\073\uff2d\076\uff2d\001\002\000\074\003\uff42\010" +
    "\uff42\014\uff42\015\uff42\023\uff42\024\uff42\025\uff42\026\uff42" +
    "\027\uff42\036\uff42\037\uff42\040\uff42\044\uff42\045\uff42\046" +
    "\134\047\135\050\133\051\132\052\137\053\140\061\uff42" +
    "\062\uff42\063\uff42\064\uff42\067\uff42\071\uff42\072\uff42\073" +
    "\uff42\076\uff42\001\002\000\024\003\uff48\033\uff48\042\uff48" +
    "\055\uff48\060\uff48\066\uff48\074\uff48\075\uff48\076\uff48\001" +
    "\002\000\024\003\uff4a\033\uff4a\042\uff4a\055\uff4a\060\uff4a" +
    "\066\uff4a\074\uff4a\075\uff4a\076\uff4a\001\002\000\024\003" +
    "\uff4e\033\uff4e\042\uff4e\055\uff4e\060\uff4e\066\uff4e\074\uff4e" +
    "\075\uff4e\076\uff4e\001\002\000\024\003\uff4c\033\uff4c\042" +
    "\uff4c\055\uff4c\060\uff4c\066\uff4c\074\uff4c\075\uff4c\076\uff4c" +
    "\001\002\000\060\003\uff4f\010\uff4f\014\uff4f\015\uff4f\023" +
    "\uff4f\024\uff4f\025\uff4f\026\uff4f\027\uff4f\036\uff4f\037\uff4f" +
    "\040\uff4f\044\uff4f\045\uff4f\061\uff4f\062\uff4f\063\uff4f\064" +
    "\uff4f\067\uff4f\071\uff4f\072\uff4f\073\uff4f\076\uff4f\001\002" +
    "\000\024\003\uff46\033\uff46\042\uff46\055\uff46\060\uff46\066" +
    "\uff46\074\uff46\075\uff46\076\uff46\001\002\000\024\003\uff44" +
    "\033\uff44\042\uff44\055\uff44\060\uff44\066\uff44\074\uff44\075" +
    "\uff44\076\uff44\001\002\000\024\003\102\033\075\042\107" +
    "\055\103\060\111\066\105\074\100\075\077\076\112\001" +
    "\002\000\060\003\uff43\010\uff43\014\uff43\015\uff43\023\uff43" +
    "\024\uff43\025\uff43\026\uff43\027\uff43\036\uff43\037\uff43\040" +
    "\uff43\044\uff43\045\uff43\061\uff43\062\uff43\063\uff43\064\uff43" +
    "\067\uff43\071\uff43\072\uff43\073\uff43\076\uff43\001\002\000" +
    "\024\003\102\033\075\042\107\055\103\060\111\066\105" +
    "\074\100\075\077\076\112\001\002\000\060\003\uff45\010" +
    "\uff45\014\uff45\015\uff45\023\uff45\024\uff45\025\uff45\026\uff45" +
    "\027\uff45\036\uff45\037\uff45\040\uff45\044\uff45\045\uff45\061" +
    "\uff45\062\uff45\063\uff45\064\uff45\067\uff45\071\uff45\072\uff45" +
    "\073\uff45\076\uff45\001\002\000\024\003\102\033\075\042" +
    "\107\055\103\060\111\066\105\074\100\075\077\076\112" +
    "\001\002\000\060\003\uff4b\010\uff4b\014\uff4b\015\uff4b\023" +
    "\uff4b\024\uff4b\025\uff4b\026\uff4b\027\uff4b\036\uff4b\037\uff4b" +
    "\040\uff4b\044\uff4b\045\uff4b\061\uff4b\062\uff4b\063\uff4b\064" +
    "\uff4b\067\uff4b\071\uff4b\072\uff4b\073\uff4b\076\uff4b\001\002" +
    "\000\024\003\102\033\075\042\107\055\103\060\111\066" +
    "\105\074\100\075\077\076\112\001\002\000\060\003\uff4d" +
    "\010\uff4d\014\uff4d\015\uff4d\023\uff4d\024\uff4d\025\uff4d\026" +
    "\uff4d\027\uff4d\036\uff4d\037\uff4d\040\uff4d\044\uff4d\045\uff4d" +
    "\061\uff4d\062\uff4d\063\uff4d\064\uff4d\067\uff4d\071\uff4d\072" +
    "\uff4d\073\uff4d\076\uff4d\001\002\000\024\003\102\033\075" +
    "\042\107\055\103\060\111\066\105\074\100\075\077\076" +
    "\112\001\002\000\060\003\uff49\010\uff49\014\uff49\015\uff49" +
    "\023\uff49\024\uff49\025\uff49\026\uff49\027\uff49\036\uff49\037" +
    "\uff49\040\uff49\044\uff49\045\uff49\061\uff49\062\uff49\063\uff49" +
    "\064\uff49\067\uff49\071\uff49\072\uff49\073\uff49\076\uff49\001" +
    "\002\000\024\003\102\033\075\042\107\055\103\060\111" +
    "\066\105\074\100\075\077\076\112\001\002\000\060\003" +
    "\uff47\010\uff47\014\uff47\015\uff47\023\uff47\024\uff47\025\uff47" +
    "\026\uff47\027\uff47\036\uff47\037\uff47\040\uff47\044\uff47\045" +
    "\uff47\061\uff47\062\uff47\063\uff47\064\uff47\067\uff47\071\uff47" +
    "\072\uff47\073\uff47\076\uff47\001\002\000\104\003\uff6b\010" +
    "\uff6b\014\uff6b\015\uff6b\023\uff6b\024\uff6b\025\uff6b\026\uff6b" +
    "\027\uff6b\036\uff6b\037\uff6b\040\uff6b\044\uff6b\045\uff6b\046" +
    "\uff6b\047\uff6b\050\uff6b\051\uff6b\052\uff6b\053\uff6b\054\uff6b" +
    "\055\uff6b\056\uff6b\057\uff6b\061\uff6b\062\uff6b\063\uff6b\064" +
    "\uff6b\067\uff6b\071\uff6b\072\uff6b\073\uff6b\076\uff6b\001\002" +
    "\000\104\003\uff6c\010\uff6c\014\uff6c\015\uff6c\023\uff6c\024" +
    "\uff6c\025\uff6c\026\uff6c\027\uff6c\036\uff6c\037\uff6c\040\uff6c" +
    "\044\uff6c\045\uff6c\046\uff6c\047\uff6c\050\uff6c\051\uff6c\052" +
    "\uff6c\053\uff6c\054\uff6c\055\uff6c\056\uff6c\057\uff6c\061\uff6c" +
    "\062\uff6c\063\uff6c\064\uff6c\067\uff6c\071\uff6c\072\uff6c\073" +
    "\uff6c\076\uff6c\001\002\000\104\003\uff6e\010\uff6e\014\uff6e" +
    "\015\uff6e\023\uff6e\024\uff6e\025\uff6e\026\uff6e\027\uff6e\036" +
    "\uff6e\037\uff6e\040\uff6e\044\uff6e\045\uff6e\046\uff6e\047\uff6e" +
    "\050\uff6e\051\uff6e\052\uff6e\053\uff6e\054\uff6e\055\uff6e\056" +
    "\uff6e\057\uff6e\061\uff6e\062\uff6e\063\uff6e\064\uff6e\067\uff6e" +
    "\071\uff6e\072\uff6e\073\uff6e\076\uff6e\001\002\000\104\003" +
    "\uff26\010\uff26\014\uff26\015\uff26\023\uff26\024\uff26\025\uff26" +
    "\026\uff26\027\uff26\036\uff26\037\uff26\040\uff26\044\uff26\045" +
    "\uff26\046\uff26\047\uff26\050\uff26\051\uff26\052\uff26\053\uff26" +
    "\054\uff26\055\uff26\056\uff26\057\uff26\061\uff26\062\uff26\063" +
    "\uff26\064\uff26\067\uff26\071\uff26\072\uff26\073\uff26\076\uff26" +
    "\001\002\000\104\003\uff6d\010\uff6d\014\uff6d\015\uff6d\023" +
    "\uff6d\024\uff6d\025\uff6d\026\uff6d\027\uff6d\036\uff6d\037\uff6d" +
    "\040\uff6d\044\uff6d\045\uff6d\046\uff6d\047\uff6d\050\uff6d\051" +
    "\uff6d\052\uff6d\053\uff6d\054\uff6d\055\uff6d\056\uff6d\057\uff6d" +
    "\061\uff6d\062\uff6d\063\uff6d\064\uff6d\067\uff6d\071\uff6d\072" +
    "\uff6d\073\uff6d\076\uff6d\001\002\000\100\003\uff39\010\uff39" +
    "\014\uff39\015\uff39\023\uff39\024\uff39\025\uff39\026\uff39\027" +
    "\uff39\036\uff39\037\uff39\040\uff39\044\uff39\045\uff39\046\uff39" +
    "\047\uff39\050\uff39\051\uff39\052\uff39\053\uff39\054\165\055" +
    "\164\061\uff39\062\uff39\063\uff39\064\uff39\067\uff39\071\uff39" +
    "\072\uff39\073\uff39\076\uff39\001\002\000\074\003\uff40\010" +
    "\uff40\014\uff40\015\uff40\023\uff40\024\uff40\025\uff40\026\uff40" +
    "\027\uff40\036\uff40\037\uff40\040\uff40\044\uff40\045\uff40\046" +
    "\uff40\047\uff40\050\uff40\051\uff40\052\uff40\053\uff40\061\uff40" +
    "\062\uff40\063\uff40\064\uff40\067\uff40\071\uff40\072\uff40\073" +
    "\uff40\076\uff40\001\002\000\024\003\uff3c\033\uff3c\042\uff3c" +
    "\055\uff3c\060\uff3c\066\uff3c\074\uff3c\075\uff3c\076\uff3c\001" +
    "\002\000\024\003\uff3f\033\uff3f\042\uff3f\055\uff3f\060\uff3f" +
    "\066\uff3f\074\uff3f\075\uff3f\076\uff3f\001\002\000\024\003" +
    "\102\033\075\042\107\055\103\060\111\066\105\074\100" +
    "\075\077\076\112\001\002\000\100\003\uff3e\010\uff3e\014" +
    "\uff3e\015\uff3e\023\uff3e\024\uff3e\025\uff3e\026\uff3e\027\uff3e" +
    "\036\uff3e\037\uff3e\040\uff3e\044\uff3e\045\uff3e\046\uff3e\047" +
    "\uff3e\050\uff3e\051\uff3e\052\uff3e\053\uff3e\054\uff3e\055\uff3e" +
    "\061\uff3e\062\uff3e\063\uff3e\064\uff3e\067\uff3e\071\uff3e\072" +
    "\uff3e\073\uff3e\076\uff3e\001\002\000\100\003\uff39\010\uff39" +
    "\014\uff39\015\uff39\023\uff39\024\uff39\025\uff39\026\uff39\027" +
    "\uff39\036\uff39\037\uff39\040\uff39\044\uff39\045\uff39\046\uff39" +
    "\047\uff39\050\uff39\051\uff39\052\uff39\053\uff39\054\165\055" +
    "\164\061\uff39\062\uff39\063\uff39\064\uff39\067\uff39\071\uff39" +
    "\072\uff39\073\uff39\076\uff39\001\002\000\074\003\uff3d\010" +
    "\uff3d\014\uff3d\015\uff3d\023\uff3d\024\uff3d\025\uff3d\026\uff3d" +
    "\027\uff3d\036\uff3d\037\uff3d\040\uff3d\044\uff3d\045\uff3d\046" +
    "\uff3d\047\uff3d\050\uff3d\051\uff3d\052\uff3d\053\uff3d\061\uff3d" +
    "\062\uff3d\063\uff3d\064\uff3d\067\uff3d\071\uff3d\072\uff3d\073" +
    "\uff3d\076\uff3d\001\002\000\024\003\102\033\075\042\107" +
    "\055\103\060\111\066\105\074\100\075\077\076\112\001" +
    "\002\000\100\003\uff3b\010\uff3b\014\uff3b\015\uff3b\023\uff3b" +
    "\024\uff3b\025\uff3b\026\uff3b\027\uff3b\036\uff3b\037\uff3b\040" +
    "\uff3b\044\uff3b\045\uff3b\046\uff3b\047\uff3b\050\uff3b\051\uff3b" +
    "\052\uff3b\053\uff3b\054\uff3b\055\uff3b\061\uff3b\062\uff3b\063" +
    "\uff3b\064\uff3b\067\uff3b\071\uff3b\072\uff3b\073\uff3b\076\uff3b" +
    "\001\002\000\100\003\uff39\010\uff39\014\uff39\015\uff39\023" +
    "\uff39\024\uff39\025\uff39\026\uff39\027\uff39\036\uff39\037\uff39" +
    "\040\uff39\044\uff39\045\uff39\046\uff39\047\uff39\050\uff39\051" +
    "\uff39\052\uff39\053\uff39\054\165\055\164\061\uff39\062\uff39" +
    "\063\uff39\064\uff39\067\uff39\071\uff39\072\uff39\073\uff39\076" +
    "\uff39\001\002\000\074\003\uff3a\010\uff3a\014\uff3a\015\uff3a" +
    "\023\uff3a\024\uff3a\025\uff3a\026\uff3a\027\uff3a\036\uff3a\037" +
    "\uff3a\040\uff3a\044\uff3a\045\uff3a\046\uff3a\047\uff3a\050\uff3a" +
    "\051\uff3a\052\uff3a\053\uff3a\061\uff3a\062\uff3a\063\uff3a\064" +
    "\uff3a\067\uff3a\071\uff3a\072\uff3a\073\uff3a\076\uff3a\001\002" +
    "\000\004\067\177\001\002\000\104\003\uff25\010\uff25\014" +
    "\uff25\015\uff25\023\uff25\024\uff25\025\uff25\026\uff25\027\uff25" +
    "\036\uff25\037\uff25\040\uff25\044\uff25\045\uff25\046\uff25\047" +
    "\uff25\050\uff25\051\uff25\052\uff25\053\uff25\054\uff25\055\uff25" +
    "\056\uff25\057\uff25\061\uff25\062\uff25\063\uff25\064\uff25\067" +
    "\uff25\071\uff25\072\uff25\073\uff25\076\uff25\001\002\000\104" +
    "\003\uff30\010\uff30\014\uff30\015\uff30\023\uff30\024\uff30\025" +
    "\uff30\026\uff30\027\uff30\036\uff30\037\uff30\040\uff30\044\uff30" +
    "\045\uff30\046\uff30\047\uff30\050\uff30\051\uff30\052\uff30\053" +
    "\uff30\054\uff30\055\uff30\056\202\057\201\061\uff30\062\uff30" +
    "\063\uff30\064\uff30\067\uff30\071\uff30\072\uff30\073\uff30\076" +
    "\uff30\001\002\000\024\003\uff36\033\uff36\042\uff36\055\uff36" +
    "\060\uff36\066\uff36\074\uff36\075\uff36\076\uff36\001\002\000" +
    "\024\003\uff33\033\uff33\042\uff33\055\uff33\060\uff33\066\uff33" +
    "\074\uff33\075\uff33\076\uff33\001\002\000\100\003\uff37\010" +
    "\uff37\014\uff37\015\uff37\023\uff37\024\uff37\025\uff37\026\uff37" +
    "\027\uff37\036\uff37\037\uff37\040\uff37\044\uff37\045\uff37\046" +
    "\uff37\047\uff37\050\uff37\051\uff37\052\uff37\053\uff37\054\uff37" +
    "\055\uff37\061\uff37\062\uff37\063\uff37\064\uff37\067\uff37\071" +
    "\uff37\072\uff37\073\uff37\076\uff37\001\002\000\024\003\102" +
    "\033\075\042\107\055\103\060\111\066\105\074\100\075" +
    "\077\076\112\001\002\000\104\003\uff32\010\uff32\014\uff32" +
    "\015\uff32\023\uff32\024\uff32\025\uff32\026\uff32\027\uff32\036" +
    "\uff32\037\uff32\040\uff32\044\uff32\045\uff32\046\uff32\047\uff32" +
    "\050\uff32\051\uff32\052\uff32\053\uff32\054\uff32\055\uff32\056" +
    "\uff32\057\uff32\061\uff32\062\uff32\063\uff32\064\uff32\067\uff32" +
    "\071\uff32\072\uff32\073\uff32\076\uff32\001\002\000\104\003" +
    "\uff30\010\uff30\014\uff30\015\uff30\023\uff30\024\uff30\025\uff30" +
    "\026\uff30\027\uff30\036\uff30\037\uff30\040\uff30\044\uff30\045" +
    "\uff30\046\uff30\047\uff30\050\uff30\051\uff30\052\uff30\053\uff30" +
    "\054\uff30\055\uff30\056\202\057\201\061\uff30\062\uff30\063" +
    "\uff30\064\uff30\067\uff30\071\uff30\072\uff30\073\uff30\076\uff30" +
    "\001\002\000\100\003\uff31\010\uff31\014\uff31\015\uff31\023" +
    "\uff31\024\uff31\025\uff31\026\uff31\027\uff31\036\uff31\037\uff31" +
    "\040\uff31\044\uff31\045\uff31\046\uff31\047\uff31\050\uff31\051" +
    "\uff31\052\uff31\053\uff31\054\uff31\055\uff31\061\uff31\062\uff31" +
    "\063\uff31\064\uff31\067\uff31\071\uff31\072\uff31\073\uff31\076" +
    "\uff31\001\002\000\024\003\102\033\075\042\107\055\103" +
    "\060\111\066\105\074\100\075\077\076\112\001\002\000" +
    "\104\003\uff35\010\uff35\014\uff35\015\uff35\023\uff35\024\uff35" +
    "\025\uff35\026\uff35\027\uff35\036\uff35\037\uff35\040\uff35\044" +
    "\uff35\045\uff35\046\uff35\047\uff35\050\uff35\051\uff35\052\uff35" +
    "\053\uff35\054\uff35\055\uff35\056\uff35\057\uff35\061\uff35\062" +
    "\uff35\063\uff35\064\uff35\067\uff35\071\uff35\072\uff35\073\uff35" +
    "\076\uff35\001\002\000\104\003\uff30\010\uff30\014\uff30\015" +
    "\uff30\023\uff30\024\uff30\025\uff30\026\uff30\027\uff30\036\uff30" +
    "\037\uff30\040\uff30\044\uff30\045\uff30\046\uff30\047\uff30\050" +
    "\uff30\051\uff30\052\uff30\053\uff30\054\uff30\055\uff30\056\202" +
    "\057\201\061\uff30\062\uff30\063\uff30\064\uff30\067\uff30\071" +
    "\uff30\072\uff30\073\uff30\076\uff30\001\002\000\100\003\uff34" +
    "\010\uff34\014\uff34\015\uff34\023\uff34\024\uff34\025\uff34\026" +
    "\uff34\027\uff34\036\uff34\037\uff34\040\uff34\044\uff34\045\uff34" +
    "\046\uff34\047\uff34\050\uff34\051\uff34\052\uff34\053\uff34\054" +
    "\uff34\055\uff34\061\uff34\062\uff34\063\uff34\064\uff34\067\uff34" +
    "\071\uff34\072\uff34\073\uff34\076\uff34\001\002\000\104\003" +
    "\uff2e\010\uff2e\014\uff2e\015\uff2e\023\uff2e\024\uff2e\025\uff2e" +
    "\026\uff2e\027\uff2e\036\uff2e\037\uff2e\040\uff2e\044\uff2e\045" +
    "\uff2e\046\uff2e\047\uff2e\050\uff2e\051\uff2e\052\uff2e\053\uff2e" +
    "\054\uff2e\055\uff2e\056\uff2e\057\uff2e\061\uff2e\062\uff2e\063" +
    "\uff2e\064\uff2e\067\uff2e\071\uff2e\072\uff2e\073\uff2e\076\uff2e" +
    "\001\002\000\004\022\217\001\002\000\004\067\227\001" +
    "\002\000\024\003\102\033\075\042\107\055\103\060\111" +
    "\066\105\074\100\075\077\076\112\001\002\000\012\003" +
    "\uff74\023\uff74\024\uff74\025\uff74\001\002\000\012\003\223" +
    "\023\226\024\222\025\224\001\002\000\050\003\uff71\010" +
    "\uff71\014\uff71\015\uff71\026\uff71\027\uff71\036\uff71\037\uff71" +
    "\040\uff71\044\uff71\045\uff71\063\uff71\064\uff71\067\uff71\070" +
    "\uff71\071\uff71\072\uff71\073\uff71\076\uff71\001\002\000\050" +
    "\003\uff6f\010\uff6f\014\uff6f\015\uff6f\026\uff6f\027\uff6f\036" +
    "\uff6f\037\uff6f\040\uff6f\044\uff6f\045\uff6f\063\uff6f\064\uff6f" +
    "\067\uff6f\070\uff6f\071\uff6f\072\uff6f\073\uff6f\076\uff6f\001" +
    "\002\000\050\003\uff70\010\uff70\014\uff70\015\uff70\026\uff70" +
    "\027\uff70\036\uff70\037\uff70\040\uff70\044\uff70\045\uff70\063" +
    "\uff70\064\uff70\067\uff70\070\uff70\071\uff70\072\uff70\073\uff70" +
    "\076\uff70\001\002\000\046\003\uff73\010\uff73\014\uff73\015" +
    "\uff73\026\uff73\027\uff73\036\uff73\037\uff73\040\uff73\044\uff73" +
    "\045\uff73\063\uff73\064\uff73\067\uff73\071\uff73\072\uff73\073" +
    "\uff73\076\uff73\001\002\000\050\003\uff72\010\uff72\014\uff72" +
    "\015\uff72\026\uff72\027\uff72\036\uff72\037\uff72\040\uff72\044" +
    "\uff72\045\uff72\063\uff72\064\uff72\067\uff72\070\uff72\071\uff72" +
    "\072\uff72\073\uff72\076\uff72\001\002\000\042\003\uff1f\010" +
    "\uff1f\014\uff1f\015\uff1f\026\uff1f\027\uff1f\036\uff1f\037\uff1f" +
    "\040\uff1f\044\uff1f\045\uff1f\063\uff1f\064\uff1f\071\uff1f\072" +
    "\uff1f\076\uff1f\001\002\000\104\003\uff29\010\uff29\014\uff29" +
    "\015\uff29\023\uff29\024\uff29\025\uff29\026\uff29\027\uff29\036" +
    "\uff29\037\uff29\040\uff29\044\uff29\045\uff29\046\uff29\047\uff29" +
    "\050\uff29\051\uff29\052\uff29\053\uff29\054\uff29\055\uff29\056" +
    "\uff29\057\uff29\061\uff29\062\uff29\063\uff29\064\uff29\067\uff29" +
    "\071\uff29\072\uff29\073\uff29\076\uff29\001\002\000\104\003" +
    "\uff28\010\uff28\014\uff28\015\uff28\023\uff28\024\uff28\025\uff28" +
    "\026\uff28\027\uff28\036\uff28\037\uff28\040\uff28\044\uff28\045" +
    "\uff28\046\uff28\047\uff28\050\uff28\051\uff28\052\uff28\053\uff28" +
    "\054\uff28\055\uff28\056\uff28\057\uff28\061\uff28\062\uff28\063" +
    "\uff28\064\uff28\067\uff28\071\uff28\072\uff28\073\uff28\076\uff28" +
    "\001\002\000\004\022\217\001\002\000\004\073\234\001" +
    "\002\000\024\003\102\033\075\042\107\055\103\060\111" +
    "\066\105\074\100\075\077\076\112\001\002\000\004\073" +
    "\236\001\002\000\024\003\102\033\075\042\107\055\103" +
    "\060\111\066\105\074\100\075\077\076\112\001\002\000" +
    "\004\067\240\001\002\000\042\003\uff20\010\uff20\014\uff20" +
    "\015\uff20\026\uff20\027\uff20\036\uff20\037\uff20\040\uff20\044" +
    "\uff20\045\uff20\063\uff20\064\uff20\071\uff20\072\uff20\076\uff20" +
    "\001\002\000\004\066\242\001\002\000\026\003\102\033" +
    "\075\042\107\055\103\060\111\066\105\067\uff78\074\100" +
    "\075\077\076\112\001\002\000\004\067\254\001\002\000" +
    "\010\003\uff7b\067\uff7c\073\uff7e\001\002\000\004\003\251" +
    "\001\002\000\004\073\247\001\002\000\026\003\102\033" +
    "\075\042\107\055\103\060\111\066\105\067\uff78\074\100" +
    "\075\077\076\112\001\002\000\004\067\uff7d\001\002\000" +
    "\026\003\uff7a\033\uff7a\042\uff7a\055\uff7a\060\uff7a\066\uff7a" +
    "\067\uff7a\074\uff7a\075\uff7a\076\uff7a\001\002\000\026\003" +
    "\102\033\075\042\107\055\103\060\111\066\105\067\uff78" +
    "\074\100\075\077\076\112\001\002\000\004\067\uff79\001" +
    "\002\000\042\003\uff82\010\uff82\014\uff82\015\uff82\026\uff82" +
    "\027\uff82\036\uff82\037\uff82\040\uff82\044\uff82\045\uff82\063" +
    "\uff82\064\uff82\071\uff82\072\uff82\076\uff82\001\002\000\004" +
    "\066\256\001\002\000\026\003\102\033\075\042\107\055" +
    "\103\060\111\066\105\067\uff78\074\100\075\077\076\112" +
    "\001\002\000\004\067\260\001\002\000\042\003\uff80\010" +
    "\uff80\014\uff80\015\uff80\026\uff80\027\uff80\036\uff80\037\uff80" +
    "\040\uff80\044\uff80\045\uff80\063\uff80\064\uff80\071\uff80\072" +
    "\uff80\076\uff80\001\002\000\040\003\045\010\051\014\037" +
    "\015\032\026\035\027\033\036\053\037\040\040\041\044" +
    "\052\045\047\063\042\064\044\071\uff8d\076\046\001\002" +
    "\000\004\070\uff1b\001\002\000\024\003\102\033\075\042" +
    "\107\055\103\060\111\066\105\074\100\075\077\076\112" +
    "\001\002\000\004\067\uff1d\001\002\000\004\067\266\001" +
    "\002\000\004\070\uff1c\001\002\000\004\070\276\001\002" +
    "\000\042\003\uff24\010\uff24\011\272\014\uff24\015\uff24\026" +
    "\uff24\027\uff24\036\uff24\037\uff24\040\uff24\044\uff24\045\uff24" +
    "\063\uff24\064\uff24\071\uff24\076\uff24\001\002\000\040\003" +
    "\uff23\010\uff23\014\uff23\015\uff23\026\uff23\027\uff23\036\uff23" +
    "\037\uff23\040\uff23\044\uff23\045\uff23\063\uff23\064\uff23\071" +
    "\uff23\076\uff23\001\002\000\006\010\273\070\uff1b\001\002" +
    "\000\004\066\263\001\002\000\040\003\uff21\010\uff21\014" +
    "\uff21\015\uff21\026\uff21\027\uff21\036\uff21\037\uff21\040\uff21" +
    "\044\uff21\045\uff21\063\uff21\064\uff21\071\uff21\076\uff21\001" +
    "\002\000\040\003\uff22\010\uff22\014\uff22\015\uff22\026\uff22" +
    "\027\uff22\036\uff22\037\uff22\040\uff22\044\uff22\045\uff22\063" +
    "\uff22\064\uff22\071\uff22\076\uff22\001\002\000\040\003\045" +
    "\010\051\014\037\015\032\026\035\027\033\036\053\037" +
    "\040\040\041\044\052\045\047\063\042\064\044\071\uff8d" +
    "\076\046\001\002\000\004\071\uff1a\001\002\000\004\071" +
    "\301\001\002\000\042\003\uff19\010\uff19\011\uff19\014\uff19" +
    "\015\uff19\026\uff19\027\uff19\036\uff19\037\uff19\040\uff19\044" +
    "\uff19\045\uff19\063\uff19\064\uff19\071\uff19\076\uff19\001\002" +
    "\000\004\071\uffc6\001\002\000\042\003\uffcb\010\uffcb\014" +
    "\uffcb\015\uffcb\026\uffcb\027\uffcb\036\uffcb\037\uffcb\040\uffcb" +
    "\044\uffcb\045\uffcb\063\uffcb\064\uffcb\071\uffcb\072\uffcd\076" +
    "\uffcb\001\002\000\040\003\045\010\051\014\037\015\032" +
    "\026\035\027\033\036\053\037\040\040\041\044\052\045" +
    "\047\063\042\064\044\071\uff8d\076\046\001\002\000\024" +
    "\003\102\033\075\042\107\055\103\060\111\066\105\074" +
    "\100\075\077\076\112\001\002\000\040\003\045\010\051" +
    "\014\037\015\032\026\035\027\033\036\053\037\040\040" +
    "\041\044\052\045\047\063\042\064\044\071\uff8d\076\046" +
    "\001\002\000\004\071\uffd0\001\002\000\042\003\uff5e\010" +
    "\uff5e\014\uff5e\015\uff5e\026\uff5e\027\uff5e\036\uff5e\037\uff5e" +
    "\040\uff5e\044\uff5e\045\uff5e\063\uff5e\064\uff5e\071\uff5e\072" +
    "\uff5e\076\uff5e\001\002\000\004\071\uffce\001\002\000\004" +
    "\072\315\001\002\000\040\003\045\010\051\014\037\015" +
    "\032\026\035\027\033\036\053\037\040\040\041\044\052" +
    "\045\047\063\042\064\044\071\uff8d\076\046\001\002\000" +
    "\004\071\uffca\001\002\000\040\003\045\010\051\014\037" +
    "\015\032\026\035\027\033\036\053\037\040\040\041\044" +
    "\052\045\047\063\042\064\044\071\uff8d\076\046\001\002" +
    "\000\004\071\uffcc\001\002\000\040\003\045\010\051\014" +
    "\037\015\032\026\035\027\033\036\053\037\040\040\041" +
    "\044\052\045\047\063\042\064\044\071\uff8d\076\046\001" +
    "\002\000\004\070\uff1b\001\002\000\040\003\uff1e\010\uff1e" +
    "\014\uff1e\015\uff1e\026\uff1e\027\uff1e\036\uff1e\037\uff1e\040" +
    "\uff1e\044\uff1e\045\uff1e\063\uff1e\064\uff1e\071\uff1e\076\uff1e" +
    "\001\002\000\004\071\uffc5\001\002\000\004\017\345\001" +
    "\002\000\024\003\102\033\075\042\107\055\103\060\111" +
    "\066\105\074\100\075\077\076\112\001\002\000\042\003" +
    "\uffde\010\uffde\014\uffde\015\uffde\026\uffde\027\uffde\036\uffde" +
    "\037\uffde\040\uffde\044\uffde\045\uffde\063\uffde\064\uffde\071" +
    "\uffde\072\uffe0\076\uffde\001\002\000\004\065\335\001\002" +
    "\000\042\003\uffda\010\uffda\014\uffda\015\uffda\026\uffda\027" +
    "\uffda\036\uffda\037\uffda\040\uffda\044\uffda\045\uffda\063\uffda" +
    "\064\uffda\071\uffda\072\uffdc\076\uffda\001\002\000\040\003" +
    "\045\010\051\014\037\015\032\026\035\027\033\036\053" +
    "\037\040\040\041\044\052\045\047\063\042\064\044\071" +
    "\uff8d\076\046\001\002\000\004\072\332\001\002\000\040" +
    "\003\045\010\051\014\037\015\032\026\035\027\033\036" +
    "\053\037\040\040\041\044\052\045\047\063\042\064\044" +
    "\071\uff8d\076\046\001\002\000\004\071\uffdb\001\002\000" +
    "\004\071\uffd9\001\002\000\024\003\102\033\075\042\107" +
    "\055\103\060\111\066\105\074\100\075\077\076\112\001" +
    "\002\000\042\003\uff69\010\uff69\014\uff69\015\uff69\026\uff69" +
    "\027\uff69\036\uff69\037\uff69\040\uff69\044\uff69\045\uff69\063" +
    "\uff69\064\uff69\071\uff69\072\uff69\076\uff69\001\002\000\040" +
    "\003\045\010\051\014\037\015\032\026\035\027\033\036" +
    "\053\037\040\040\041\044\052\045\047\063\042\064\044" +
    "\071\uff8d\076\046\001\002\000\004\072\341\001\002\000" +
    "\040\003\045\010\051\014\037\015\032\026\035\027\033" +
    "\036\053\037\040\040\041\044\052\045\047\063\042\064" +
    "\044\071\uff8d\076\046\001\002\000\004\071\uffdf\001\002" +
    "\000\004\071\uffdd\001\002\000\042\003\uff65\010\uff65\014" +
    "\uff65\015\uff65\026\uff65\027\uff65\036\uff65\037\uff65\040\uff65" +
    "\044\uff65\045\uff65\063\uff65\064\uff65\071\uff65\072\uff65\076" +
    "\uff65\001\002\000\004\020\347\001\002\000\050\003\uff63" +
    "\010\uff63\014\uff63\015\uff63\026\uff63\027\uff63\036\uff63\037" +
    "\uff63\040\uff63\044\uff63\045\uff63\063\uff63\064\uff63\065\uff63" +
    "\067\uff63\071\uff63\072\uff63\073\uff63\076\uff63\001\002\000" +
    "\010\003\351\006\353\007\352\001\002\000\050\003\uff5d" +
    "\010\uff5d\014\uff5d\015\uff5d\026\uff5d\027\uff5d\036\uff5d\037" +
    "\uff5d\040\uff5d\044\uff5d\045\uff5d\063\uff5d\064\uff5d\065\uff5d" +
    "\067\uff5d\071\uff5d\072\uff5d\073\uff5d\076\uff5d\001\002\000" +
    "\050\003\uff5a\010\uff5a\014\uff5a\015\uff5a\026\uff5a\027\uff5a" +
    "\036\uff5a\037\uff5a\040\uff5a\044\uff5a\045\uff5a\063\uff5a\064" +
    "\uff5a\065\uff5a\067\uff5a\071\uff5a\072\uff5a\073\uff5a\076\uff5a" +
    "\001\002\000\050\003\uff5b\010\uff5b\014\uff5b\015\uff5b\026" +
    "\uff5b\027\uff5b\036\uff5b\037\uff5b\040\uff5b\044\uff5b\045\uff5b" +
    "\063\uff5b\064\uff5b\065\uff5b\067\uff5b\071\uff5b\072\uff5b\073" +
    "\uff5b\076\uff5b\001\002\000\050\003\uff5c\010\uff5c\014\uff5c" +
    "\015\uff5c\026\uff5c\027\uff5c\036\uff5c\037\uff5c\040\uff5c\044" +
    "\uff5c\045\uff5c\063\uff5c\064\uff5c\065\uff5c\067\uff5c\071\uff5c" +
    "\072\uff5c\073\uff5c\076\uff5c\001\002\000\004\022\217\001" +
    "\002\000\004\030\u0113\001\002\000\004\031\u010c\001\002" +
    "\000\004\041\u0109\001\002\000\042\003\uff85\010\uff85\014" +
    "\uff85\015\uff85\026\uff85\027\uff85\036\uff85\037\uff85\040\uff85" +
    "\044\uff85\045\uff85\063\uff85\064\uff85\071\uff85\072\uff85\076" +
    "\uff85\001\002\000\004\020\347\001\002\000\042\003\uff84" +
    "\010\uff84\014\uff84\015\uff84\026\uff84\027\uff84\036\uff84\037" +
    "\uff84\040\uff84\044\uff84\045\uff84\063\uff84\064\uff84\071\uff84" +
    "\072\uff84\076\uff84\001\002\000\004\017\u0106\001\002\000" +
    "\004\065\u0104\001\002\000\004\066\263\001\002\000\004" +
    "\064\377\001\002\000\004\063\374\001\002\000\004\072" +
    "\372\001\002\000\042\003\uff86\010\uff86\014\uff86\015\uff86" +
    "\026\uff86\027\uff86\036\uff86\037\uff86\040\uff86\044\uff86\045" +
    "\uff86\063\uff86\064\uff86\071\uff86\072\uff86\076\uff86\001\002" +
    "\000\040\003\045\010\051\014\037\015\032\026\035\027" +
    "\033\036\053\037\040\040\041\044\052\045\047\063\042" +
    "\064\044\071\uff8d\076\046\001\002\000\004\071\uffa4\001" +
    "\002\000\004\072\375\001\002\000\040\003\045\010\051" +
    "\014\037\015\032\026\035\027\033\036\053\037\040\040" +
    "\041\044\052\045\047\063\042\064\044\071\uff8d\076\046" +
    "\001\002\000\004\071\uffa2\001\002\000\004\072\u0100\001" +
    "\002\000\040\003\045\010\051\014\037\015\032\026\035" +
    "\027\033\036\053\037\040\040\041\044\052\045\047\063" +
    "\042\064\044\071\uff8d\076\046\001\002\000\004\071\uffa0" +
    "\001\002\000\040\003\045\010\051\014\037\015\032\026" +
    "\035\027\033\036\053\037\040\040\041\044\052\045\047" +
    "\063\042\064\044\071\uff8d\076\046\001\002\000\004\071" +
    "\uff9a\001\002\000\024\003\102\033\075\042\107\055\103" +
    "\060\111\066\105\074\100\075\077\076\112\001\002\000" +
    "\042\003\uff67\010\uff67\014\uff67\015\uff67\026\uff67\027\uff67" +
    "\036\uff67\037\uff67\040\uff67\044\uff67\045\uff67\063\uff67\064" +
    "\uff67\071\uff67\072\uff67\076\uff67\001\002\000\004\020\347" +
    "\001\002\000\050\003\uff61\010\uff61\014\uff61\015\uff61\026" +
    "\uff61\027\uff61\036\uff61\037\uff61\040\uff61\044\uff61\045\uff61" +
    "\063\uff61\064\uff61\065\uff61\067\uff61\071\uff61\072\uff61\073" +
    "\uff61\076\uff61\001\002\000\050\003\uff5f\010\uff5f\014\uff5f" +
    "\015\uff5f\026\uff5f\027\uff5f\036\uff5f\037\uff5f\040\uff5f\044" +
    "\uff5f\045\uff5f\063\uff5f\064\uff5f\065\uff5f\067\uff5f\071\uff5f" +
    "\072\uff5f\073\uff5f\076\uff5f\001\002\000\004\072\u010a\001" +
    "\002\000\040\003\045\010\051\014\037\015\032\026\035" +
    "\027\033\036\053\037\040\040\041\044\052\045\047\063" +
    "\042\064\044\071\uff8d\076\046\001\002\000\004\071\uff98" +
    "\001\002\000\010\003\u010e\022\217\032\u0110\001\002\000" +
    "\004\072\u0111\001\002\000\042\003\uff8a\010\uff8a\014\uff8a" +
    "\015\uff8a\026\uff8a\027\uff8a\036\uff8a\037\uff8a\040\uff8a\044" +
    "\uff8a\045\uff8a\063\uff8a\064\uff8a\071\uff8a\072\uff8a\076\uff8a" +
    "\001\002\000\042\003\uff8b\010\uff8b\014\uff8b\015\uff8b\026" +
    "\uff8b\027\uff8b\036\uff8b\037\uff8b\040\uff8b\044\uff8b\045\uff8b" +
    "\063\uff8b\064\uff8b\071\uff8b\072\uff8b\076\uff8b\001\002\000" +
    "\042\003\uff8c\010\uff8c\014\uff8c\015\uff8c\026\uff8c\027\uff8c" +
    "\036\uff8c\037\uff8c\040\uff8c\044\uff8c\045\uff8c\063\uff8c\064" +
    "\uff8c\071\uff8c\072\uff8c\076\uff8c\001\002\000\040\003\045" +
    "\010\051\014\037\015\032\026\035\027\033\036\053\037" +
    "\040\040\041\044\052\045\047\063\042\064\044\071\uff8d" +
    "\076\046\001\002\000\004\071\uff92\001\002\000\010\003" +
    "\u010e\022\217\032\u0110\001\002\000\004\072\u0115\001\002" +
    "\000\040\003\045\010\051\014\037\015\032\026\035\027" +
    "\033\036\053\037\040\040\041\044\052\045\047\063\042" +
    "\064\044\071\uff8d\076\046\001\002\000\004\071\uff90\001" +
    "\002\000\004\072\u0118\001\002\000\040\003\045\010\051" +
    "\014\037\015\032\026\035\027\033\036\053\037\040\040" +
    "\041\044\052\045\047\063\042\064\044\071\uff8d\076\046" +
    "\001\002\000\004\071\uff8e\001\002\000\004\072\uff9d\001" +
    "\002\000\042\003\uffd2\010\uffd2\014\uffd2\015\uffd2\026\uffd2" +
    "\027\uffd2\036\uffd2\037\uffd2\040\uffd2\044\uffd2\045\uffd2\063" +
    "\uffd2\064\uffd2\071\uffd2\072\uffd4\076\uffd2\001\002\000\040" +
    "\003\045\010\051\014\037\015\032\026\035\027\033\036" +
    "\053\037\040\040\041\044\052\045\047\063\042\064\044" +
    "\071\uff8d\076\046\001\002\000\004\072\u011e\001\002\000" +
    "\040\003\045\010\051\014\037\015\032\026\035\027\033" +
    "\036\053\037\040\040\041\044\052\045\047\063\042\064" +
    "\044\071\uff8d\076\046\001\002\000\004\071\uffd3\001\002" +
    "\000\004\071\uffd1\001\002\000\004\072\u0122\001\002\000" +
    "\040\003\045\010\051\014\037\015\032\026\035\027\033" +
    "\036\053\037\040\040\041\044\052\045\047\063\042\064" +
    "\044\071\uff8d\076\046\001\002\000\004\071\uff9c\001\002" +
    "\000\040\003\045\010\051\014\037\015\032\026\035\027" +
    "\033\036\053\037\040\040\041\044\052\045\047\063\042" +
    "\064\044\071\uff8d\076\046\001\002\000\040\003\045\010" +
    "\051\014\037\015\032\026\035\027\033\036\053\037\040" +
    "\040\041\044\052\045\047\063\042\064\044\071\uff8d\076" +
    "\046\001\002\000\004\071\uffac\001\002\000\004\071\uffaa" +
    "\001\002\000\004\072\uff9f\001\002\000\042\003\uffd6\010" +
    "\uffd6\014\uffd6\015\uffd6\026\uffd6\027\uffd6\036\uffd6\037\uffd6" +
    "\040\uffd6\044\uffd6\045\uffd6\063\uffd6\064\uffd6\071\uffd6\072" +
    "\uffd8\076\uffd6\001\002\000\040\003\045\010\051\014\037" +
    "\015\032\026\035\027\033\036\053\037\040\040\041\044" +
    "\052\045\047\063\042\064\044\071\uff8d\076\046\001\002" +
    "\000\004\072\u012c\001\002\000\040\003\045\010\051\014" +
    "\037\015\032\026\035\027\033\036\053\037\040\040\041" +
    "\044\052\045\047\063\042\064\044\071\uff8d\076\046\001" +
    "\002\000\004\071\uffd7\001\002\000\004\071\uffd5\001\002" +
    "\000\004\072\u0130\001\002\000\040\003\045\010\051\014" +
    "\037\015\032\026\035\027\033\036\053\037\040\040\041" +
    "\044\052\045\047\063\042\064\044\071\uff8d\076\046\001" +
    "\002\000\004\071\uff9e\001\002\000\042\003\uffb1\010\uffb1" +
    "\014\uffb1\015\uffb1\026\uffb1\027\uffb1\036\uffb1\037\uffb1\040" +
    "\uffb1\044\uffb1\045\uffb1\063\uffb1\064\uffb1\071\uffb1\072\u0134" +
    "\076\uffb1\001\002\000\040\003\045\010\051\014\037\015" +
    "\032\026\035\027\033\036\053\037\040\040\041\044\052" +
    "\045\047\063\042\064\044\071\uff8d\076\046\001\002\000" +
    "\040\003\045\010\051\014\037\015\032\026\035\027\033" +
    "\036\053\037\040\040\041\044\052\045\047\063\042\064" +
    "\044\071\uff8d\076\046\001\002\000\004\071\uffb2\001\002" +
    "\000\004\071\uffb0\001\002\000\004\072\uff97\001\002\000" +
    "\042\003\uffc0\010\uffc0\014\uffc0\015\uffc0\026\uffc0\027\uffc0" +
    "\036\uffc0\037\uffc0\040\uffc0\044\uffc0\045\uffc0\063\uffc0\064" +
    "\uffc0\071\uffc0\072\u0139\076\uffc0\001\002\000\040\003\045" +
    "\010\051\014\037\015\032\026\035\027\033\036\053\037" +
    "\040\040\041\044\052\045\047\063\042\064\044\071\uff8d" +
    "\076\046\001\002\000\040\003\045\010\051\014\037\015" +
    "\032\026\035\027\033\036\053\037\040\040\041\044\052" +
    "\045\047\063\042\064\044\071\uff8d\076\046\001\002\000" +
    "\004\071\uffbf\001\002\000\004\071\uffc1\001\002\000\004" +
    "\072\u013e\001\002\000\040\003\045\010\051\014\037\015" +
    "\032\026\035\027\033\036\053\037\040\040\041\044\052" +
    "\045\047\063\042\064\044\071\uff8d\076\046\001\002\000" +
    "\004\071\uff96\001\002\000\042\003\uffae\010\uffae\014\uffae" +
    "\015\uffae\026\uffae\027\uffae\036\uffae\037\uffae\040\uffae\044" +
    "\uffae\045\uffae\063\uffae\064\uffae\071\uffae\072\u0142\076\uffae" +
    "\001\002\000\040\003\045\010\051\014\037\015\032\026" +
    "\035\027\033\036\053\037\040\040\041\044\052\045\047" +
    "\063\042\064\044\071\uff8d\076\046\001\002\000\040\003" +
    "\045\010\051\014\037\015\032\026\035\027\033\036\053" +
    "\037\040\040\041\044\052\045\047\063\042\064\044\071" +
    "\uff8d\076\046\001\002\000\004\071\uffaf\001\002\000\004" +
    "\071\uffad\001\002\000\040\003\045\010\051\014\037\015" +
    "\032\026\035\027\033\036\053\037\040\040\041\044\052" +
    "\045\047\063\042\064\044\071\uff8d\076\046\001\002\000" +
    "\040\003\045\010\051\014\037\015\032\026\035\027\033" +
    "\036\053\037\040\040\041\044\052\045\047\063\042\064" +
    "\044\071\uff8d\076\046\001\002\000\004\071\uffc7\001\002" +
    "\000\004\071\uffc9\001\002\000\010\003\u010e\022\217\032" +
    "\u0110\001\002\000\010\003\u010e\022\217\032\u0110\001\002" +
    "\000\042\003\uffbd\010\uffbd\014\uffbd\015\uffbd\026\uffbd\027" +
    "\uffbd\036\uffbd\037\uffbd\040\uffbd\044\uffbd\045\uffbd\063\uffbd" +
    "\064\uffbd\071\uffbd\072\u014c\076\uffbd\001\002\000\040\003" +
    "\045\010\051\014\037\015\032\026\035\027\033\036\053" +
    "\037\040\040\041\044\052\045\047\063\042\064\044\071" +
    "\uff8d\076\046\001\002\000\040\003\045\010\051\014\037" +
    "\015\032\026\035\027\033\036\053\037\040\040\041\044" +
    "\052\045\047\063\042\064\044\071\uff8d\076\046\001\002" +
    "\000\004\071\uffbc\001\002\000\004\071\uffbe\001\002\000" +
    "\042\003\uffb7\010\uffb7\014\uffb7\015\uffb7\026\uffb7\027\uffb7" +
    "\036\uffb7\037\uffb7\040\uffb7\044\uffb7\045\uffb7\063\uffb7\064" +
    "\uffb7\071\uffb7\072\u0152\076\uffb7\001\002\000\040\003\045" +
    "\010\051\014\037\015\032\026\035\027\033\036\053\037" +
    "\040\040\041\044\052\045\047\063\042\064\044\071\uff8d" +
    "\076\046\001\002\000\040\003\045\010\051\014\037\015" +
    "\032\026\035\027\033\036\053\037\040\040\041\044\052" +
    "\045\047\063\042\064\044\071\uff8d\076\046\001\002\000" +
    "\004\071\uffb8\001\002\000\004\071\uffb6\001\002\000\012" +
    "\003\uffea\043\u0157\071\u0159\076\uffea\001\002\000\004\002" +
    "\ufff0\001\002\000\006\003\u015b\076\u015c\001\002\000\006" +
    "\003\u015b\076\u015c\001\002\000\006\002\uffeb\004\u015a\001" +
    "\002\000\004\002\uffed\001\002\000\004\066\uffe6\001\002" +
    "\000\004\066\uffe8\001\002\000\012\003\uffea\043\u0157\071" +
    "\u0159\076\uffea\001\002\000\004\002\uffe9\001\002\000\004" +
    "\066\u0160\001\002\000\010\003\u0162\067\uffe1\076\u0163\001" +
    "\002\000\004\067\u0168\001\002\000\006\017\uff62\020\uff60" +
    "\001\002\000\004\017\uff64\001\002\000\006\067\uffe2\073" +
    "\uffe4\001\002\000\004\073\u0166\001\002\000\010\003\u0162" +
    "\067\uffe1\076\u0163\001\002\000\004\067\uffe3\001\002\000" +
    "\004\070\u0169\001\002\000\040\003\045\010\051\014\037" +
    "\015\032\026\035\027\033\036\053\037\040\040\041\044" +
    "\052\045\047\063\042\064\044\071\uff8d\076\046\001\002" +
    "\000\004\071\u016b\001\002\000\012\003\uffe7\043\uffe7\071" +
    "\uffe7\076\uffe7\001\002\000\004\066\u016d\001\002\000\010" +
    "\003\u0162\067\uffe1\076\u0163\001\002\000\004\067\u016f\001" +
    "\002\000\004\070\u0170\001\002\000\040\003\045\010\051" +
    "\014\037\015\032\026\035\027\033\036\053\037\040\040" +
    "\041\044\052\045\047\063\042\064\044\071\uff8d\076\046" +
    "\001\002\000\004\071\u0172\001\002\000\012\003\uffe5\043" +
    "\uffe5\071\uffe5\076\uffe5\001\002\000\012\003\uffea\043\u0157" +
    "\071\u0159\076\uffea\001\002\000\004\002\uffec\001\002\000" +
    "\010\003\u010e\022\217\032\u0110\001\002\000\010\003\u010e" +
    "\022\217\032\u0110\001\002\000\042\003\uffba\010\uffba\014" +
    "\uffba\015\uffba\026\uffba\027\uffba\036\uffba\037\uffba\040\uffba" +
    "\044\uffba\045\uffba\063\uffba\064\uffba\071\uffba\072\u0178\076" +
    "\uffba\001\002\000\040\003\045\010\051\014\037\015\032" +
    "\026\035\027\033\036\053\037\040\040\041\044\052\045" +
    "\047\063\042\064\044\071\uff8d\076\046\001\002\000\040" +
    "\003\045\010\051\014\037\015\032\026\035\027\033\036" +
    "\053\037\040\040\041\044\052\045\047\063\042\064\044" +
    "\071\uff8d\076\046\001\002\000\004\071\uffb9\001\002\000" +
    "\004\071\uffbb\001\002\000\042\003\uffb4\010\uffb4\014\uffb4" +
    "\015\uffb4\026\uffb4\027\uffb4\036\uffb4\037\uffb4\040\uffb4\044" +
    "\uffb4\045\uffb4\063\uffb4\064\uffb4\071\uffb4\072\u017e\076\uffb4" +
    "\001\002\000\040\003\045\010\051\014\037\015\032\026" +
    "\035\027\033\036\053\037\040\040\041\044\052\045\047" +
    "\063\042\064\044\071\uff8d\076\046\001\002\000\040\003" +
    "\045\010\051\014\037\015\032\026\035\027\033\036\053" +
    "\037\040\040\041\044\052\045\047\063\042\064\044\071" +
    "\uff8d\076\046\001\002\000\004\071\uffb5\001\002\000\004" +
    "\071\uffb3\001\002\000\006\071\uffa7\072\u0183\001\002\000" +
    "\004\071\uffa9\001\002\000\004\071\uffa6\001\002\000\004" +
    "\071\u0185\001\002\000\012\003\uffea\043\u0157\071\u0159\076" +
    "\uffea\001\002\000\004\002\uffee\001\002\000\004\002\ufff1" +
    "\001\002\000\012\003\223\023\226\024\222\025\224\001" +
    "\002\000\044\003\uff77\010\uff77\014\uff77\015\uff77\026\uff77" +
    "\027\uff77\036\uff77\037\uff77\040\uff77\044\uff77\045\uff77\063" +
    "\uff77\064\uff77\067\uff77\070\uff77\071\uff77\076\uff77\001\002" +
    "\000\024\003\102\033\075\042\107\055\103\060\111\066" +
    "\105\074\100\075\077\076\112\001\002\000\012\003\223" +
    "\023\226\024\222\025\224\001\002\000\044\003\uff75\010" +
    "\uff75\014\uff75\015\uff75\026\uff75\027\uff75\036\uff75\037\uff75" +
    "\040\uff75\044\uff75\045\uff75\063\uff75\064\uff75\067\uff75\070" +
    "\uff75\071\uff75\076\uff75\001\002\000\004\067\u018e\001\002" +
    "\000\042\003\uffef\010\uffef\014\uffef\015\uffef\026\uffef\027" +
    "\uffef\036\uffef\037\uffef\040\uffef\044\uffef\045\uffef\063\uffef" +
    "\064\uffef\070\030\071\uffef\076\uffef\001\002\000\004\002" +
    "\ufff3\001\002\000\004\066\u0191\001\002\000\006\003\022" +
    "\021\023\001\002\000\004\067\u0193\001\002\000\042\003" +
    "\uffef\010\uffef\014\uffef\015\uffef\026\uffef\027\uffef\036\uffef" +
    "\037\uffef\040\uffef\044\uffef\045\uffef\063\uffef\064\uffef\070" +
    "\030\071\uffef\076\uffef\001\002\000\004\002\ufff5\001\002" +
    "\000\004\002\ufffd\001\002\000\004\070\u0197\001\002\000" +
    "\006\003\015\005\017\001\002\000\004\002\ufff8\001\002" +
    "\000\004\076\u019a\001\002\000\004\070\ufffb\001\002\000" +
    "\004\070\u019c\001\002\000\006\003\015\005\017\001\002" +
    "\000\004\002\ufffa\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u019b\000\004\002\005\001\001\000\004\051\u0198\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\053\u0195\001\001\000\006\047\012\050\011\001" +
    "\001\000\004\003\u0194\001\001\000\002\001\001\000\004" +
    "\003\015\001\001\000\004\054\u018f\001\001\000\002\001" +
    "\001\000\004\055\017\001\001\000\004\006\u018c\001\001" +
    "\000\004\006\023\001\001\000\004\132\u0189\001\001\000" +
    "\016\021\u0187\024\075\026\112\030\107\032\105\034\103" +
    "\001\001\000\004\056\024\001\001\000\006\004\u0186\057" +
    "\026\001\001\000\006\004\030\057\026\001\001\000\012" +
    "\005\u0183\020\035\023\042\044\047\001\001\000\012\005" +
    "\033\020\035\023\042\044\047\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\077\u0145\001\001\000\004\007\u013f" +
    "\001\001\000\002\001\001\000\004\007\u0131\001\001\000" +
    "\002\001\001\000\004\110\u0123\001\001\000\002\001\001" +
    "\000\036\012\361\013\357\036\370\111\367\112\366\113" +
    "\365\116\364\117\356\122\355\123\354\124\353\135\363" +
    "\140\362\141\360\001\001\000\010\134\325\136\323\137" +
    "\322\001\001\000\006\037\316\040\317\001\001\000\006" +
    "\011\302\074\303\001\001\000\006\040\261\045\260\001" +
    "\001\000\010\012\071\013\065\036\064\001\001\000\002" +
    "\001\001\000\004\121\061\001\001\000\004\100\056\001" +
    "\001\000\012\005\060\020\035\023\042\044\047\001\001" +
    "\000\012\005\057\020\035\023\042\044\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\005\063\020\035\023\042\044\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\126\254" +
    "\001\001\000\004\125\240\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\021\100\024\075" +
    "\026\112\030\107\032\105\034\103\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\024\213\001" +
    "\001\000\004\163\177\001\001\000\016\021\175\024\075" +
    "\026\112\030\107\032\105\034\103\001\001\000\004\156" +
    "\161\001\001\000\004\014\157\001\001\000\004\147\130" +
    "\001\001\000\004\024\127\001\001\000\002\001\001\000" +
    "\004\142\113\001\001\000\004\025\114\001\001\000\002" +
    "\001\001\000\004\143\123\001\001\000\004\145\117\001" +
    "\001\000\014\024\075\026\120\030\107\032\105\034\103" +
    "\001\001\000\004\146\121\001\001\000\004\025\122\001" +
    "\001\000\002\001\001\000\014\024\075\026\124\030\107" +
    "\032\105\034\103\001\001\000\004\144\125\001\001\000" +
    "\004\025\126\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\027\135\001\001\000\004\153\152\001\001\000" +
    "\004\152\150\001\001\000\004\150\146\001\001\000\004" +
    "\151\144\001\001\000\002\001\001\000\004\154\142\001" +
    "\001\000\004\155\140\001\001\000\012\024\075\030\141" +
    "\032\105\034\103\001\001\000\002\001\001\000\012\024" +
    "\075\030\143\032\105\034\103\001\001\000\002\001\001" +
    "\000\012\024\075\030\145\032\105\034\103\001\001\000" +
    "\002\001\001\000\012\024\075\030\147\032\105\034\103" +
    "\001\001\000\002\001\001\000\012\024\075\030\151\032" +
    "\105\034\103\001\001\000\002\001\001\000\012\024\075" +
    "\030\153\032\105\034\103\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\031\162\001\001\000" +
    "\002\001\001\000\004\161\171\001\001\000\004\157\165" +
    "\001\001\000\010\024\075\032\166\034\103\001\001\000" +
    "\004\160\167\001\001\000\004\031\170\001\001\000\002" +
    "\001\001\000\010\024\075\032\172\034\103\001\001\000" +
    "\004\162\173\001\001\000\004\031\174\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\033" +
    "\202\001\001\000\004\164\207\001\001\000\004\166\203" +
    "\001\001\000\002\001\001\000\006\024\075\034\204\001" +
    "\001\000\004\167\205\001\001\000\004\033\206\001\001" +
    "\000\002\001\001\000\006\024\075\034\210\001\001\000" +
    "\004\165\211\001\001\000\004\033\212\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\215\001\001\000" +
    "\002\001\001\000\016\021\217\024\075\026\112\030\107" +
    "\032\105\034\103\001\001\000\004\133\220\001\001\000" +
    "\004\010\224\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\232\001\001\000\002\001\001\000\016\021\234\024" +
    "\075\026\112\030\107\032\105\034\103\001\001\000\002" +
    "\001\001\000\016\021\236\024\075\026\112\030\107\032" +
    "\105\034\103\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\021\243\022\242\024\075\026" +
    "\112\030\107\032\105\034\103\001\001\000\002\001\001" +
    "\000\006\127\245\130\244\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\021\243\022\247\024\075\026\112" +
    "\030\107\032\105\034\103\001\001\000\002\001\001\000" +
    "\004\131\251\001\001\000\020\021\243\022\252\024\075" +
    "\026\112\030\107\032\105\034\103\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\021\243" +
    "\022\256\024\075\026\112\030\107\032\105\034\103\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\005\301" +
    "\020\035\023\042\044\047\001\001\000\006\041\267\171" +
    "\266\001\001\000\016\021\263\024\075\026\112\030\107" +
    "\032\105\034\103\001\001\000\004\170\264\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\046\270\001\001\000\002\001\001\000\006\041\273\171" +
    "\266\001\001\000\006\040\261\045\274\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\005\276\020\035\023" +
    "\042\044\047\001\001\000\004\172\277\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\075" +
    "\311\076\312\001\001\000\012\005\310\020\035\023\042" +
    "\044\047\001\001\000\016\021\307\024\075\026\112\030" +
    "\107\032\105\034\103\001\001\000\012\005\306\020\035" +
    "\023\042\044\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\005\313" +
    "\020\035\023\042\044\047\001\001\000\002\001\001\000" +
    "\012\005\315\020\035\023\042\044\047\001\001\000\002" +
    "\001\001\000\012\005\321\020\035\023\042\044\047\001" +
    "\001\000\006\041\320\171\266\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\021\343\024" +
    "\075\026\112\030\107\032\105\034\103\001\001\000\006" +
    "\064\337\065\336\001\001\000\002\001\001\000\006\066" +
    "\330\067\327\001\001\000\012\005\333\020\035\023\042" +
    "\044\047\001\001\000\002\001\001\000\012\005\332\020" +
    "\035\023\042\044\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\021\335\024\075\026\112\030\107\032" +
    "\105\034\103\001\001\000\002\001\001\000\012\005\342" +
    "\020\035\023\042\044\047\001\001\000\002\001\001\000" +
    "\012\005\341\020\035\023\042\044\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\042" +
    "\345\001\001\000\002\001\001\000\004\043\347\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\u0116\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\042\u0107\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\040\261\045\u0101\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\005\372\020\035\023\042\044\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\005\375" +
    "\020\035\023\042\044\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\005\u0100\020\035\023\042\044\047" +
    "\001\001\000\002\001\001\000\012\005\u0102\020\035\023" +
    "\042\044\047\001\001\000\002\001\001\000\016\021\u0104" +
    "\024\075\026\112\030\107\032\105\034\103\001\001\000" +
    "\002\001\001\000\004\042\u0106\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\005\u010a\020" +
    "\035\023\042\044\047\001\001\000\002\001\001\000\006" +
    "\007\u010e\035\u010c\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\005\u0111" +
    "\020\035\023\042\044\047\001\001\000\002\001\001\000" +
    "\006\007\u010e\035\u0113\001\001\000\002\001\001\000\012" +
    "\005\u0115\020\035\023\042\044\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\005\u0118\020\035\023\042" +
    "\044\047\001\001\000\002\001\001\000\004\115\u0120\001" +
    "\001\000\006\072\u011c\073\u011b\001\001\000\012\005\u011f" +
    "\020\035\023\042\044\047\001\001\000\002\001\001\000" +
    "\012\005\u011e\020\035\023\042\044\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\005" +
    "\u0122\020\035\023\042\044\047\001\001\000\002\001\001" +
    "\000\012\005\u0126\020\035\023\042\044\047\001\001\000" +
    "\012\005\u0125\020\035\023\042\044\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\114\u012e\001\001\000" +
    "\006\070\u012a\071\u0129\001\001\000\012\005\u012d\020\035" +
    "\023\042\044\047\001\001\000\002\001\001\000\012\005" +
    "\u012c\020\035\023\042\044\047\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\005\u0130\020" +
    "\035\023\042\044\047\001\001\000\002\001\001\000\004" +
    "\106\u0132\001\001\000\012\005\u0135\020\035\023\042\044" +
    "\047\001\001\000\012\005\u0134\020\035\023\042\044\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\120" +
    "\u013c\001\001\000\004\101\u0139\001\001\000\012\005\u013b" +
    "\020\035\023\042\044\047\001\001\000\012\005\u013a\020" +
    "\035\023\042\044\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\005\u013e\020\035\023" +
    "\042\044\047\001\001\000\002\001\001\000\004\107\u0140" +
    "\001\001\000\012\005\u0143\020\035\023\042\044\047\001" +
    "\001\000\012\005\u0142\020\035\023\042\044\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\005\u0147\020" +
    "\035\023\042\044\047\001\001\000\012\005\u0146\020\035" +
    "\023\042\044\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\007\u010e\035\u014f\001\001\000\006\007\u010e" +
    "\035\u014a\001\001\000\004\102\u014c\001\001\000\012\005" +
    "\u014e\020\035\023\042\044\047\001\001\000\012\005\u014d" +
    "\020\035\023\042\044\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\104\u0150\001\001\000\012\005\u0153" +
    "\020\035\023\042\044\047\001\001\000\012\005\u0152\020" +
    "\035\023\042\044\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\016\u0155\060\u0157\001\001\000\002\001" +
    "\001\000\004\015\u0172\001\001\000\004\015\u015c\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\062\u016b\001" +
    "\001\000\004\061\u015e\001\001\000\006\016\u015d\060\u0157" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\017" +
    "\u0160\044\u0163\001\001\000\002\001\001\000\006\140\362" +
    "\141\360\001\001\000\004\137\322\001\001\000\004\063" +
    "\u0164\001\001\000\002\001\001\000\006\017\u0166\044\u0163" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\005" +
    "\u0169\020\035\023\042\044\047\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\017\u016d\044" +
    "\u0163\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\005\u0170\020\035\023\042\044\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\016\u0173\060\u0157\001\001" +
    "\000\002\001\001\000\006\007\u010e\035\u017b\001\001\000" +
    "\006\007\u010e\035\u0176\001\001\000\004\103\u0178\001\001" +
    "\000\012\005\u017a\020\035\023\042\044\047\001\001\000" +
    "\012\005\u0179\020\035\023\042\044\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\105\u017c\001\001\000" +
    "\012\005\u017f\020\035\023\042\044\047\001\001\000\012" +
    "\005\u017e\020\035\023\042\044\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\016\u0185\060" +
    "\u0157\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\u0188\001\001\000\002\001\001\000\016\021\u018a\024" +
    "\075\026\112\030\107\032\105\034\103\001\001\000\004" +
    "\010\u018b\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\004\u018e\057\026\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\u0191\001\001\000\002\001\001\000" +
    "\006\004\u0193\057\026\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\003\u0197\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\052\u019a\001\001" +
    "\000\002\001\001\000\004\003\u019c\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintaxPrueba$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintaxPrueba$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintaxPrueba$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private String ambito;
    private Symbol s;
    private Object valActual = 0;
    private boolean aux1 = false, enFuncion = false;
    private int aux2 = 0, aux3 = 0, aux4 = 0, anidamiento = 0;
    private herramientas.Funcion funcionActual;
    private java.util.ArrayList<herramientas.Funcion> funcionesLlamadas = new java.util.ArrayList<>();
    private java.util.ArrayList<Integer> anidamientos = new java.util.ArrayList<>();
    
    private int agregarAnidamiento(){
        if(anidamiento == 0 && anidamientos.size() == 0){
            anidamientos.add(1);
            anidamientos.add(0);
            anidamiento++;
            return 1;
        }
        anidamientos.set(anidamiento, anidamientos.get(anidamiento) + 1);
        anidamientos.add(0);
        return anidamientos.get(anidamiento++);
    }
    private void quitarAnidamiento(){
        if(anidamiento == 0){
            ambito = ambito.split(":")[0];
            //anidamientos.clear();
            return;
        }
        if(anidamiento == 1){
            ambito = ambito.split(":")[0];
            anidamiento--;
            return;
        }
        anidamientos.remove(anidamiento--);
        anidamientos.remove(anidamiento--);
        String cadena = "";
        for(int i: anidamientos) cadena += ":" + i;
        ambito = ambito.split(":")[0] + cadena;
    }
    public void syntax_error(Symbol s){
        this.s = s;
    }

    private void reportarError(String codigo, String encontrado){
        if(this.s == null) this.s = cur_token;
        FrmPrincipal.errores.agregarErrorSintactico(codigo, s.left + 1, sym.terminalNames[s.sym], encontrado);
    }

    private void reportarErrorSemantico(String codigo, String... valores){
        if(this.s == null) this.s = cur_token;
        FrmPrincipal.errores.agregarErrorSemantico(codigo, s.left + 1, valores);
    }

    public void report_fatal_error(String message, Object info){
        reportarError("ES8", null);
    }

    public SintaxPrueba(Lexer lexer){
        super(lexer);
    }

    private void ponerValor(String identificador, Object valor){
        if(valor == null || identificador == null) return;
        String tipo = getTipo(identificador);
        if(tipo == null) {
            reportarErrorSemantico("ESM1", identificador);
            return;
        }

        if(tipo.equals("error")){
            reportarErrorSemantico("ESM6", identificador);
            return;
        }

        if(tipo.equals("logico") && !valor.getClass().getName().equals("java.lang.Boolean")){
            reportarErrorSemantico("ESM5", "entero", identificador, "logico");
            return;
        }

        if(tipo.equals("entero") && !valor.getClass().getName().equals("java.lang.Integer")){
            reportarErrorSemantico("ESM5", "logico", identificador, "entero");
            return;
        }
        FrmPrincipal.tablaSimbolos.agregarValor(new LlaveTabla(identificador, ambito), valor);
    }

    private void verificarIdentificador(String id, boolean declarando){
        if(!FrmPrincipal.tablaSimbolos.existe(new LlaveTabla(id, ambito)) && !declarando){
            reportarErrorSemantico("ESM1", id);
            agregarSimbolo(id, -1);
        }
        if(FrmPrincipal.tablaSimbolos.existe(new LlaveTabla(id, ambito)) && declarando){
            reportarErrorSemantico("ESM4", id);
        }
        if(FrmPrincipal.funciones.existe(id)){
            reportarErrorSemantico("ESM4", id);
        }
    }

    private Object getValor(String identificador){
        return FrmPrincipal.tablaSimbolos.getValor(new LlaveTabla(identificador, ambito));
    }

    private String getTipo(String identificador){
        return FrmPrincipal.tablaSimbolos.getTipo(new LlaveTabla(identificador, ambito));
    }

    private void ponerTipoDato(String identificador, String tipo){
        FrmPrincipal.tablaSimbolos.agregarTipo(new LlaveTabla(identificador, ambito), tipo);
    }

    private void agregarSimbolo(String identificador, int linea){
        FrmPrincipal.tablaSimbolos.agregarSimbolo(new LlaveTabla(identificador, ambito), linea);
    }

    private void agregarFuncion(String id){
        verificarIdentificador(id, true);
        FrmPrincipal.funciones.agregarFuncion(id);
    }

    private void agregarParametro(String parametro){
        FrmPrincipal.funciones.agregarParametro(ambito, new LlaveTabla(parametro, ambito));
    }

    private Integer validarEntero(String id){
        switch(getTipo(id)){
            case "logico" -> {
                reportarErrorSemantico("ESM2", id, "logico");
                return 0;
            }
            case "entero" -> {
                
                return (int) verificarValor(id);
            }
            default -> {
                reportarErrorSemantico("ESM2", id, "sin tipo");
                return 0;
            }
        }
    }

    private Object verificarValor(String id){
        Object valor = getValor(id);
        if(valor == null){
            reportarErrorSemantico("ESM3", id);
        }
        return valor;
    }

    private void agregarExpresion(Object expresion){
        funcionActual.agregarParametro(expresion);
    }
    private void comprobarFunciones(){
        funcionesLlamadas.forEach(funcion -> funcion.comprobarParametros());
    }

    private void guardarFuncion(){
        funcionesLlamadas.add(funcionActual);
    }

    private int getEntero(Object v){
        if(v == null) return 0;
        if(v instanceof Integer) return Integer.parseInt(v.toString());
        else {
            reportarErrorSemantico("ESM11", "Lógico", "Entera");
            return 0;
        }
    }

    private boolean getLogico(Object v){
        if(v == null) return false;
        if(v instanceof Boolean) return Boolean.parseBoolean(v.toString());
        else {
            reportarErrorSemantico("ESM11", "Entero", "Lógica");
            return false;
        }
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintaxPrueba$actions {
  private final SintaxPrueba parser;

  /** Constructor */
  CUP$SintaxPrueba$actions(SintaxPrueba parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintaxPrueba$do_action_part00000000(
    int                        CUP$SintaxPrueba$act_num,
    java_cup.runtime.lr_parser CUP$SintaxPrueba$parser,
    java.util.Stack            CUP$SintaxPrueba$stack,
    int                        CUP$SintaxPrueba$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintaxPrueba$result;

      /* select the action based on the action number */
      switch (CUP$SintaxPrueba$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		RESULT = start_val;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintaxPrueba$parser.done_parsing();
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;

            ambito = "comienzo";
            agregarFuncion("comienzo");
        
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$0",37, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= INICIO IDENTIFICADOR NT$0 LLAVE_ABIERTA inicio1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$1 ::= 
            {
              Object RESULT =null;

            ambito = "comienzo";
            agregarFuncion("comienzo");
            s=cur_token;reportarError("ES11", "No se ha encontrado \"{\"");
        
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$1",38, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // inicio ::= INICIO IDENTIFICADOR NT$1 inicio1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$2 ::= 
            {
              Object RESULT =null;
s=cur_token;reportarError("ES11", "No se ha encontrado \"inicio\"");
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$2",39, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$3 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

            ambito = "comienzo";
            agregarFuncion("comienzo");
        
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$3",40, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // inicio ::= error NT$2 IDENTIFICADOR NT$3 LLAVE_ABIERTA inicio1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$4 ::= 
            {
              Object RESULT =null;

            s=cur_token;
            ambito = "comienzo";
            agregarFuncion("comienzo");
            reportarError("ES11", "No se ha encontrado el nombre del programa");
        
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$4",41, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // inicio ::= INICIO error NT$4 LLAVE_ABIERTA inicio1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // inicio1 ::= COMIENZO PARENTESIS_ABIERTO tiempo_cada PARENTESIS_CERRADO inicio2 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("inicio1",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$5 ::= 
            {
              Object RESULT =null;
s=cur_token;reportarError("ES11", "No se ha encontrado \"comienzo\"");
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$5",42, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // inicio1 ::= error NT$5 PARENTESIS_ABIERTO tiempo_cada PARENTESIS_CERRADO inicio2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("inicio1",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$6 ::= 
            {
              Object RESULT =null;
s=cur_token;reportarError("ES11", "No se ha encontrado \"(\"");
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$6",43, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // inicio1 ::= COMIENZO NT$6 tiempo_cada PARENTESIS_CERRADO inicio2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("inicio1",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$7 ::= 
            {
              Object RESULT =null;
s=cur_token;reportarError("ES11", "No se ha encontrado \")\"");
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$7",44, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // inicio1 ::= COMIENZO PARENTESIS_ABIERTO tiempo_cada NT$7 inicio2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("inicio1",1, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // inicio2 ::= LLAVE_ABIERTA gramaticas LLAVE_CERRADA inicio_fin 
            {
              Object RESULT =null;
		comprobarFunciones();
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("inicio2",2, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT$8 ::= 
            {
              Object RESULT =null;
s=cur_token;reportarError("ES11", "No se ha encontrado \"{\"");
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$8",45, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // inicio2 ::= NT$8 gramaticas LLAVE_CERRADA inicio_fin 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).value;
		comprobarFunciones();
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("inicio2",2, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // inicio_fin ::= LLAVE_CERRADA FIN 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("inicio_fin",12, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // inicio_fin ::= FUNCION funcion inicio_fin 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("inicio_fin",12, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // inicio_fin ::= LLAVE_CERRADA 
            {
              Object RESULT =null;
		reportarError("ES11", "No se ha encontrado \"fin\"");
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("inicio_fin",12, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$9 ::= 
            {
              Object RESULT =null;
reportarError("ES11", "No se ha encontrado \"funcion\"");
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$9",46, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // inicio_fin ::= NT$9 funcion inicio_fin 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("inicio_fin",12, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$10 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;

                                s = cur_token;
                                agregarFuncion(i);
                                ambito = i;
                                anidamientos.clear();
                                anidamiento = 0;
                                enFuncion = true;
                            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$10",47, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // funcion ::= IDENTIFICADOR NT$10 PARENTESIS_ABIERTO parametros PARENTESIS_CERRADO LLAVE_ABIERTA gramaticas LLAVE_CERRADA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-7)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("funcion",11, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$11 ::= 
            {
              Object RESULT =null;
s=cur_token;reportarError("ES11", "No se ha encontrado el identificador de la función");
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$11",48, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // funcion ::= error NT$11 PARENTESIS_ABIERTO parametros PARENTESIS_CERRADO LLAVE_ABIERTA gramaticas LLAVE_CERRADA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-6)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("funcion",11, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$12 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
agregarParametro(i);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$12",49, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // parametros ::= declaracion_inicio NT$12 COMA parametros 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("parametros",13, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // parametros ::= declaracion_inicio 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		agregarParametro(i);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("parametros",13, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // parametros ::= 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("parametros",13, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NT$13 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

                verificarIdentificador(i, false);
                ponerValor(i, validarEntero(i) + 1);
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$13",50, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // gramaticas ::= IDENTIFICADOR INC NT$13 PUNTO_COMA gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",3, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // NT$14 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

                reportarError("ES7", null);
                verificarIdentificador(i, false);
                ponerValor(i, validarEntero(i) + 1);
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$14",51, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // gramaticas ::= IDENTIFICADOR INC NT$14 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",3, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NT$15 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

                verificarIdentificador(i, false);
                ponerValor(i, validarEntero(i) - 1);
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$15",52, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // gramaticas ::= IDENTIFICADOR DEC NT$15 PUNTO_COMA gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",3, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // NT$16 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

                reportarError("ES7", null);
                verificarIdentificador(i, false);
                ponerValor(i, validarEntero(i) - 1);
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$16",53, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // gramaticas ::= IDENTIFICADOR DEC NT$16 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",3, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NT$17 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;

                verificarIdentificador(i, false);
                ponerValor(i, validarEntero(i) + 1);
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$17",54, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // gramaticas ::= INC IDENTIFICADOR NT$17 PUNTO_COMA gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",3, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$18 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;

                reportarError("ES7", null);
                verificarIdentificador(i, false);
                ponerValor(i, validarEntero(i) + 1);
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$18",55, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // gramaticas ::= INC IDENTIFICADOR NT$18 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",3, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // NT$19 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;

                verificarIdentificador(i, false);
                ponerValor(i, validarEntero(i) - 1);
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$19",56, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // gramaticas ::= DEC IDENTIFICADOR NT$19 PUNTO_COMA gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",3, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // NT$20 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;

                reportarError("ES7", null);
                verificarIdentificador(i, false);
                ponerValor(i, validarEntero(i) - 1);
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$20",57, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // gramaticas ::= DEC IDENTIFICADOR NT$20 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",3, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // gramaticas ::= declaracion_inicio PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",3, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // NT$21 ::= 
            {
              Object RESULT =null;
s=cur_token;reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$21",58, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // gramaticas ::= declaracion_inicio NT$21 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",3, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // NT$22 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
ponerValor(i,v);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$22",59, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // gramaticas ::= declaracion_inicio declaracion_valor NT$22 PUNTO_COMA gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",3, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // NT$23 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
reportarError("ES7", null);ponerValor(i,v);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$23",60, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // gramaticas ::= declaracion_inicio declaracion_valor NT$23 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",3, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // gramaticas ::= asignacion PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",3, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NT$24 ::= 
            {
              Object RESULT =null;
s=cur_token;reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$24",61, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // gramaticas ::= asignacion NT$24 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$24
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",3, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // gramaticas ::= CONDICION condicion gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",3, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // gramaticas ::= MIENTRAS mientras gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",3, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // gramaticas ::= APAGAR LUCES PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",3, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // NT$25 ::= 
            {
              Object RESULT =null;
s=cur_token;reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$25",62, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // gramaticas ::= APAGAR LUCES NT$25 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$25
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",3, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // gramaticas ::= ENCENDER LUCES PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",3, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // NT$26 ::= 
            {
              Object RESULT =null;
s=cur_token;reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$26",63, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // gramaticas ::= ENCENDER LUCES NT$26 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$26
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",3, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // gramaticas ::= ABRIR PUERTAS tiempo_abrir_cerrar PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",3, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // NT$27 ::= 
            {
              Object RESULT =null;
s=cur_token;reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$27",64, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // gramaticas ::= ABRIR PUERTAS tiempo_abrir_cerrar NT$27 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$27
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",3, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // gramaticas ::= CERRAR PUERTAS tiempo_abrir_cerrar PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",3, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // NT$28 ::= 
            {
              Object RESULT =null;
s=cur_token;reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$28",65, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // gramaticas ::= CERRAR PUERTAS tiempo_abrir_cerrar NT$28 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$28
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",3, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // gramaticas ::= ABRIR VENTANAS tiempo_abrir_cerrar PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",3, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // NT$29 ::= 
            {
              Object RESULT =null;
s=cur_token;reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$29",66, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // gramaticas ::= ABRIR VENTANAS tiempo_abrir_cerrar NT$29 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$29
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",3, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // gramaticas ::= CERRAR VENTANAS tiempo_abrir_cerrar PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",3, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // NT$30 ::= 
            {
              Object RESULT =null;
s=cur_token;reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$30",67, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // gramaticas ::= CERRAR VENTANAS tiempo_abrir_cerrar NT$30 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$30
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",3, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // gramaticas ::= SANITIZAR tiempo_por PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",3, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // NT$31 ::= 
            {
              Object RESULT =null;
s=cur_token;reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$31",68, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // gramaticas ::= SANITIZAR tiempo_por NT$31 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$31
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",3, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // gramaticas ::= DISPENSAR tiempo_por PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",3, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // NT$32 ::= 
            {
              Object RESULT =null;
s=cur_token;reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$32",69, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // gramaticas ::= DISPENSAR tiempo_por NT$32 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$32
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",3, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // gramaticas ::= usar PUNTO_COMA gramaticas 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",3, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // NT$33 ::= 
            {
              Object RESULT =null;
s=cur_token;reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$33",70, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // gramaticas ::= usar NT$33 gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$33
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",3, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // gramaticas ::= SALIR PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",3, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // gramaticas ::= SALIR 
            {
              Object RESULT =null;
		s=cur_token;reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",3, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // gramaticas ::= SALIR error 
            {
              Object RESULT =null;
		s=cur_token;reportarError("ES7", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",3, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // gramaticas ::= SALIR error PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",3, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // NT$34 ::= 
            {
              Object RESULT =null;
s=cur_token;reportarError("ES2", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$34",71, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // gramaticas ::= error NT$34 PUNTO_COMA gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$34
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",3, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // NT$35 ::= 
            {
              Object RESULT =null;
s=cur_token;reportarError("ES11", "Faltó identificador");
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$35",72, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // gramaticas ::= error NT$35 INC PUNTO_COMA gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$35
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",3, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // NT$36 ::= 
            {
              Object RESULT =null;
s=cur_token;reportarError("ES11", "Faltó identificador");
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$36",73, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // gramaticas ::= error NT$36 DEC PUNTO_COMA gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$36
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",3, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // NT$37 ::= 
            {
              Object RESULT =null;
s=cur_token;reportarError("ES11", "Faltó identificador");
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$37",74, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // gramaticas ::= INC error NT$37 PUNTO_COMA gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$37
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",3, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // NT$38 ::= 
            {
              Object RESULT =null;
s=cur_token;reportarError("ES11", "Faltó identificador");
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$38",75, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // gramaticas ::= DEC error NT$38 PUNTO_COMA gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$38
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",3, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // NT$39 ::= 
            {
              Object RESULT =null;
s=cur_token;reportarError("ES11", "Faltó <\"condicion\", \"mientras\">");
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$39",76, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // gramaticas ::= error NT$39 condicion gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$39
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",3, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // NT$40 ::= 
            {
              Object RESULT =null;
s=cur_token;reportarError("ES11", "Faltó <\"encender\",\"apagar\">");
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$40",77, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // gramaticas ::= error NT$40 LUCES PUNTO_COMA gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$40
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",3, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // NT$41 ::= 
            {
              Object RESULT =null;
s=cur_token;reportarError("ES11", "Faltó \"luces\"");
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$41",78, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // gramaticas ::= ENCENDER error NT$41 PUNTO_COMA gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$41
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",3, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // NT$42 ::= 
            {
              Object RESULT =null;
s=cur_token;reportarError("ES11", "Faltó \"luces\"");
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$42",79, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // gramaticas ::= APAGAR error NT$42 PUNTO_COMA gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$42
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",3, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // NT$43 ::= 
            {
              Object RESULT =null;
s=cur_token;reportarError("ES11", "Faltó <\"abrir\",\"cerrar\">");
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$43",80, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // gramaticas ::= error NT$43 PUERTAS tiempo_abrir_cerrar PUNTO_COMA gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$43
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",3, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // NT$44 ::= 
            {
              Object RESULT =null;
s=cur_token;reportarError("ES11", "Faltó <\"abrir\",\"cerrar\">");
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$44",81, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // gramaticas ::= error NT$44 VENTANAS tiempo_abrir_cerrar PUNTO_COMA gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$44
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",3, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // NT$45 ::= 
            {
              Object RESULT =null;
s=cur_token;reportarError("ES11", "Faltó <\"sanitizar\",\"dispensar\">");
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$45",82, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // gramaticas ::= error NT$45 tiempo_por PUNTO_COMA gramaticas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$45
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",3, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // gramaticas ::= 
            {
              Object RESULT =null;
		
                if(enFuncion && anidamiento == 0){
                    s=cur_token;
                    reportarError("ES10", null);
                }
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("gramaticas",3, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // tiempo_abrir_cerrar ::= MANTENER 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("tiempo_abrir_cerrar",27, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // tiempo_abrir_cerrar ::= tiempo_por 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("tiempo_abrir_cerrar",27, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // tiempo_abrir_cerrar ::= error 
            {
              Object RESULT =null;
		s=cur_token;reportarError("ES11", "Se esperaba \"mantener\" o \"por <Expresión aritmética> <\"seg\", \"min\", \"hr\">\"");
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("tiempo_abrir_cerrar",27, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // usar ::= USAR usar_funcion 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("usar",17, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // usar ::= USAR admitir 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("usar",17, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // usar ::= USAR ventilar 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("usar",17, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // usar ::= error usar_funcion 
            {
              Object RESULT =null;
		reportarError("ES11", "Faltó <\"usar\">");
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("usar",17, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // usar ::= error admitir 
            {
              Object RESULT =null;
		reportarError("ES11", "Faltó <\"usar\">");
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("usar",17, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // usar ::= error ventilar 
            {
              Object RESULT =null;
		reportarError("ES11", "Faltó <\"usar\">");
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("usar",17, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // NT$46 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
funcionActual = new herramientas.Funcion(i, cur_token.left+1);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$46",83, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // usar_funcion ::= IDENTIFICADOR NT$46 PARENTESIS_ABIERTO parametros_llamar PARENTESIS_CERRADO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$46
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("usar_funcion",28, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // NT$47 ::= 
            {
              Object RESULT =null;

                        s=cur_token;
                        reportarError("ES11", "No se ha encontrado el identificador de la función");
                        funcionActual = new herramientas.Funcion("0sin_id", cur_token.left+1);
                    
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$47",84, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // usar_funcion ::= error NT$47 PARENTESIS_ABIERTO parametros_llamar PARENTESIS_CERRADO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$47
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("usar_funcion",28, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // usar_funcion ::= error 
            {
              Object RESULT =null;
		s=cur_token;reportarError("ES11", "No se ha encontrado <\"(\", \")\"> en el llamado de la función");
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("usar_funcion",28, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // NT$48 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
agregarExpresion(e);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$48",85, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // parametros_llamar ::= expresion NT$48 COMA parametros_llamar 
            {
              Object RESULT =null;
              // propagate RESULT from NT$48
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("parametros_llamar",16, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // parametros_llamar ::= expresion 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		agregarExpresion(e);guardarFuncion();
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("parametros_llamar",16, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // NT$49 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
agregarExpresion(e);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$49",86, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // NT$50 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
s=cur_token;reportarError("ES11", "No se ha encontrado \",\" después de la expresión");
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$50",87, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // parametros_llamar ::= expresion NT$49 error NT$50 parametros_llamar 
            {
              Object RESULT =null;
              // propagate RESULT from NT$50
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("parametros_llamar",16, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // parametros_llamar ::= 
            {
              Object RESULT =null;
		guardarFuncion();
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("parametros_llamar",16, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // tiempo_cada ::= CADA expresion unidad_tiempo 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("tiempo_cada",4, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // NT$51 ::= 
            {
              Object RESULT =null;
s=cur_token;reportarError("ES11", "Se esperaba \"cada\"");
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$51",88, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // tiempo_cada ::= error NT$51 expresion unidad_tiempo 
            {
              Object RESULT =null;
              // propagate RESULT from NT$51
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("tiempo_cada",4, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // NT$52 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
getEntero(e);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$52",89, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // tiempo_por ::= POR expresion NT$52 unidad_tiempo 
            {
              Object RESULT =null;
              // propagate RESULT from NT$52
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("tiempo_por",5, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // unidad_tiempo ::= SEG 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("unidad_tiempo",6, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // unidad_tiempo ::= MIN 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("unidad_tiempo",6, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // unidad_tiempo ::= HR 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("unidad_tiempo",6, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // unidad_tiempo ::= error 
            {
              Object RESULT =null;
		s=cur_token;reportarError("ES3", null);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("unidad_tiempo",6, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // estado ::= LUCES 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("estado",10, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // estado ::= PUERTAS 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("estado",10, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // estado ::= VENTANAS 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("estado",10, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // estado ::= error 
            {
              Object RESULT =null;
		s=cur_token;reportarError("ES11", "Se esperaba <\"luces\", \"puertas\", \"ventanas\">");
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("estado",10, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // NT$53 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;

                s = cur_token;
                verificarIdentificador(i, false);
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$53",90, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // asignacion ::= IDENTIFICADOR NT$53 ASIGNACION expresion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$53
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		ponerValor(i,e);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("asignacion",14, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // NT$54 ::= 
            {
              Object RESULT =null;
s=cur_token;reportarError("ES11", "No se ha encontrado el identificador para la asignación");
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$54",91, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // asignacion ::= error NT$54 ASIGNACION expresion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$54
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("asignacion",14, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // NT$55 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;

                s = cur_token;
                verificarIdentificador(i, false);
                reportarError("ES11", "No se ha encontrado el simbolo \"=\"");
            
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$55",92, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // asignacion ::= IDENTIFICADOR NT$55 expresion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$55
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		ponerValor(i,e);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("asignacion",14, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // NT$56 ::= 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
s=cur_token;verificarIdentificador(i, true);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$56",93, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // declaracion_inicio ::= IDENTIFICADOR NT$56 DECLARAR declaracion_tipo_dato 
            {
              String RESULT =null;
              // propagate RESULT from NT$56
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		String td = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		
                        agregarSimbolo(i, cur_token.left+1);
                        ponerTipoDato(i,td);
                        RESULT=i;
                    
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("declaracion_inicio",34, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // NT$57 ::= 
            {
              String RESULT =null;
s=cur_token;reportarError("ES11", "No se ha encontrado un identificador");
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$57",94, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // declaracion_inicio ::= error NT$57 DECLARAR declaracion_tipo_dato 
            {
              String RESULT =null;
              // propagate RESULT from NT$57
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("declaracion_inicio",34, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // NT$58 ::= 
            {
              String RESULT =null;
s=cur_token;reportarError("ES11", "No se ha encontrado \"declarar\"");
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$58",95, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // declaracion_inicio ::= error NT$58 declaracion_tipo_dato 
            {
              String RESULT =null;
              // propagate RESULT from NT$58
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("declaracion_inicio",34, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // declaracion_valor ::= ASIGNACION expresion 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=e;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("declaracion_valor",7, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // declaracion_tipo_dato ::= COMO tipo_dato 
            {
              String RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		String td = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT = td;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("declaracion_tipo_dato",32, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // tipo_dato ::= ENTERO 
            {
              String RESULT =null;
		RESULT = "entero";
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("tipo_dato",33, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // tipo_dato ::= LOGICO 
            {
              String RESULT =null;
		RESULT = "logico";
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("tipo_dato",33, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // tipo_dato ::= error 
            {
              String RESULT =null;
		s=cur_token;reportarError("ES4", null); RESULT = "error";
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("tipo_dato",33, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // NT$59 ::= 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
valActual=v;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$59",96, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // expresion ::= op2 NT$59 op1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$59
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=r;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("expresion",15, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // NT$60 ::= 
            {
              Object RESULT =null;
aux1=getLogico(valActual);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$60",97, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // NT$61 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
valActual=aux1&&getLogico(v);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$61",98, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // op1 ::= LOGICO_AND NT$60 op2 NT$61 op1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$61
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=r;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op1",19, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // NT$62 ::= 
            {
              Object RESULT =null;
aux1=getLogico(valActual);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$62",99, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // NT$63 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
valActual=getLogico(v)||aux1;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$63",100, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // op1 ::= LOGICO_OR NT$62 op2 NT$63 op1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$63
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=r;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op1",19, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // op1 ::= 
            {
              Object RESULT =null;
		RESULT=valActual;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op1",19, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // NT$64 ::= 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
valActual=v;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$64",101, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // op2 ::= op4 NT$64 op3 
            {
              Object RESULT =null;
              // propagate RESULT from NT$64
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=r;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op2",20, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // NT$65 ::= 
            {
              Object RESULT =null;
aux2=getEntero(valActual);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$65",102, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // op3 ::= REL_MENOR NT$65 op4 
            {
              Object RESULT =null;
              // propagate RESULT from NT$65
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=aux2<getEntero(v);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op3",21, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // NT$66 ::= 
            {
              Object RESULT =null;
aux2=getEntero(valActual);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$66",103, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // op3 ::= REL_MAYOR NT$66 op4 
            {
              Object RESULT =null;
              // propagate RESULT from NT$66
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=aux2>getEntero(v);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op3",21, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // NT$67 ::= 
            {
              Object RESULT =null;
aux2=getEntero(valActual);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$67",104, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // op3 ::= REL_MENOR_IGUAL NT$67 op4 
            {
              Object RESULT =null;
              // propagate RESULT from NT$67
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=aux2<=getEntero(v);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op3",21, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // NT$68 ::= 
            {
              Object RESULT =null;
aux2=getEntero(valActual);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$68",105, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // op3 ::= REL_MAYOR_IGUAL NT$68 op4 
            {
              Object RESULT =null;
              // propagate RESULT from NT$68
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=aux2>=getEntero(v);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op3",21, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // NT$69 ::= 
            {
              Object RESULT =null;
aux2=getEntero(valActual);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$69",106, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // op3 ::= REL_DIFERENTE NT$69 op4 
            {
              Object RESULT =null;
              // propagate RESULT from NT$69
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=aux2!=getEntero(v);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op3",21, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // NT$70 ::= 
            {
              Object RESULT =null;
aux2=getEntero(valActual);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$70",107, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // op3 ::= REL_IGUAL NT$70 op4 
            {
              Object RESULT =null;
              // propagate RESULT from NT$70
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=aux2==getEntero(v);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op3",21, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // op3 ::= 
            {
              Object RESULT =null;
		RESULT=valActual;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op3",21, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // NT$71 ::= 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
valActual=v;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$71",108, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // op4 ::= op6 NT$71 op5 
            {
              Object RESULT =null;
              // propagate RESULT from NT$71
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=r;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op4",22, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // NT$72 ::= 
            {
              Object RESULT =null;
aux3=getEntero(valActual);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$72",109, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // NT$73 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
valActual=aux3+getEntero(v);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$73",110, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // op5 ::= AR_SUMA NT$72 op6 NT$73 op5 
            {
              Object RESULT =null;
              // propagate RESULT from NT$73
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=r;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op5",23, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // NT$74 ::= 
            {
              Object RESULT =null;
aux3=getEntero(valActual);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$74",111, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // NT$75 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
valActual=aux3-getEntero(v);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$75",112, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // op5 ::= AR_RESTA NT$74 op6 NT$75 op5 
            {
              Object RESULT =null;
              // propagate RESULT from NT$75
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=r;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op5",23, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // op5 ::= 
            {
              Object RESULT =null;
		RESULT=valActual;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op5",23, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // NT$76 ::= 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
valActual=v;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$76",113, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // op6 ::= op8 NT$76 op7 
            {
              Object RESULT =null;
              // propagate RESULT from NT$76
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=r;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op6",24, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // NT$77 ::= 
            {
              Object RESULT =null;
aux4=getEntero(valActual);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$77",114, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // NT$78 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
valActual=aux4/getEntero(v);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$78",115, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // op7 ::= AR_DIVISION NT$77 op8 NT$78 op7 
            {
              Object RESULT =null;
              // propagate RESULT from NT$78
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=r;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op7",25, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // NT$79 ::= 
            {
              Object RESULT =null;
aux4=getEntero(valActual);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$79",116, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // NT$80 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
valActual=aux4*getEntero(v);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$80",117, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // op7 ::= AR_MULTIPLICACION NT$79 op8 NT$80 op7 
            {
              Object RESULT =null;
              // propagate RESULT from NT$80
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=r;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op7",25, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // op7 ::= 
            {
              Object RESULT =null;
		RESULT=valActual;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op7",25, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // op8 ::= valores 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=v;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op8",26, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // op8 ::= AR_RESTA valores 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=-getEntero(v);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op8",26, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // op8 ::= NEGACION valores 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=!getLogico(v);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op8",26, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // op8 ::= error 
            {
              Object RESULT =null;
		s=cur_token;s=cur_token;reportarError("ES11", "No se ha encontrado un operador o un operando en la expresión ingresada");
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("op8",26, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // valores ::= NUMERO 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=n;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("valores",18, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // valores ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		s=cur_token;verificarIdentificador(i, false);RESULT=getValor(i);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("valores",18, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // valores ::= OBTENER TEMPERATURA 
            {
              Object RESULT =null;
		RESULT=0;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("valores",18, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // valores ::= OBTENER PERSONAS 
            {
              Object RESULT =null;
		RESULT=0;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("valores",18, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // valores ::= OP_BOOLEANO 
            {
              Object RESULT =null;
		int obleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int obright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Boolean ob = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
		RESULT=ob;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("valores",18, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // valores ::= ESTADO estado 
            {
              Object RESULT =null;
		RESULT=false;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("valores",18, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // valores ::= PARENTESIS_ABIERTO expresion PARENTESIS_CERRADO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		RESULT=e;
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("valores",18, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // condicion ::= cabecera_condicional cuerpo_estructura 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("condicion",35, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // condicion ::= cabecera_condicional cuerpo_estructura sino 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("condicion",35, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // sino ::= SINO CONDICION condicion 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("sino",36, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // sino ::= SINO cuerpo_estructura 
            {
              Boolean RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("sino",36, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // ventilar ::= VENTILAR PARENTESIS_ABIERTO tiempo_por COMA expresion COMA expresion PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("ventilar",8, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // admitir ::= ADMITIR PARENTESIS_ABIERTO expresion COMA tiempo_por PARENTESIS_CERRADO 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("admitir",9, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // mientras ::= cabecera_condicional cuerpo_estructura 
            {
              Object RESULT =null;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("mientras",29, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // NT$81 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.peek()).value;
s=cur_token;getLogico(e);
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$81",118, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // cabecera_condicional ::= PARENTESIS_ABIERTO expresion NT$81 PARENTESIS_CERRADO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$81
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("cabecera_condicional",30, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // NT$82 ::= 
            {
              Object RESULT =null;
ambito+=":"+(agregarAnidamiento());
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$82",119, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // NT$83 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-2)).value;
quitarAnidamiento();
              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("NT$83",120, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // cuerpo_estructura ::= NT$82 LLAVE_ABIERTA gramaticas NT$83 LLAVE_CERRADA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$83
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-1)).value;

              CUP$SintaxPrueba$result = parser.getSymbolFactory().newSymbol("cuerpo_estructura",31, ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.elementAt(CUP$SintaxPrueba$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPrueba$stack.peek()), RESULT);
            }
          return CUP$SintaxPrueba$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintaxPrueba$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintaxPrueba$do_action(
    int                        CUP$SintaxPrueba$act_num,
    java_cup.runtime.lr_parser CUP$SintaxPrueba$parser,
    java.util.Stack            CUP$SintaxPrueba$stack,
    int                        CUP$SintaxPrueba$top)
    throws java.lang.Exception
    {
              return CUP$SintaxPrueba$do_action_part00000000(
                               CUP$SintaxPrueba$act_num,
                               CUP$SintaxPrueba$parser,
                               CUP$SintaxPrueba$stack,
                               CUP$SintaxPrueba$top);
    }
}

}
