// DO NOT EDIT
// Generated by JFlex 1.9.0 http://jflex.de/
// source: Lexer.Flex

package analisis;

import java_cup.runtime.*;

@SuppressWarnings("fallthrough")
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\0\1\3\22\0\1\1\1\4"+
    "\4\0\1\5\1\0\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\0\1\14\12\15\1\0\1\16\1\17\1\20"+
    "\1\21\2\0\25\22\1\23\4\22\4\0\1\22\1\0"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\2\22\1\35\1\36\1\37\1\40\1\41\1\22"+
    "\1\42\1\43\1\44\1\45\1\46\3\22\1\47\1\50"+
    "\1\51\1\52\u0182\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\3\2\1\3\1\0\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\17\20\1\21\1\0\1\22\2\0\1\23\1\24"+
    "\1\0\1\25\1\26\1\0\1\27\1\30\1\31\16\20"+
    "\1\32\16\20\1\33\1\0\16\20\1\34\5\20\1\35"+
    "\2\20\1\36\3\20\1\37\4\20\1\13\4\20\1\40"+
    "\2\20\1\41\21\20\1\42\3\20\1\43\13\20\1\44"+
    "\3\20\1\45\4\20\1\46\6\20\1\47\1\20\1\50"+
    "\5\20\1\51\1\52\1\20\1\53\1\54\11\20\1\55"+
    "\6\20\1\56\1\20\1\57\1\20\1\60\6\20\1\61"+
    "\1\20\1\62\1\20\1\63\1\64\1\65\2\20\1\66"+
    "\1\67\1\20\1\70\1\71\1\72\1\73\1\20\1\74"+
    "\1\20\1\75";

  private static int [] zzUnpackAction() {
    int [] result = new int[230];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\53\0\126\0\201\0\254\0\327\0\u0102\0\u012d"+
    "\0\u0158\0\254\0\254\0\u0183\0\254\0\u01ae\0\u01d9\0\u0204"+
    "\0\254\0\u022f\0\u025a\0\u0285\0\u02b0\0\u02db\0\u0306\0\u0331"+
    "\0\u035c\0\u0387\0\u03b2\0\u03dd\0\u0408\0\u0433\0\u045e\0\u0489"+
    "\0\u04b4\0\u04df\0\u050a\0\254\0\u0535\0\254\0\u0158\0\u01d9"+
    "\0\254\0\254\0\u0560\0\254\0\254\0\u058b\0\254\0\254"+
    "\0\254\0\u05b6\0\u05e1\0\u060c\0\u0637\0\u0662\0\u068d\0\u06b8"+
    "\0\u06e3\0\u070e\0\u0739\0\u0764\0\u078f\0\u07ba\0\u07e5\0\u02b0"+
    "\0\u0810\0\u083b\0\u0866\0\u0891\0\u08bc\0\u08e7\0\u0912\0\u093d"+
    "\0\u0968\0\u0993\0\u09be\0\u09e9\0\u0a14\0\u0a3f\0\254\0\u0a6a"+
    "\0\u0a95\0\u0ac0\0\u0aeb\0\u0b16\0\u0b41\0\u0b6c\0\u0b97\0\u0bc2"+
    "\0\u0bed\0\u0c18\0\u0c43\0\u0c6e\0\u0c99\0\u0cc4\0\u02b0\0\u0cef"+
    "\0\u0d1a\0\u0d45\0\u0d70\0\u0d9b\0\u02b0\0\u0dc6\0\u0df1\0\u02b0"+
    "\0\u0e1c\0\u0e47\0\u0e72\0\u02b0\0\u0e9d\0\u0ec8\0\u0ef3\0\u0f1e"+
    "\0\254\0\u0f49\0\u0f74\0\u0f9f\0\u0fca\0\u02b0\0\u0ff5\0\u1020"+
    "\0\u02b0\0\u104b\0\u1076\0\u10a1\0\u10cc\0\u10f7\0\u1122\0\u114d"+
    "\0\u1178\0\u11a3\0\u11ce\0\u11f9\0\u1224\0\u124f\0\u127a\0\u12a5"+
    "\0\u12d0\0\u12fb\0\u02b0\0\u1326\0\u1351\0\u137c\0\u02b0\0\u13a7"+
    "\0\u13d2\0\u13fd\0\u1428\0\u1453\0\u147e\0\u14a9\0\u14d4\0\u14ff"+
    "\0\u152a\0\u1555\0\u02b0\0\u1580\0\u15ab\0\u15d6\0\u02b0\0\u1601"+
    "\0\u162c\0\u1657\0\u1682\0\u02b0\0\u16ad\0\u16d8\0\u1703\0\u172e"+
    "\0\u1759\0\u1784\0\u02b0\0\u17af\0\u02b0\0\u17da\0\u1805\0\u1830"+
    "\0\u185b\0\u1886\0\u02b0\0\u02b0\0\u18b1\0\u02b0\0\u02b0\0\u18dc"+
    "\0\u1907\0\u1932\0\u195d\0\u1988\0\u19b3\0\u19de\0\u1a09\0\u1a34"+
    "\0\u02b0\0\u1a5f\0\u1a8a\0\u1ab5\0\u1ae0\0\u1b0b\0\u1b36\0\u02b0"+
    "\0\u1b61\0\u02b0\0\u1b8c\0\u02b0\0\u1bb7\0\u1be2\0\u1c0d\0\u1c38"+
    "\0\u1c63\0\u1c8e\0\u02b0\0\u1cb9\0\u02b0\0\u1ce4\0\u02b0\0\u02b0"+
    "\0\u02b0\0\u1d0f\0\u1d3a\0\u02b0\0\u02b0\0\u1d65\0\u02b0\0\u02b0"+
    "\0\u02b0\0\u02b0\0\u1d90\0\u02b0\0\u1dbb\0\u02b0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[230];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\2\25\1\26\1\25\1\27\1\30\1\31"+
    "\1\32\1\25\1\33\1\34\1\35\1\36\1\25\1\37"+
    "\1\40\1\25\1\41\1\42\1\25\1\43\1\25\1\44"+
    "\1\45\1\46\1\3\1\4\1\5\1\6\2\0\1\47"+
    "\5\0\1\50\1\20\4\0\26\25\3\0\1\3\2\0"+
    "\1\3\11\0\1\3\4\0\26\3\4\0\1\4\1\0"+
    "\1\4\122\0\1\3\1\4\1\0\1\6\11\0\1\3"+
    "\4\0\26\3\23\0\1\51\37\0\1\52\60\0\1\53"+
    "\50\0\1\54\54\0\1\55\53\0\1\56\36\0\1\3"+
    "\2\0\1\3\11\0\1\20\4\0\26\3\23\0\1\57"+
    "\52\0\1\60\52\0\1\61\32\0\1\3\2\0\1\3"+
    "\11\0\1\25\4\0\26\25\3\0\1\3\2\0\1\3"+
    "\11\0\1\25\4\0\3\25\1\62\1\25\1\63\11\25"+
    "\1\64\3\25\1\65\2\25\3\0\1\3\2\0\1\3"+
    "\11\0\1\25\4\0\2\25\1\66\3\25\1\67\7\25"+
    "\1\70\7\25\3\0\1\3\2\0\1\3\11\0\1\25"+
    "\4\0\6\25\1\71\3\25\1\72\13\25\3\0\1\3"+
    "\2\0\1\3\11\0\1\25\4\0\15\25\1\73\3\25"+
    "\1\74\4\25\3\0\1\3\2\0\1\3\11\0\1\25"+
    "\4\0\2\25\1\75\7\25\1\76\10\25\1\77\2\25"+
    "\3\0\1\3\2\0\1\3\11\0\1\25\4\0\20\25"+
    "\1\100\5\25\3\0\1\3\2\0\1\3\11\0\1\25"+
    "\4\0\15\25\1\101\10\25\3\0\1\3\2\0\1\3"+
    "\11\0\1\25\4\0\16\25\1\102\4\25\1\103\2\25"+
    "\3\0\1\3\2\0\1\3\11\0\1\25\4\0\2\25"+
    "\1\104\7\25\1\105\13\25\3\0\1\3\2\0\1\3"+
    "\11\0\1\25\4\0\3\25\1\106\22\25\3\0\1\3"+
    "\2\0\1\3\11\0\1\25\4\0\6\25\1\107\7\25"+
    "\1\110\4\25\1\111\2\25\3\0\1\3\2\0\1\3"+
    "\11\0\1\25\4\0\2\25\1\112\3\25\1\113\3\25"+
    "\1\114\13\25\3\0\1\3\2\0\1\3\11\0\1\25"+
    "\4\0\6\25\1\115\17\25\3\0\1\3\2\0\1\3"+
    "\11\0\1\25\4\0\6\25\1\116\17\25\54\0\1\117"+
    "\16\0\1\120\35\0\2\56\1\5\50\56\1\3\2\0"+
    "\1\3\11\0\1\25\4\0\20\25\1\121\5\25\3\0"+
    "\1\3\2\0\1\3\11\0\1\25\4\0\14\25\1\122"+
    "\11\25\3\0\1\3\2\0\1\3\11\0\1\25\4\0"+
    "\2\25\1\123\23\25\3\0\1\3\2\0\1\3\11\0"+
    "\1\25\4\0\13\25\1\124\12\25\3\0\1\3\2\0"+
    "\1\3\11\0\1\25\4\0\5\25\1\125\20\25\3\0"+
    "\1\3\2\0\1\3\11\0\1\25\4\0\20\25\1\126"+
    "\5\25\3\0\1\3\2\0\1\3\11\0\1\25\4\0"+
    "\14\25\1\127\1\130\10\25\3\0\1\3\2\0\1\3"+
    "\11\0\1\25\4\0\4\25\1\131\21\25\3\0\1\3"+
    "\2\0\1\3\11\0\1\25\4\0\21\25\1\132\4\25"+
    "\3\0\1\3\2\0\1\3\11\0\1\25\4\0\4\25"+
    "\1\133\15\25\1\134\3\25\3\0\1\3\2\0\1\3"+
    "\11\0\1\25\4\0\22\25\1\135\3\25\3\0\1\3"+
    "\2\0\1\3\11\0\1\25\4\0\13\25\1\136\12\25"+
    "\3\0\1\3\2\0\1\3\11\0\1\25\4\0\15\25"+
    "\1\137\10\25\3\0\1\3\2\0\1\3\11\0\1\25"+
    "\4\0\15\25\1\140\10\25\3\0\1\3\2\0\1\3"+
    "\11\0\1\25\4\0\12\25\1\141\13\25\3\0\1\3"+
    "\2\0\1\3\11\0\1\25\4\0\10\25\1\142\15\25"+
    "\3\0\1\3\2\0\1\3\11\0\1\25\4\0\4\25"+
    "\1\143\21\25\3\0\1\3\2\0\1\3\11\0\1\25"+
    "\4\0\15\25\1\144\10\25\3\0\1\3\2\0\1\3"+
    "\11\0\1\25\4\0\15\25\1\145\10\25\3\0\1\3"+
    "\2\0\1\3\11\0\1\25\4\0\22\25\1\146\3\25"+
    "\3\0\1\3\2\0\1\3\11\0\1\25\4\0\20\25"+
    "\1\147\5\25\3\0\1\3\2\0\1\3\11\0\1\25"+
    "\4\0\20\25\1\150\5\25\3\0\1\3\2\0\1\3"+
    "\11\0\1\25\4\0\6\25\1\151\17\25\3\0\1\3"+
    "\2\0\1\3\11\0\1\25\4\0\13\25\1\152\1\25"+
    "\1\153\10\25\3\0\1\3\2\0\1\3\11\0\1\25"+
    "\4\0\10\25\1\154\15\25\3\0\1\3\2\0\1\3"+
    "\11\0\1\25\4\0\15\25\1\155\10\25\3\0\1\3"+
    "\2\0\1\3\11\0\1\25\4\0\14\25\1\156\11\25"+
    "\3\0\1\3\2\0\1\3\11\0\1\25\4\0\15\25"+
    "\1\157\2\25\1\160\5\25\12\0\1\161\5\0\1\120"+
    "\35\0\1\3\2\0\1\3\11\0\1\25\4\0\12\25"+
    "\1\162\13\25\3\0\1\3\2\0\1\3\11\0\1\25"+
    "\4\0\12\25\1\163\13\25\3\0\1\3\2\0\1\3"+
    "\11\0\1\25\4\0\10\25\1\164\15\25\3\0\1\3"+
    "\2\0\1\3\11\0\1\25\4\0\2\25\1\165\23\25"+
    "\3\0\1\3\2\0\1\3\11\0\1\25\4\0\2\25"+
    "\1\166\23\25\3\0\1\3\2\0\1\3\11\0\1\25"+
    "\4\0\20\25\1\167\5\25\3\0\1\3\2\0\1\3"+
    "\11\0\1\25\4\0\12\25\1\170\3\25\1\171\7\25"+
    "\3\0\1\3\2\0\1\3\11\0\1\25\4\0\5\25"+
    "\1\172\20\25\3\0\1\3\2\0\1\3\11\0\1\25"+
    "\4\0\13\25\1\173\12\25\3\0\1\3\2\0\1\3"+
    "\11\0\1\25\4\0\17\25\1\174\6\25\3\0\1\3"+
    "\2\0\1\3\11\0\1\25\4\0\6\25\1\175\17\25"+
    "\3\0\1\3\2\0\1\3\11\0\1\25\4\0\6\25"+
    "\1\176\17\25\3\0\1\3\2\0\1\3\11\0\1\25"+
    "\4\0\2\25\1\177\23\25\3\0\1\3\2\0\1\3"+
    "\11\0\1\25\4\0\21\25\1\200\4\25\3\0\1\3"+
    "\2\0\1\3\11\0\1\25\4\0\4\25\1\201\21\25"+
    "\3\0\1\3\2\0\1\3\11\0\1\25\4\0\4\25"+
    "\1\202\21\25\3\0\1\3\2\0\1\3\11\0\1\25"+
    "\4\0\12\25\1\203\13\25\3\0\1\3\2\0\1\3"+
    "\11\0\1\25\4\0\6\25\1\204\17\25\3\0\1\3"+
    "\2\0\1\3\11\0\1\25\4\0\22\25\1\205\3\25"+
    "\3\0\1\3\2\0\1\3\11\0\1\25\4\0\6\25"+
    "\1\206\17\25\3\0\1\3\2\0\1\3\11\0\1\25"+
    "\4\0\21\25\1\207\4\25\3\0\1\3\2\0\1\3"+
    "\11\0\1\25\4\0\20\25\1\210\5\25\3\0\1\3"+
    "\2\0\1\3\11\0\1\25\4\0\12\25\1\211\13\25"+
    "\3\0\1\3\2\0\1\3\11\0\1\25\4\0\12\25"+
    "\1\212\13\25\3\0\1\3\2\0\1\3\11\0\1\25"+
    "\4\0\16\25\1\213\7\25\3\0\1\3\2\0\1\3"+
    "\11\0\1\25\4\0\17\25\1\214\6\25\3\0\1\3"+
    "\2\0\1\3\11\0\1\25\4\0\22\25\1\215\3\25"+
    "\3\0\1\3\2\0\1\3\11\0\1\25\4\0\5\25"+
    "\1\216\20\25\3\0\1\3\2\0\1\3\11\0\1\25"+
    "\4\0\20\25\1\217\5\25\3\0\1\3\2\0\1\3"+
    "\11\0\1\25\4\0\22\25\1\220\3\25\3\0\1\3"+
    "\2\0\1\3\11\0\1\25\4\0\2\25\1\221\23\25"+
    "\3\0\1\3\2\0\1\3\11\0\1\25\4\0\1\25"+
    "\1\222\24\25\3\0\1\3\2\0\1\3\11\0\1\25"+
    "\4\0\2\25\1\223\23\25\3\0\1\3\2\0\1\3"+
    "\11\0\1\25\4\0\6\25\1\224\17\25\3\0\1\3"+
    "\2\0\1\3\11\0\1\25\4\0\12\25\1\225\13\25"+
    "\3\0\1\3\2\0\1\3\11\0\1\25\4\0\2\25"+
    "\1\226\23\25\3\0\1\3\2\0\1\3\11\0\1\25"+
    "\4\0\6\25\1\227\17\25\3\0\1\3\2\0\1\3"+
    "\11\0\1\25\4\0\15\25\1\230\10\25\3\0\1\3"+
    "\2\0\1\3\11\0\1\25\4\0\20\25\1\231\5\25"+
    "\3\0\1\3\2\0\1\3\11\0\1\25\4\0\5\25"+
    "\1\232\20\25\3\0\1\3\2\0\1\3\11\0\1\25"+
    "\4\0\16\25\1\233\7\25\3\0\1\3\2\0\1\3"+
    "\11\0\1\25\4\0\12\25\1\234\13\25\3\0\1\3"+
    "\2\0\1\3\11\0\1\25\4\0\12\25\1\235\13\25"+
    "\3\0\1\3\2\0\1\3\11\0\1\25\4\0\4\25"+
    "\1\236\21\25\3\0\1\3\2\0\1\3\11\0\1\25"+
    "\4\0\21\25\1\237\4\25\3\0\1\3\2\0\1\3"+
    "\11\0\1\25\4\0\6\25\1\240\17\25\3\0\1\3"+
    "\2\0\1\3\11\0\1\25\4\0\15\25\1\241\10\25"+
    "\3\0\1\3\2\0\1\3\11\0\1\25\4\0\16\25"+
    "\1\242\7\25\3\0\1\3\2\0\1\3\11\0\1\25"+
    "\4\0\22\25\1\243\3\25\3\0\1\3\2\0\1\3"+
    "\11\0\1\25\4\0\20\25\1\244\5\25\3\0\1\3"+
    "\2\0\1\3\11\0\1\25\4\0\22\25\1\245\3\25"+
    "\3\0\1\3\2\0\1\3\11\0\1\25\4\0\6\25"+
    "\1\246\17\25\3\0\1\3\2\0\1\3\11\0\1\25"+
    "\4\0\2\25\1\247\7\25\1\250\13\25\3\0\1\3"+
    "\2\0\1\3\11\0\1\25\4\0\2\25\1\251\23\25"+
    "\3\0\1\3\2\0\1\3\11\0\1\25\4\0\12\25"+
    "\1\252\13\25\3\0\1\3\2\0\1\3\11\0\1\25"+
    "\4\0\20\25\1\253\5\25\3\0\1\3\2\0\1\3"+
    "\11\0\1\25\4\0\2\25\1\254\23\25\3\0\1\3"+
    "\2\0\1\3\11\0\1\25\4\0\20\25\1\255\5\25"+
    "\3\0\1\3\2\0\1\3\11\0\1\25\4\0\15\25"+
    "\1\256\10\25\3\0\1\3\2\0\1\3\11\0\1\25"+
    "\4\0\4\25\1\257\21\25\3\0\1\3\2\0\1\3"+
    "\11\0\1\25\4\0\20\25\1\260\5\25\3\0\1\3"+
    "\2\0\1\3\11\0\1\25\4\0\15\25\1\261\10\25"+
    "\3\0\1\3\2\0\1\3\11\0\1\25\4\0\5\25"+
    "\1\262\20\25\3\0\1\3\2\0\1\3\11\0\1\25"+
    "\4\0\16\25\1\263\7\25\3\0\1\3\2\0\1\3"+
    "\11\0\1\25\4\0\16\25\1\264\7\25\3\0\1\3"+
    "\2\0\1\3\11\0\1\25\4\0\16\25\1\265\7\25"+
    "\3\0\1\3\2\0\1\3\11\0\1\25\4\0\16\25"+
    "\1\266\7\25\3\0\1\3\2\0\1\3\11\0\1\25"+
    "\4\0\16\25\1\267\7\25\3\0\1\3\2\0\1\3"+
    "\11\0\1\25\4\0\15\25\1\270\10\25\3\0\1\3"+
    "\2\0\1\3\11\0\1\25\4\0\6\25\1\271\17\25"+
    "\3\0\1\3\2\0\1\3\11\0\1\25\4\0\15\25"+
    "\1\272\10\25\3\0\1\3\2\0\1\3\11\0\1\25"+
    "\4\0\2\25\1\273\23\25\3\0\1\3\2\0\1\3"+
    "\11\0\1\25\4\0\12\25\1\274\13\25\3\0\1\3"+
    "\2\0\1\3\11\0\1\25\4\0\20\25\1\275\5\25"+
    "\3\0\1\3\2\0\1\3\11\0\1\25\4\0\15\25"+
    "\1\276\10\25\3\0\1\3\2\0\1\3\11\0\1\25"+
    "\4\0\13\25\1\277\12\25\3\0\1\3\2\0\1\3"+
    "\11\0\1\25\4\0\5\25\1\300\20\25\3\0\1\3"+
    "\2\0\1\3\11\0\1\25\4\0\20\25\1\301\5\25"+
    "\3\0\1\3\2\0\1\3\11\0\1\25\4\0\4\25"+
    "\1\302\21\25\3\0\1\3\2\0\1\3\11\0\1\25"+
    "\4\0\25\25\1\303\3\0\1\3\2\0\1\3\11\0"+
    "\1\25\4\0\12\25\1\304\13\25\3\0\1\3\2\0"+
    "\1\3\11\0\1\25\4\0\2\25\1\305\23\25\3\0"+
    "\1\3\2\0\1\3\11\0\1\25\4\0\21\25\1\306"+
    "\4\25\3\0\1\3\2\0\1\3\11\0\1\25\4\0"+
    "\6\25\1\307\17\25\3\0\1\3\2\0\1\3\11\0"+
    "\1\25\4\0\15\25\1\310\10\25\3\0\1\3\2\0"+
    "\1\3\11\0\1\25\4\0\6\25\1\311\17\25\3\0"+
    "\1\3\2\0\1\3\11\0\1\25\4\0\20\25\1\312"+
    "\5\25\3\0\1\3\2\0\1\3\11\0\1\25\4\0"+
    "\2\25\1\313\23\25\3\0\1\3\2\0\1\3\11\0"+
    "\1\25\4\0\21\25\1\314\4\25\3\0\1\3\2\0"+
    "\1\3\11\0\1\25\4\0\25\25\1\315\3\0\1\3"+
    "\2\0\1\3\11\0\1\25\4\0\2\25\1\316\23\25"+
    "\3\0\1\3\2\0\1\3\11\0\1\25\4\0\2\25"+
    "\1\317\23\25\3\0\1\3\2\0\1\3\11\0\1\25"+
    "\4\0\2\25\1\320\23\25\3\0\1\3\2\0\1\3"+
    "\11\0\1\25\4\0\6\25\1\321\17\25\3\0\1\3"+
    "\2\0\1\3\11\0\1\25\4\0\12\25\1\322\13\25"+
    "\3\0\1\3\2\0\1\3\11\0\1\25\4\0\16\25"+
    "\1\323\7\25\3\0\1\3\2\0\1\3\11\0\1\25"+
    "\4\0\16\25\1\324\7\25\3\0\1\3\2\0\1\3"+
    "\11\0\1\25\4\0\20\25\1\325\5\25\3\0\1\3"+
    "\2\0\1\3\11\0\1\25\4\0\2\25\1\326\23\25"+
    "\3\0\1\3\2\0\1\3\11\0\1\25\4\0\20\25"+
    "\1\327\5\25\3\0\1\3\2\0\1\3\11\0\1\25"+
    "\4\0\20\25\1\330\5\25\3\0\1\3\2\0\1\3"+
    "\11\0\1\25\4\0\21\25\1\331\4\25\3\0\1\3"+
    "\2\0\1\3\11\0\1\25\4\0\2\25\1\332\23\25"+
    "\3\0\1\3\2\0\1\3\11\0\1\25\4\0\22\25"+
    "\1\333\3\25\3\0\1\3\2\0\1\3\11\0\1\25"+
    "\4\0\21\25\1\334\4\25\3\0\1\3\2\0\1\3"+
    "\11\0\1\25\4\0\20\25\1\335\5\25\3\0\1\3"+
    "\2\0\1\3\11\0\1\25\4\0\20\25\1\336\5\25"+
    "\3\0\1\3\2\0\1\3\11\0\1\25\4\0\2\25"+
    "\1\337\23\25\3\0\1\3\2\0\1\3\11\0\1\25"+
    "\4\0\15\25\1\340\10\25\3\0\1\3\2\0\1\3"+
    "\11\0\1\25\4\0\20\25\1\341\5\25\3\0\1\3"+
    "\2\0\1\3\11\0\1\25\4\0\20\25\1\342\5\25"+
    "\3\0\1\3\2\0\1\3\11\0\1\25\4\0\23\25"+
    "\1\343\2\25\3\0\1\3\2\0\1\3\11\0\1\25"+
    "\4\0\16\25\1\344\7\25\3\0\1\3\2\0\1\3"+
    "\11\0\1\25\4\0\20\25\1\345\5\25\3\0\1\3"+
    "\2\0\1\3\11\0\1\25\4\0\2\25\1\346\23\25"+
    "\3\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[7654];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\2\1\1\11\2\1\1\0\1\1\2\11\1\1"+
    "\1\11\3\1\1\11\22\1\1\11\1\0\1\11\2\0"+
    "\2\11\1\0\2\11\1\0\3\11\35\1\1\11\1\0"+
    "\40\1\1\11\165\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[230];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    StringBuffer string = new StringBuffer();
    private Symbol symbol(int type){
        Symbol s = new Symbol(type, yyline, yycolumn);
        codigo.FrmPrincipal.tokens.add(s);
        return s;
    }
    private Symbol symbol(int type, Object value){
        Symbol s = new Symbol(type, yyline, yycolumn, value);
        codigo.FrmPrincipal.tokens.add(s);
        return s;
    }

    private void reportarError(String error, String cuerpo, int linea){
        codigo.FrmPrincipal.errores.agregarErrorLexico(error, linea, cuerpo);
        //System.out.println(cuerpo);
    }

    private void agregarTabla(LlaveTabla llave, int linea){
        codigo.FrmPrincipal.tablaSimbolos.agregarSimbolo(llave, linea);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { reportarError("EL1", yytext(), yyline + 1);return symbol(sym.error);
            }
          // fall through
          case 62: break;
          case 2:
            { /*Ignore*/
            }
          // fall through
          case 63: break;
          case 3:
            { return symbol(sym.NEGACION);
            }
          // fall through
          case 64: break;
          case 4:
            { return symbol(sym.PARENTESIS_ABIERTO);
            }
          // fall through
          case 65: break;
          case 5:
            { return symbol(sym.PARENTESIS_CERRADO);
            }
          // fall through
          case 66: break;
          case 6:
            { return symbol(sym.AR_MULTIPLICACION);
            }
          // fall through
          case 67: break;
          case 7:
            { return symbol(sym.AR_SUMA);
            }
          // fall through
          case 68: break;
          case 8:
            { return symbol(sym.COMA);
            }
          // fall through
          case 69: break;
          case 9:
            { return symbol(sym.AR_RESTA);
            }
          // fall through
          case 70: break;
          case 10:
            { return symbol(sym.AR_DIVISION);
            }
          // fall through
          case 71: break;
          case 11:
            { return symbol(sym.NUMERO, Integer.parseInt(yytext()));
            }
          // fall through
          case 72: break;
          case 12:
            { return symbol(sym.PUNTO_COMA);
            }
          // fall through
          case 73: break;
          case 13:
            { return symbol(sym.REL_MENOR);
            }
          // fall through
          case 74: break;
          case 14:
            { return symbol(sym.ASIGNACION);
            }
          // fall through
          case 75: break;
          case 15:
            { return symbol(sym.REL_MAYOR);
            }
          // fall through
          case 76: break;
          case 16:
            { LlaveTabla llave = new LlaveTabla(yytext());
                agregarTabla(llave, yyline + 1);
                return symbol(sym.IDENTIFICADOR, llave);
            }
          // fall through
          case 77: break;
          case 17:
            { return symbol(sym.LLAVE_ABIERTA);
            }
          // fall through
          case 78: break;
          case 18:
            { return symbol(sym.LLAVE_CERRADA);
            }
          // fall through
          case 79: break;
          case 19:
            { return symbol(sym.REL_DIFERENTE);
            }
          // fall through
          case 80: break;
          case 20:
            { return symbol(sym.LOGICO_AND);
            }
          // fall through
          case 81: break;
          case 21:
            { return symbol(sym.INC);
            }
          // fall through
          case 82: break;
          case 22:
            { return symbol(sym.DEC);
            }
          // fall through
          case 83: break;
          case 23:
            { return symbol(sym.REL_MENOR_IGUAL);
            }
          // fall through
          case 84: break;
          case 24:
            { return symbol(sym.REL_IGUAL);
            }
          // fall through
          case 85: break;
          case 25:
            { return symbol(sym.REL_MAYOR_IGUAL);
            }
          // fall through
          case 86: break;
          case 26:
            { return symbol(sym.HR);
            }
          // fall through
          case 87: break;
          case 27:
            { return symbol(sym.LOGICO_OR);
            }
          // fall through
          case 88: break;
          case 28:
            { return symbol(sym.FIN);
            }
          // fall through
          case 89: break;
          case 29:
            { return symbol(sym.MIN);
            }
          // fall through
          case 90: break;
          case 30:
            { return symbol(sym.POR);
            }
          // fall through
          case 91: break;
          case 31:
            { return symbol(sym.SEG);
            }
          // fall through
          case 92: break;
          case 32:
            { return symbol(sym.CADA);
            }
          // fall through
          case 93: break;
          case 33:
            { return symbol(sym.COMO);
            }
          // fall through
          case 94: break;
          case 34:
            { return symbol(sym.SINO);
            }
          // fall through
          case 95: break;
          case 35:
            { return symbol(sym.ABRIR);
            }
          // fall through
          case 96: break;
          case 36:
            { return symbol(sym.OP_BOOLEANO, false);
            }
          // fall through
          case 97: break;
          case 37:
            { return symbol(sym.LUCES);
            }
          // fall through
          case 98: break;
          case 38:
            { return symbol(sym.SALIR);
            }
          // fall through
          case 99: break;
          case 39:
            { return symbol(sym.APAGAR);
            }
          // fall through
          case 100: break;
          case 40:
            { return symbol(sym.CERRAR);
            }
          // fall through
          case 101: break;
          case 41:
            { return symbol(sym.ENTERO);
            }
          // fall through
          case 102: break;
          case 42:
            { return symbol(sym.ESTADO);
            }
          // fall through
          case 103: break;
          case 43:
            { return symbol(sym.INICIO);
            }
          // fall through
          case 104: break;
          case 44:
            { return symbol(sym.LOGICO);
            }
          // fall through
          case 105: break;
          case 45:
            { return symbol(sym.ADMITIR);
            }
          // fall through
          case 106: break;
          case 46:
            { return symbol(sym.FUNCION);
            }
          // fall through
          case 107: break;
          case 47:
            { return symbol(sym.OBTENER);
            }
          // fall through
          case 108: break;
          case 48:
            { return symbol(sym.PUERTAS);
            }
          // fall through
          case 109: break;
          case 49:
            { return symbol(sym.COMIENZO);
            }
          // fall through
          case 110: break;
          case 50:
            { return symbol(sym.DECLARAR);
            }
          // fall through
          case 111: break;
          case 51:
            { return symbol(sym.ENCENDER);
            }
          // fall through
          case 112: break;
          case 52:
            { return symbol(sym.MANTENER);
            }
          // fall through
          case 113: break;
          case 53:
            { return symbol(sym.PERSONAS);
            }
          // fall through
          case 114: break;
          case 54:
            { return symbol(sym.VENTANAS);
            }
          // fall through
          case 115: break;
          case 55:
            { return symbol(sym.VENTILAR);
            }
          // fall through
          case 116: break;
          case 56:
            { return symbol(sym.AULAVACIA);
            }
          // fall through
          case 117: break;
          case 57:
            { return symbol(sym.CONDICION);
            }
          // fall through
          case 118: break;
          case 58:
            { return symbol(sym.DISPENSAR);
            }
          // fall through
          case 119: break;
          case 59:
            { return symbol(sym.SANITIZAR);
            }
          // fall through
          case 120: break;
          case 60:
            { return symbol(sym.OP_BOOLEANO, true);
            }
          // fall through
          case 121: break;
          case 61:
            { return symbol(sym.TEMPERATURA);
            }
          // fall through
          case 122: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
